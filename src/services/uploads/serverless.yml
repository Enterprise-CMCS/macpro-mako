service: ${self:custom.project}-uploads
frameworkVersion: "3"

plugins:
  - serverless-esbuild
  - serverless-stack-termination-protection
  - "@stratiformdigital/serverless-iam-helper"
  - "@stratiformdigital/serverless-s3-security-helper"
  - serverless-scriptable-plugin
provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:REGION_A}
  stackTags:
    PROJECT: ${self:custom.project}
    SERVICE: ${self:service}
  iam:
    role:
      path: /delegatedadmin/developer/
      permissionsBoundary: arn:aws:iam::${aws:accountId}:policy/cms-cloud-admin/developer-boundary-policy
      statements:
        - Effect: "Allow"
          Action:
            - s3:GetObject
            - s3:GetObjectTagging
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:PutObjectTagging
            - s3:PutObjectVersionTagging
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*
            - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-avscan-${AWS::AccountId}/*
        - Effect: "Allow"
          Action:
            - s3:ListBucket
          Resource:
            - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}
            - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-avscan-${AWS::AccountId}
        - Effect: Allow
          Action: lambda:GetLayerVersion
          Resource: "*"

custom:
  project: ${env:PROJECT}
  accountId: !Sub "${AWS::AccountId}"
  stage: ${opt:stage, self:provider.stage}
  serverlessTerminationProtection:
    stages: # Apply CloudFormation termination protection for these stages
      - master
      - val
      - production
  scriptable:
    hooks:
      package:initialize: |
        set -e
        curl -L --output lambda_layer.zip https://github.com/CMSgov/lambda-clamav-layer/releases/download/0.7/lambda_layer.zip
      deploy:finalize: |
        rm lambda_layer.zip
        serverless invoke --stage ${self:custom.stage} --function avDownloadDefinitions -t Event

layers:
  clamDefs:
    package:
      artifact: lambda_layer.zip

functions:
  avScan:
    handler: src/antivirus.lambdaHandleEvent
    name: ${self:service}-${self:custom.stage}-avScan
    timeout: 300 # 300 seconds = 5 minutes. Average scan is 25 seconds.
    memorySize: 3008
    layers:
      - !Ref ClamDefsLambdaLayer
    environment:
      CLAMAV_BUCKET_NAME: !Ref ClamDefsBucket
      PATH_TO_AV_DEFINITIONS: "lambda/s3-antivirus/av-definitions"
  avDownloadDefinitions:
    handler: src/download-definitions.lambdaHandleEvent
    events:
      - schedule: cron(0 10 */1 * ? *)
    timeout: 300 # 300 seconds = 5 minutes
    memorySize: 1024
    layers:
      - !Ref ClamDefsLambdaLayer
    environment:
      CLAMAV_BUCKET_NAME: !Ref ClamDefsBucket
      PATH_TO_AV_DEFINITIONS: "lambda/s3-antivirus/av-definitions"
resources:
  Resources:
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}
        # Set the CORS policy
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              ExposedHeaders:
                - ETag
              MaxAge: 3000
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function: !GetAtt AvScanLambdaFunction.Arn
      DependsOn: LambdaInvokePermission
    S3CMSReadBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: AttachmentsBucket
        PolicyDocument:
          Statement:
            - Effect: Deny
              Action: "s3:PutObject"
              Principal: "*"
              NotResource:
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.bmp
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.csv
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.doc
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.docx
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.gif
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.jpg
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.jpeg
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.odp
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.ods
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.odt
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.png
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.pdf
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.ppt
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.pptx
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.rtf
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.tif
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.tiff
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.txt
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.xls
                - !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}/*.xlsx
            - Effect: Deny
              Principal: "*"
              Action: "s3:*"
              Resource:
                - !Sub ${AttachmentsBucket.Arn}/*
                - !Sub ${AttachmentsBucket.Arn}
              Condition:
                Bool:
                  "aws:SecureTransport": "false"
    LambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt AvScanLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        SourceAccount: !Sub ${AWS::AccountId}
        SourceArn: !Sub arn:aws:s3:::${self:service}-${self:custom.stage}-attachments-${AWS::AccountId}
    ClamDefsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${self:service}-${self:custom.stage}-avscan-${AWS::AccountId}
        AccessControl: Private
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
    ClamDefsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: ClamDefsBucket
        PolicyDocument:
          Statement:
            - Effect: Deny
              Principal: "*"
              Action: "s3:*"
              Resource:
                - !Sub ${ClamDefsBucket.Arn}/*
                - !Sub ${ClamDefsBucket.Arn}
              Condition:
                Bool:
                  "aws:SecureTransport": "false"
  Outputs:
    AttachmentsBucketName:
      Value:
        Ref: AttachmentsBucket
    AttachmentsBucketArn:
      Value: !GetAtt AttachmentsBucket.Arn
    Region:
      Value: ${self:provider.region}
