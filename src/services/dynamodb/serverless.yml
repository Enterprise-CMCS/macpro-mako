service: ${self:custom.project}-database

frameworkVersion: "3"

package:
  individually: true

plugins:
 # - serverless-dynamodb-local
 # - serverless-v3-dynamodb-seed
  - serverless-stack-termination-protection
  - "@stratiformdigital/serverless-s3-security-helper"

provider:
  name: aws
  region: us-east-1
  stackTags:
    PROJECT: ${self:custom.project}
    SERVICE: ${self:service}

custom:
  project: ${env:PROJECT}
  serverlessTerminationProtection:
    stages: # Apply CloudFormation termination protection for these stages
      - master
      - val
      - production
  tableName: ${self:custom.project}-${self:service}-table
 # dynamodb:
  #  stages:
  #    - local
   # start:
   #   docker: true
    #  port: 8000
     # inMemory: true
     # migrate: true  
     # seed: true  
   # seed:
   #   table-seed:
   #     sources:
   #       - table: ${self:custom.project}-${self:service}-table
   #         sources: [./seed-templates/Table.json]

resources:
  Resources:
    LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      path: /delegatedadmin/developer/
      permissionsBoundary: arn:aws:iam::${aws:accountId}:policy/cms-cloud-admin/developer-boundary-policy
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:*
              Resource: "*"
            - Effect: Allow
              Action:
              - logs:*
              Resource: "*"
    InitFunction:
      Type: AWS::Lambda::Function
      Properties:
        Code:
          ZipFile: >
            const AWS = require("aws-sdk");
            const response = require("cfn-response");
            const docClient = new AWS.DynamoDB.DocumentClient();
            exports.handler = function(event, context) {
                console.log(JSON.stringify(event,null,2));
                var params = {
                  TableName: event.ResourceProperties.DynamoTableName,
                  Item:{
                      "id": "abc123"
                  }
              };
            docClient.put(params, function(err, data) { if (err) {
              response.send(event, context, "FAILED", {});
            } else {
              response.send(event, context, "SUCCESS", {});
            }
            });
            };
        Handler: index.handler
        Role:
          Fn::GetAtt: [ LambdaRole , "Arn" ]
        Runtime: nodejs4.3
        Timeout: 60
    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    InitializeDynamoDB:
    Type: Custom::InitFunction
    DependsOn: Table
    Properties:
      ServiceToken:
         Fn::GetAtt: [ InitFunction , "Arn" ]
      DynamoTableName:
        Ref: Table


Outputs:
  TableName:
    Value: !Ref Table
