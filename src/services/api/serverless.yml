service: ${self:custom.project}-api
frameworkVersion: "3"
plugins:
  - serverless-esbuild
  - serverless-stack-termination-protection
  - "@stratiformdigital/serverless-iam-helper"
  - "@stratiformdigital/serverless-s3-security-helper"
  - serverless-scriptable-plugin
  - serverless-plugin-scripts

provider:
  name: aws
  runtime: nodejs18.x
  logs:
    restApi: true
  region: ${env:REGION_A}
  stackTags:
    PROJECT: ${self:custom.project}
    SERVICE: ${self:service}
  iam:
    role:
      path: /delegatedadmin/developer/
      permissionsBoundary: arn:aws:iam::${aws:accountId}:policy/cms-cloud-admin/developer-boundary-policy
      statements:
        - Effect: Allow
          Action:
            - es:ESHttpHead
            - es:ESHttpPost
            - es:ESHttpGet
            - es:ESHttpPatch
            - es:ESHttpDelete
            - es:ESHttpPut
          Resource: ${param:osDomainArn}/*
        - Effect: Allow
          Action:
            - cognito-idp:GetUser
            - cognito-idp:ListUsers
          Resource: "*"
        - Effect: Allow
          Action:
            - sts:AssumeRole
          Resource:
            - ${self:custom.onemacLegacyS3AccessRoleArn}
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:PutObjectTagging
            - s3:GetObject
            - s3:GetObjectTagging
          Resource:
            - ${param:attachmentsBucketArn}/*

custom:
  project: ${env:PROJECT}
  accountId: !Sub "${AWS::AccountId}"
  stage: ${opt:stage, self:provider.stage}
  serverlessTerminationProtection:
    stages: # Apply CloudFormation termination protection for these stages
      - master
      - val
      - production
  vpc: ${ssm:/aws/reference/secretsmanager/${self:custom.project}/${sls:stage}/vpc, ssm:/aws/reference/secretsmanager/${self:custom.project}/default/vpc}
  onemacLegacyS3AccessRoleArn: ${ssm:/aws/reference/secretsmanager/${self:custom.project}/${sls:stage}/onemacLegacyS3AccessRoleArn, ssm:/aws/reference/secretsmanager/${self:custom.project}/default/onemacLegacyS3AccessRoleArn}
  dbInfo: ${ssm:/aws/reference/secretsmanager/${self:custom.project}/${sls:stage}/seatool/dbInfo, ssm:/aws/reference/secretsmanager/${self:custom.project}/default/seatool/dbInfo}
  brokerString: ${ssm:/aws/reference/secretsmanager/${self:custom.project}/${sls:stage}/brokerString, ssm:/aws/reference/secretsmanager/${self:custom.project}/default/brokerString}
  scriptable:
    hooks:
      package:compileEvents:
        - yarn compileRepack
        - ./repack/repack.js
  scripts:
    hooks:
      package:initialize: |
        yarn buildLayers
params:
  master:
    formsProvisionedConcurrency: 2
    searchProvisionedConcurrency: 4
    itemProvisionedConcurrency: 2
    getAttachmentUrlProvisionedConcurrency: 2
    submitProvisionedConcurrency: 2
  val:
    formsProvisionedConcurrency: 2
    searchProvisionedConcurrency: 4
    itemProvisionedConcurrency: 2
    getAttachmentUrlProvisionedConcurrency: 2
    submitProvisionedConcurrency: 2
  production:
    formsProvisionedConcurrency: 5
    searchProvisionedConcurrency: 10
    itemProvisionedConcurrency: 5
    getAttachmentUrlProvisionedConcurrency: 5
    submitProvisionedConcurrency: 5
  default:
    formsProvisionedConcurrency: 0
    searchProvisionedConcurrency: 0
    itemProvisionedConcurrency: 0
    getAttachmentUrlProvisionedConcurrency: 0
    submitProvisionedConcurrency: 0

functions:
  search:
    handler: handlers/search.handler
    maximumRetryAttempts: 0
    environment:
      region: ${self:provider.region}
      osDomain: ${param:osDomain}
    events:
      - http:
          path: /search
          method: post
          cors: true
          authorizer: aws_iam
    vpc:
      securityGroupIds:
        - Ref: SecurityGroup
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
    provisionedConcurrency: ${param:searchProvisionedConcurrency}
  getPackageActions:
    handler: handlers/getPackageActions.handler
    maximumRetryAttempts: 0
    environment:
      region: ${self:provider.region}
      osDomain: ${param:osDomain}
      onemacLegacyS3AccessRoleArn: ${self:custom.onemacLegacyS3AccessRoleArn}
    events:
      - http:
          path: /getPackageActions
          method: post
          cors: true
          authorizer: aws_iam
    vpc:
      securityGroupIds:
        - Ref: SecurityGroup
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
    provisionedConcurrency: ${param:getAttachmentUrlProvisionedConcurrency}
  getAttachmentUrl:
    handler: handlers/getAttachmentUrl.handler
    maximumRetryAttempts: 0
    environment:
      region: ${self:provider.region}
      osDomain: ${param:osDomain}
      onemacLegacyS3AccessRoleArn: ${self:custom.onemacLegacyS3AccessRoleArn}
    events:
      - http:
          path: /getAttachmentUrl
          method: post
          cors: true
          authorizer: aws_iam
    vpc:
      securityGroupIds:
        - Ref: SecurityGroup
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
    provisionedConcurrency: ${param:getAttachmentUrlProvisionedConcurrency}
  getUploadUrl:
    handler: handlers/getUploadUrl.handler
    environment:
      attachmentsBucketName: ${param:attachmentsBucketName}
      attachmentsBucketRegion: ${param:attachmentsBucketRegion}
    events:
      - http:
          path: /getUploadUrl
          method: post
          cors: true
          authorizer: aws_iam
  item:
    handler: handlers/item.handler
    maximumRetryAttempts: 0
    environment:
      region: ${self:provider.region}
      osDomain: ${param:osDomain}
    events:
      - http:
          path: /item
          method: post
          cors: true
          authorizer: aws_iam
    vpc:
      securityGroupIds:
        - Ref: SecurityGroup
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
    provisionedConcurrency: ${param:itemProvisionedConcurrency}
  submit:
    handler: handlers/submit.handler
    maximumRetryAttempts: 0
    environment:
      region: ${self:provider.region}
      dbIp: ${self:custom.dbInfo.ip}
      dbPort: ${self:custom.dbInfo.port}
      dbUser: ${self:custom.dbInfo.user}
      dbPassword: ${self:custom.dbInfo.password}
      topicName: ${param:topicName}
      brokerString: ${self:custom.brokerString}
    events:
      - http:
          path: /submit
          method: post
          cors: true
          authorizer: aws_iam
    vpc:
      securityGroupIds:
        - Ref: SecurityGroup
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
    provisionedConcurrency: ${param:submitProvisionedConcurrency}
  action:
    handler: handlers/action.handler
    maximumRetryAttempts: 0
    environment:
      region: ${self:provider.region}
      osDomain: ${param:osDomain}
      dbIp: ${self:custom.dbInfo.ip}
      dbPort: ${self:custom.dbInfo.port}
      dbUser: ${self:custom.dbInfo.user}
      dbPassword: ${self:custom.dbInfo.password}
      topicName: ${param:topicName}
      brokerString: ${self:custom.brokerString}
    events:
      - http:
          path: /action/{actionType}
          method: post
          cors: true
          authorizer: aws_iam
    vpc:
      securityGroupIds:
        - Ref: SecurityGroup
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
    provisionedConcurrency: ${param:submitProvisionedConcurrency}
  forms:
    handler: handlers/forms.handler
    layers:
      - !Ref FormsLambdaLayer
    maximumRetryAttempts: 0
    environment:
      region: ${self:provider.region}
      osDomain: ${param:osDomain}
    events:
      - http:
          path: /forms
          method: get
          cors: true
          authorizer: aws_iam
    vpc:
      securityGroupIds:
        - Ref: SecurityGroup
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
    provisionedConcurrency: ${param:searchProvisionedConcurrency}
layers:
  forms:
    path: layers
    description: Lambda Layer for forms function
resources:
  Resources:
    ApiGateway400ErrorCount:
      Type: AWS::Logs::MetricFilter
      Properties:
        LogGroupName: !Ref ApiGatewayLogGroup
        FilterName: ApiGateway400ErrorCount
        FilterPattern: "[ip, user, timestamp, request, status = 4*]"
        MetricTransformations:
          - MetricValue: "1"
            DefaultValue: "0"
            MetricNamespace: "${self:service}-${sls:stage}/ApiGateway/errors"
            MetricName: "ApiGateway400ErrorCount"
            Unit: Count
    ApiGateway400ErrorCountAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        DatapointsToAlarm: 1
        AlarmActions:
          - ${param:ECSFailureTopicArn}
        AlarmName: "${self:service}-${sls:stage}-400-errors"
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Period: 300
        Threshold: 1
        MetricName: ApiGateway400ErrorCount
        Namespace: "${self:service}-${sls:stage}/ApiGateway/errors"
        Statistic: Sum
        TreatMissingData: notBreaching
    ApiGateway500ErrorCount:
      Type: AWS::Logs::MetricFilter
      Properties:
        LogGroupName: !Ref ApiGatewayLogGroup
        FilterName: ApiGateway500ErrorCount
        FilterPattern: "[ip, user, timestamp, request, status = 5*]"
        MetricTransformations:
          - MetricValue: "1"
            DefaultValue: "0"
            MetricNamespace: "${self:service}-${sls:stage}/ApiGateway/errors"
            MetricName: "ApiGateway500ErrorCount"
            Unit: Count

    # CloudWatch Alarm for API Gateway 500-level Errors
    ApiGateway500ErrorCountAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        DatapointsToAlarm: 1
        AlarmActions:
          - ${param:ECSFailureTopicArn}
        AlarmName: "${self:service}-${sls:stage}-500-errors"
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Period: 300
        Threshold: 1
        MetricName: ApiGateway500ErrorCount
        Namespace: "${self:service}-${sls:stage}/ApiGateway/errors"
        Statistic: Sum
        TreatMissingData: notBreaching
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref ApiGatewayRestApi
    LambdaLogMessageMetricFilter:
      Type: "AWS::Logs::MetricFilter"
      Properties:
        LogGroupName: !Ref SearchLogGroup
        FilterPattern: "ERROR"
        MetricTransformations:
          - MetricName: LambdaErrorCount
            MetricNamespace: "${self:service}-${sls:stage}/lambda-search/Errors"
            MetricValue: "1"
            DefaultValue: "0"
    LambdaErrorCountAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-lambda-search-${sls:stage}-errors
        AlarmDescription: "Lambda Error Count Alarm"
        MetricName: LambdaErrorCount
        Namespace: "${self:service}-${sls:stage}/lambda/search-error-count-alarm"
        Statistic: "Sum"
        Period: 300
        EvaluationPeriods: 1
        Threshold: 1
        TreatMissingData: notBreaching
        ComparisonOperator: "GreaterThanOrEqualToThreshold"
        AlarmActions:
          - ${param:ECSFailureTopicArn}
    SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      DeletionPolicy: Retain
      Properties:
        GroupDescription: Security group for API Search.
        VpcId: ${self:custom.vpc.id}
    SecurityGroupEgress:
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        GroupId: !Ref SecurityGroup
        IpProtocol: -1
        CidrIp: 0.0.0.0/0
  Outputs:
    ApiGatewayRestApiName:
      Value: !Ref ApiGatewayRestApi
    ApiGatewayRestApiUrl:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    Region:
      Value: !Sub ${AWS::Region}
