service: ${self:custom.project}-api
frameworkVersion: "3"
package:
  individually: true
plugins:
  - serverless-bundle
  - serverless-stack-termination-protection
  - "@stratiformdigital/serverless-iam-helper"
  - "@stratiformdigital/serverless-s3-security-helper"
provider:
  name: aws
  runtime: nodejs18.x
  logs:
    restApi: true
  region: ${env:REGION_A}
  stackTags:
    PROJECT: ${self:custom.project}
    SERVICE: ${self:service}
  iam:
    role:
      path: /delegatedadmin/developer/
      permissionsBoundary: arn:aws:iam::${aws:accountId}:policy/cms-cloud-admin/developer-boundary-policy
      statements:
        - Effect: Allow
          Action:
            - es:ESHttpHead
            - es:ESHttpPost
            - es:ESHttpGet
            - es:ESHttpPatch
            - es:ESHttpDelete
            - es:ESHttpPut
          Resource: ${param:osDomainArn}/*
        - Effect: Allow
          Action:
            - cognito-idp:GetUser
            - cognito-idp:ListUsers
          Resource: "*"
        - Effect: Allow
          Action:
            - sts:AssumeRole
          Resource:
            - ${self:custom.onemacLegacyS3AccessRoleArn}

custom:
  project: ${env:PROJECT}
  accountId: !Sub "${AWS::AccountId}"
  stage: ${opt:stage, self:provider.stage}
  serverlessTerminationProtection:
    stages: # Apply CloudFormation termination protection for these stages
      - master
      - val
      - production
  bundle:
    linting: false
    packager: yarn
  vpc: ${ssm:/aws/reference/secretsmanager/${self:custom.project}/${sls:stage}/vpc, ssm:/aws/reference/secretsmanager/${self:custom.project}/default/vpc}
  onemacLegacyS3AccessRoleArn: ${ssm:/aws/reference/secretsmanager/${self:custom.project}/${sls:stage}/onemacLegacyS3AccessRoleArn, ssm:/aws/reference/secretsmanager/${self:custom.project}/default/onemacLegacyS3AccessRoleArn}

params:
  master:
    provisionedConcurrency: 10
  val:
    provisionedConcurrency: 10
  production:
    provisionedConcurrency: 10
  default:
    provisionedConcurrency: 1

functions:
  search:
    handler: handlers/search.handler
    maximumRetryAttempts: 0
    environment:
      region: ${self:provider.region}
      osDomain: ${param:osDomain}
    events:
      - http:
          path: /search
          method: post
          cors: true
          authorizer: aws_iam
    vpc:
      securityGroupIds:
        - Ref: SecurityGroup
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
    provisionedConcurrency: ${param:provisionedConcurrency}
  getAttachmentUrl:
    handler: handlers/getAttachmentUrl.handler
    maximumRetryAttempts: 0
    environment:
      region: ${self:provider.region}
      osDomain: ${param:osDomain}
      onemacLegacyS3AccessRoleArn: ${self:custom.onemacLegacyS3AccessRoleArn}
    events:
      - http:
          path: /getAttachmentUrl
          method: post
          cors: true
          authorizer: aws_iam
    vpc:
      securityGroupIds:
        - Ref: SecurityGroup
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
    provisionedConcurrency: ${param:provisionedConcurrency}
  item:
    handler: handlers/item.handler
    maximumRetryAttempts: 0
    environment:
      region: ${self:provider.region}
      osDomain: ${param:osDomain}
    events:
      - http:
          path: /item
          method: post
          cors: true
          authorizer: aws_iam
    vpc:
      securityGroupIds:
        - Ref: SecurityGroup
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
    provisionedConcurrency: ${param:provisionedConcurrency}
resources:
  Resources:
    ApiGateway400ErrorCount:
      Type: AWS::Logs::MetricFilter
      Properties:
        LogGroupName: !Sub /aws/api-gateway/${self:service}-${sls:stage}
        FilterName: ApiGateway400ErrorCount
        FilterPattern: '[ip, user, timestamp, request, status = 4*]'
        MetricTransformations:
          - MetricValue: "1"
            DefaultValue: "0"
            MetricNamespace: "${self:service}-${sls:stage}/ApiGateway/ERRORS"
            MetricName: "ApiGateway400ErrorCount"
            Unit: Count

    # CloudWatch Alarm for API Gateway 400-level Errors
    ApiGateway400ErrorCountAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        DatapointsToAlarm: 1
        AlarmActions:
          - ${param:ECSFailureTopicArn}
        AlarmName: "${self:service}-${sls:stage}-400-errors"
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 2
        Period: 300
        Threshold: 1
        MetricName: ApiGateway400ErrorCount
        Namespace: "${self:service}-${sls:stage}/ApiGateway/ERRORS"
        Statistic: Sum

    # Metric Filter for API Gateway 500-level Errors
    ApiGateway500ErrorCount:
      Type: AWS::Logs::MetricFilter
      Properties:
        LogGroupName: !Sub /aws/api-gateway/${self:service}-${sls:stage}
        FilterName: ApiGateway500ErrorCount
        FilterPattern: '[ip, user, timestamp, request, status = 5*]'
        MetricTransformations:
          - MetricValue: "1"
            DefaultValue: "0"
            MetricNamespace: "${self:service}-${sls:stage}/ApiGateway/ERRORS"
            MetricName: "ApiGateway500ErrorCount"
            Unit: Count

    # CloudWatch Alarm for API Gateway 500-level Errors
    ApiGateway500ErrorCountAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        DatapointsToAlarm: 1
        AlarmActions:
          - ${param:ECSFailureTopicArn}
        AlarmName: "${self:service}-${sls:stage}-500-errors"
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 2
        Period: 300
        Threshold: 1
        MetricName: ApiGateway500ErrorCount
        Namespace: "${self:service}-${sls:stage}/ApiGateway/ERRORS"
        Statistic: Sum
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref ApiGatewayRestApi
    SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      DeletionPolicy: Retain
      Properties:
        GroupDescription: Security group for API Search.
        VpcId: ${self:custom.vpc.id}
    SecurityGroupEgress:
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        GroupId: !Ref SecurityGroup
        IpProtocol: -1
        CidrIp: 0.0.0.0/0
  Outputs:
    ApiGatewayRestApiName:
      Value: !Ref ApiGatewayRestApi
    ApiGatewayRestApiUrl:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    Region:
      Value: !Sub ${AWS::Region}
