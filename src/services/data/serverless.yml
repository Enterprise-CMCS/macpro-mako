service: ${self:custom.project}-data

frameworkVersion: "3"

plugins:
  - serverless-stack-termination-protection
  - "@stratiformdigital/serverless-s3-security-helper"
  - "@stratiformdigital/serverless-iam-helper"
  - serverless-plugin-scripts
  - serverless-esbuild
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stackTags:
    PROJECT: ${self:custom.project}
    SERVICE: ${self:service}
  environment:
    region: ${self:provider.region}
    osDomain: !Sub https://${OpenSearch.DomainEndpoint}
    brokerString: ${self:custom.brokerString}
  timeout: 60
  iam:
    role:
      path: /delegatedadmin/developer/
      permissionsBoundary: arn:aws:iam::${aws:accountId}:policy/cms-cloud-admin/developer-boundary-policy
      statements:
        - Effect: Deny # Prevents delayed custom resource logs from re-creating log groups after deletion.
          Action:
            - logs:CreateLogGroup
          Resource: "*"
        - Effect: "Allow"
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminUpdateUserAttributes
          Resource: !GetAtt CognitoUserPool.Arn
        - Effect: Allow
          Action:
            - lambda:CreateEventSourceMapping
            - lambda:ListEventSourceMappings
            - lambda:PutFunctionConcurrency
            - lambda:DeleteEventSourceMapping
            - lambda:UpdateEventSourceMapping
            - lambda:GetEventSourceMapping
          Resource: "*"
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DescribeVpcs
            - ec2:DeleteNetworkInterface
            - ec2:DescribeSubnets
            - ec2:DescribeSecurityGroups
          Resource: "*"
        - Effect: Allow
          Action:
            - es:ESHttpHead
            - es:ESHttpPost
            - es:ESHttpGet
            - es:ESHttpPatch
            - es:ESHttpDelete
            - es:ESHttpPut
          Resource: !Sub "${OpenSearch.Arn}/*"
        - Effect: Allow
          Action:
            - sts:AssumeRole
          Resource: !GetAtt OpenSearchMasterRole.Arn
        - Effect: Allow
          Action:
            - states:StartExecution
          Resource:
            - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${self:service}-${sls:stage}-reindex
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource:
            - Fn::If:
                - Backup
                - !Sub "${self:custom.eventsBackupBucketArn}/*"
                - !Ref AWS::NoValue
custom:
  project: ${env:PROJECT}
  serverlessTerminationProtection:
    stages: # Apply CloudFormation termination protection for these stages
      - master
      - val
      - production
  vpc: ${ssm:/aws/reference/secretsmanager/${self:custom.project}/${sls:stage}/vpc, ssm:/aws/reference/secretsmanager/${self:custom.project}/default/vpc}
  brokerString: ${ssm:/aws/reference/secretsmanager/${self:custom.project}/${sls:stage}/brokerString, ssm:/aws/reference/secretsmanager/${self:custom.project}/default/brokerString}
  bootstrapKibanaUsers: ${ssm:/aws/reference/secretsmanager/${self:custom.project}/${sls:stage}/bootstrapKibanaUsers, param:bootstrapKibanaUsers}
  bootstrapUsersPassword: ${ssm:/aws/reference/secretsmanager/${self:custom.project}/${sls:stage}/bootstrapUsersPassword, ssm:/aws/reference/secretsmanager/${self:custom.project}/default/bootstrapUsersPassword}
  consumerGroupPrefix: --${self:custom.project}--${sls:stage}--
  eventsBackupBucketArn: ${cf:${self:custom.project}-backup-${sls:stage}.EventsBackupBucketArn, ""}
  eventsBackupBucketName: ${cf:${self:custom.project}-backup-${sls:stage}.EventsBackupBucketName, ""}
  scripts:
    hooks:
      deploy:finalize: |
        if [ "${self:custom.bootstrapKibanaUsers}" = "true" ];
        then
          aws lambda invoke --region ${self:provider.region} --function-name ${self:service}-${sls:stage}-bootstrapUsers --invocation-type RequestResponse /dev/null
        fi
stepFunctions:
  stateMachines:
    reindex:
      name: ${self:service}-${sls:stage}-reindex
      id: ReindexDataStateMachine
      loggingConfig:
        level: ALL
        includeExecutionData: true
        destinations:
          - !GetAtt StateMachineLogGroup.Arn
      definition:
        Comment: "A state machine to reindex the OpenSearch index."
        StartAt: DeleteAllTriggers
        States:
          DeleteAllTriggers:
            Type: Task
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-deleteTriggers"
            Parameters:
              Context.$: $$
              Functions:
                - !Ref SinkMainLambdaFunction
                - !Ref SinkChangelogLambdaFunction
                - !Ref SinkTypesLambdaFunction
                - !Ref SinkSubtypesLambdaFunction
                - !Ref SinkCpocsLambdaFunction
                - !Ref SinkInsightsLambdaFunction
                - !Ref SinkLegacyInsightsLambdaFunction
            Next: DeleteIndex
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: NotifyOfFailure
          DeleteIndex:
            Type: Task
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-deleteIndex"
            Parameters:
              Context.$: $$
            Next: SetupIndex
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: NotifyOfFailure
          SetupIndex:
            Type: Task
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-setupIndex"
            Parameters:
              Context.$: $$
            Next: StartIndexingData
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: NotifyOfFailure
          StartIndexingData:
            Type: Task
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-createTriggers"
            Parameters:
              Context.$: $$
              BrokerString: ${self:custom.brokerString}
              SecurityGroup: !Sub security_group:${param:LambdaSecurityGroupId}
              ConsumerGroupPrefix: ${self:custom.consumerGroupPrefix}
              Subnets:
                - ${self:custom.vpc.privateSubnets.0}
                - ${self:custom.vpc.privateSubnets.1}
                - ${self:custom.vpc.privateSubnets.2}
              Triggers:
                - Function: !Ref SinkMainLambdaFunction
                  Topics:
                    - aws.seatool.ksql.onemac.agg.State_Plan
                    - aws.onemac.migration.cdc
                    - ${param:topicNamespace}aws.onemac.migration.cdc
                    - aws.seatool.debezium.changed_date.SEA.dbo.State_Plan
                - Function: !Ref SinkChangelogLambdaFunction
                  Topics:
                    - aws.onemac.migration.cdc
                    - ${param:topicNamespace}aws.onemac.migration.cdc
                - Function: !Ref SinkTypesLambdaFunction
                  BatchSize: 10000
                  Topics:
                    - aws.seatool.debezium.cdc.SEA.dbo.SPA_Type
                - Function: !Ref SinkSubtypesLambdaFunction
                  BatchSize: 10000
                  Topics:
                    - aws.seatool.debezium.cdc.SEA.dbo.Type
                - Function: !Ref SinkCpocsLambdaFunction
                  Topics:
                    - aws.seatool.debezium.cdc.SEA.dbo.Officers
            Next: CheckDataProgress
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: NotifyOfFailure
          CheckDataProgress:
            Type: Task
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-checkConsumerLag"
            Parameters:
              Context.$: $$
              Triggers:
                - Function: !Ref SinkMainLambdaFunction
                  Topics:
                    - aws.seatool.ksql.onemac.agg.State_Plan
                    - aws.onemac.migration.cdc
                    - ${param:topicNamespace}aws.onemac.migration.cdc
                    - aws.seatool.debezium.changed_date.SEA.dbo.State_Plan
                - Function: !Ref SinkChangelogLambdaFunction
                  Topics:
                    - aws.onemac.migration.cdc
                    - ${param:topicNamespace}aws.onemac.migration.cdc
                - Function: !Ref SinkTypesLambdaFunction
                  BatchSize: 10000
                  Topics:
                    - aws.seatool.debezium.cdc.SEA.dbo.SPA_Type
                - Function: !Ref SinkSubtypesLambdaFunction
                  BatchSize: 10000
                  Topics:
                    - aws.seatool.debezium.cdc.SEA.dbo.Type
                - Function: !Ref SinkCpocsLambdaFunction
                  Topics:
                    - aws.seatool.debezium.cdc.SEA.dbo.Officers
              BrokerString: ${self:custom.brokerString}
            Next: IsDataReady
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: NotifyOfFailure
          IsDataReady:
            Type: Choice
            Choices:
              - Variable: $.ready
                BooleanEquals: true
                Next: StartIndexingInsights
              - Variable: $.ready
                BooleanEquals: false
                Next: WaitForData
            Default: WaitForData
          WaitForData:
            Type: Wait
            Seconds: 3
            Next: CheckDataProgress
          StartIndexingInsights:
            Type: Task
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-createTriggers"
            Parameters:
              Context.$: $$
              BrokerString: ${self:custom.brokerString}
              SecurityGroup: !Sub security_group:${param:LambdaSecurityGroupId}
              ConsumerGroupPrefix: ${self:custom.consumerGroupPrefix}
              Subnets:
                - ${self:custom.vpc.privateSubnets.0}
                - ${self:custom.vpc.privateSubnets.1}
                - ${self:custom.vpc.privateSubnets.2}
              Triggers:
                - Function: !Ref SinkInsightsLambdaFunction
                  Topics:
                    - aws.seatool.ksql.onemac.agg.State_Plan
                - Function: !Ref SinkLegacyInsightsLambdaFunction
                  Topics:
                    - aws.onemac.migration.cdc
                    - ${param:topicNamespace}aws.onemac.migration.cdc
            Next: NotifyOfSuccess
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: NotifyOfFailure
          NotifyOfSuccess:
            Type: Task
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-cfnNotify"
            Parameters:
              Context.$: $$
              Success: true
            Next: SuccessState
          NotifyOfFailure:
            Type: Task
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:service}-${sls:stage}-cfnNotify"
            Parameters:
              Context.$: $$
              Success: false
            Next: FailureState
          SuccessState:
            Type: Succeed
          FailureState:
            Type: Fail

params:
  master:
    osInstanceType: or1.large.search
    topicNamespace: ""
    sinkProvisionedConcurrency: 2
  val:
    osInstanceType: or1.large.search
    topicNamespace: ""
    sinkProvisionedConcurrency: 2
  production:
    bootstrapKibanaUsers: "false"
    osInstanceType: or1.large.search
    topicNamespace: ""
    sinkProvisionedConcurrency: 2
  default:
    osInstanceType: or1.medium.search
    bootstrapKibanaUsers: "true"
    topicNamespace: --${self:custom.project}--${sls:stage}--
    sinkProvisionedConcurrency: 0

package:
  individually: true

functions:
  bootstrapUsers:
    environment:
      bootstrapUsersPassword: ${self:custom.bootstrapUsersPassword}
      userPoolId: !Ref CognitoUserPool
    handler: handlers/createUsers.handler
  checkConsumerLag:
    handler: handlers/checkConsumerLag.handler
    timeout: 900
    vpc:
      securityGroupIds:
        - ${param:LambdaSecurityGroupId}
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
  cleanupKafka:
    handler: handlers/cleanupKafka.handler
    timeout: 300
    vpc:
      securityGroupIds:
        - ${param:LambdaSecurityGroupId}
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
  cleanupTriggersOnDelete:
    handler: handlers/deleteTriggers.customResourceWrapper
    timeout: 900
  cfnNotify:
    handler: handlers/cfnNotify.handler
  createTopics:
    handler: handlers/createTopics.handler
    timeout: 300
    vpc:
      securityGroupIds:
        - ${param:LambdaSecurityGroupId}
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
  createTriggers:
    handler: handlers/createTriggers.handler
    timeout: 900
  deleteIndex:
    handler: handlers/deleteIndex.handler
    vpc:
      securityGroupIds:
        - ${param:LambdaSecurityGroupId}
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
  deleteTriggers:
    handler: handlers/deleteTriggers.handler
    timeout: 900
  mapRole:
    handler: handlers/mapRole.handler
    vpc:
      securityGroupIds:
        - ${param:LambdaSecurityGroupId}
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
  runReindex:
    handler: handlers/runReindex.handler
  setupIndex:
    handler: handlers/setupIndex.handler
    vpc:
      securityGroupIds:
        - ${param:LambdaSecurityGroupId}
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
  sinkChangelog:
    handler: handlers/sinkChangelog.handler
    maximumRetryAttempts: 0
    vpc:
      securityGroupIds:
        - ${param:LambdaSecurityGroupId}
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
    provisionedConcurrency: ${param:sinkProvisionedConcurrency}
  sinkInsights:
    handler: handlers/sinkInsights.handler
    maximumRetryAttempts: 0
    vpc:
      securityGroupIds:
        - ${param:LambdaSecurityGroupId}
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
  sinkLegacyInsights:
    handler: handlers/sinkLegacyInsights.handler
    maximumRetryAttempts: 0
    vpc:
      securityGroupIds:
        - ${param:LambdaSecurityGroupId}
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
  sinkMain:
    handler: handlers/sinkMain.handler
    maximumRetryAttempts: 0
    vpc:
      securityGroupIds:
        - ${param:LambdaSecurityGroupId}
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
    provisionedConcurrency: ${param:sinkProvisionedConcurrency}
  sinkSubtypes:
    handler: handlers/sinkSubtypes.handler
    maximumRetryAttempts: 0
    vpc:
      securityGroupIds:
        - ${param:LambdaSecurityGroupId}
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
  sinkTypes:
    handler: handlers/sinkTypes.handler
    maximumRetryAttempts: 0
    vpc:
      securityGroupIds:
        - ${param:LambdaSecurityGroupId}
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
  sinkCpocs:
    handler: handlers/sinkCpocs.handler
    maximumRetryAttempts: 0
    vpc:
      securityGroupIds:
        - ${param:LambdaSecurityGroupId}
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
  sinkBackup:
    handler: handlers/sinkBackup.handler
    maximumRetryAttempts: 0
    vpc:
      securityGroupIds:
        - ${param:LambdaSecurityGroupId}
      subnetIds: >-
        ${self:custom.vpc.privateSubnets}
    environment:
      bucket: ${self:custom.eventsBackupBucketName}

resources:
  Conditions:
    isDev:
      Fn::Not:
        - Fn::Equals:
            - ${param:topicNamespace}
            - ""
    Backup:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:custom.eventsBackupBucketArn}
  Resources:
    StateMachineLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/vendedlogs/states/${self:service}-${sls:stage}-reindex
    RunReindex:
      Type: Custom::RunReindex
      Properties:
        ServiceToken: !GetAtt RunReindexLambdaFunction.Arn
        StateMachine: !Ref ReindexDataStateMachine
      DependsOn: MapRole
    MapRole:
      Type: Custom::MapRole
      Properties:
        ServiceToken: !GetAtt MapRoleLambdaFunction.Arn
        OsDomain: !Sub https://${OpenSearch.DomainEndpoint}
        IamRoleName: !Sub "arn:aws:iam::${AWS::AccountId}:role/*"
        MasterRoleToAssume: !GetAtt OpenSearchMasterRole.Arn
        OsRoleName: all_access
    MetricFilterSinkMain:
      Type: "AWS::Logs::MetricFilter"
      Properties:
        LogGroupName: !Ref SinkMainLogGroup
        FilterPattern: "{ $.level = 50 }"
        MetricTransformations:
          - MetricName: Errors
            MetricNamespace: ${self:service}-${sls:stage}/lambda/sinkMain
            MetricValue: "1"
            DefaultValue: null
    MetricFilterSinkChangelog:
      Type: "AWS::Logs::MetricFilter"
      Properties:
        LogGroupName: !Ref SinkChangelogLogGroup
        FilterPattern: "{ $.level = 50 }"
        MetricTransformations:
          - MetricName: Errors
            MetricNamespace: ${self:service}-${sls:stage}/lambda/sinkChangelog
            MetricValue: "1"
            DefaultValue: null
    MetricFilterSinkTypes:
      Type: "AWS::Logs::MetricFilter"
      Properties:
        LogGroupName: !Ref SinkTypesLogGroup
        FilterPattern: "{ $.level = 50 }"
        MetricTransformations:
          - MetricName: Errors
            MetricNamespace: ${self:service}-${sls:stage}/lambda/sinkTypes
            MetricValue: "1"
            DefaultValue: null
    MetricFilterSinkSubtypes:
      Type: "AWS::Logs::MetricFilter"
      Properties:
        LogGroupName: !Ref SinkSubtypesLogGroup
        FilterPattern: "{ $.level = 50 }"
        MetricTransformations:
          - MetricName: Errors
            MetricNamespace: ${self:service}-${sls:stage}/lambda/sinkSubtypes
            MetricValue: "1"
            DefaultValue: null
    AlarmSinkMain:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${sls:stage}-sinkMain-errors
        Namespace: ${self:service}-${sls:stage}/lambda/sinkMain
        MetricName: Errors
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Period: 300
        Statistic: Sum
        TreatMissingData: notBreaching
        Threshold: 1
        AlarmActions:
          - ${param:ECSFailureTopicArn}
    AlarmSinkChangelog:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${sls:stage}-sinkChangelog-errors
        Namespace: ${self:service}-${sls:stage}/lambda/sinkChangelog
        MetricName: Errors
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Period: 300
        Statistic: Sum
        TreatMissingData: notBreaching
        Threshold: 1
        AlarmActions:
          - ${param:ECSFailureTopicArn}
    AlarmSinkTypes:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${sls:stage}-sinkTypes-errors
        Namespace: ${self:service}-${sls:stage}/lambda/sinkTypes
        MetricName: Errors
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Period: 300
        Statistic: Sum
        TreatMissingData: notBreaching
        Threshold: 1
        AlarmActions:
          - ${param:ECSFailureTopicArn}
    AlarmSinkSubtypes:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${sls:stage}-sinkSubtypes-errors
        Namespace: ${self:service}-${sls:stage}/lambda/sinkSubtypes
        MetricName: Errors
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Period: 300
        Statistic: Sum
        TreatMissingData: notBreaching
        Threshold: 1
        AlarmActions:
          - ${param:ECSFailureTopicArn}
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${sls:stage}-search
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: True
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: !Sub ${AWS::AccountId}-${sls:stage}-search
        UserPoolId: !Ref CognitoUserPool
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${sls:stage}-search
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false #pragma: allowlist secret
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:service}${sls:stage}search
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId: !Ref CognitoUserPoolClient
            ProviderName: !GetAtt CognitoUserPool.ProviderName
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: !Ref CognitoIdentityPool
        Roles:
          authenticated: !GetAtt CognitoAuthRole.Arn
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
            - Effect: "Allow"
              Principal:
                Service: "es.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonCognitoReadOnly
    OpenSearch:
      Type: AWS::OpenSearchService::Domain
      UpdatePolicy:
        EnableVersionUpgrade: true
      Properties:
        Tags:
          - Key: STAGE
            Value: ${sls:stage}
        EBSOptions:
          EBSEnabled: true
          VolumeType: gp3
          VolumeSize: 20
        ClusterConfig:
          InstanceType: ${param:osInstanceType}
          InstanceCount:
            Fn::If:
              - isDev
              - 1
              - 3
          DedicatedMasterEnabled: false
          ZoneAwarenessEnabled:
            Fn::If:
              - isDev
              - false
              - true
          ZoneAwarenessConfig:
            Fn::If:
              - isDev
              - !Ref AWS::NoValue
              - AvailabilityZoneCount: 3
        EncryptionAtRestOptions:
          Enabled: true
        NodeToNodeEncryptionOptions:
          Enabled: true
        EngineVersion: OpenSearch_2.11
        DomainEndpointOptions:
          EnforceHTTPS: true
          TLSSecurityPolicy: Policy-Min-TLS-1-2-2019-07
        CognitoOptions:
          Enabled: true
          IdentityPoolId: !Ref CognitoIdentityPool
          RoleArn: !GetAtt OpenSearchRole.Arn
          UserPoolId: !Ref CognitoUserPool
        AccessPolicies:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                AWS: !GetAtt CognitoAuthRole.Arn
              Action: "es:ESHttp*"
              Resource: "*"
        AdvancedOptions:
          rest.action.multi.allow_explicit_index: "true"
        AdvancedSecurityOptions:
          Enabled: true
          InternalUserDatabaseEnabled: false
          MasterUserOptions:
            MasterUserARN: !GetAtt OpenSearchMasterRole.Arn
        LogPublishingOptions:
          AUDIT_LOGS:
            CloudWatchLogsLogGroupArn: !GetAtt OpenSearchAuditLogGroup.Arn
            Enabled: true
          ES_APPLICATION_LOGS:
            CloudWatchLogsLogGroupArn: !GetAtt OpenSearchErrorLogGroup.Arn
            Enabled: true
        VPCOptions:
          SecurityGroupIds:
            - !Ref OpenSearchSecurityGroup
          SubnetIds:
            Fn::If:
              - isDev
              - - ${self:custom.vpc.privateSubnets.0}
              - >-
                ${self:custom.vpc.privateSubnets}
    OpenSearchRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "es.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonOpenSearchServiceCognitoAccess
    OpenSearchMasterRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                AWS: !Sub "${AWS::AccountId}"
              Action:
                - "sts:AssumeRole"
            - Effect: "Allow"
              Principal:
                Service: "es.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess
    OpenSearchSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      DeletionPolicy: Retain
      Properties:
        GroupDescription: Security group for Sink Lambda Function.
        VpcId: ${self:custom.vpc.id}
    OpenSearchSecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref OpenSearchSecurityGroup
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 10.0.0.0/8
    OpenSearchSecurityGroupEgress: # If we don't specify egress, all is allowed by default; this basically shuts off outbound
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        GroupId: !Ref OpenSearchSecurityGroup
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 127.0.0.1/32
    OpenSearchAuditLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/opensearch/${self:service}-${sls:stage}-audit
    OpenSearchErrorLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/opensearch/${self:service}-${sls:stage}-error
    CreateTopics:
      Type: AWS::CloudFormation::CustomResource
      Properties:
        ServiceToken: !GetAtt CreateTopicsLambdaFunction.Arn
        BrokerString: ${self:custom.brokerString}
        TopicsToCreate:
          - topic: ${param:topicNamespace}aws.onemac.migration.cdc
    CleanupTopics:
      Type: AWS::CloudFormation::CustomResource
      Condition: isDev # We only clean up topics in lower environments where isDev is true
      Properties:
        ServiceToken: !GetAtt CleanupKafkaLambdaFunction.Arn
        BrokerString: ${self:custom.brokerString}
        TopicPatternsToDelete:
          - ${param:topicNamespace}aws.onemac.migration.cdc
    CleanupTriggersOnDelete:
      Type: Custom::CleanupTriggersOnDelete
      Properties:
        ServiceToken: !GetAtt CleanupTriggersOnDeleteLambdaFunction.Arn
        Functions:
          - !Ref SinkMainLambdaFunction
          - !Ref SinkChangelogLambdaFunction
          - !Ref SinkTypesLambdaFunction
          - !Ref SinkSubtypesLambdaFunction
          - !Ref SinkCpocsLambdaFunction
          - !Ref SinkInsightsLambdaFunction
          - !Ref SinkLegacyInsightsLambdaFunction
    SinkBackupEventSourceMapping:
      Type: AWS::Lambda::EventSourceMapping
      Condition: Backup
      Properties:
        BatchSize: 1000
        Enabled: true
        FunctionName: !GetAtt SinkBackupLambdaFunction.Arn
        SelfManagedEventSource:
          Endpoints:
            KafkaBootstrapServers:
              Fn::Split:
                - ","
                - ${self:custom.brokerString}
        SourceAccessConfigurations:
          - Type: VPC_SUBNET
            URI: subnet:${self:custom.vpc.privateSubnets.0}
          - Type: VPC_SUBNET
            URI: subnet:${self:custom.vpc.privateSubnets.1}
          - Type: VPC_SUBNET
            URI: subnet:${self:custom.vpc.privateSubnets.2}
          - Type: VPC_SECURITY_GROUP
            URI: !Sub security_group:${param:LambdaSecurityGroupId}
        StartingPosition: TRIM_HORIZON
        Topics:
          - aws.onemac.migration.cdc
  Outputs:
    OpenSearchDomainArn:
      Value: !GetAtt OpenSearch.Arn
    OpenSearchDomainEndpoint:
      Value: !Sub https://${OpenSearch.DomainEndpoint}
    OpenSearchDashboardEndpoint:
      Value: !Sub https://${OpenSearch.DomainEndpoint}/_dashboards
    TopicName:
      Value: ${param:topicNamespace}aws.onemac.migration.cdc
