
(function () {
    //
    // `randomizeTest` accepts and returns a `Test` object. The questions in the returned object should
    // be in a random order. The order of the choices within each question should also be randomized.
    //

    // Explaination of process:
    // - Create a copy of the original Test object to avoid modifying the original data.
    // - Create an array to store the indices of questions in a random order.
    // - Shuffle the array of indices to randomize the order of questions.
    // - For each question in the shuffled order, shuffle the choices and answers associated with that question.
    // - Return the randomized Test object.
    // - Profit

    // custom code starts here //
    function randomizeTest(test) {
        // Create a copy of the original Test object
        const randomizedTest = new Test([], [], []);
    
        // Create an array of indices for questions
        const questionIndices = [...Array(test.questions.length).keys()];
    
        // Shuffle the array of indices to randomize question order
        shuffleArray(questionIndices);
    
        // Iterate through the shuffled question order
        for (const index of questionIndices) {
            const originalQuestionIndex = index;
    
            // Copy the question, choices, and answers for the randomized test
            randomizedTest.questions.push(test.questions[originalQuestionIndex]);
            randomizedTest.choices.push([...test.choices[originalQuestionIndex]]);
            randomizedTest.answers.push([...test.answers[originalQuestionIndex]]);
    
            // Shuffle the choices and answers for the current question
            shuffleArray(randomizedTest.choices[index]);
            shuffleArray(randomizedTest.answers[index]);
        }
    
        return randomizedTest;
    }
    
    // Function to shuffle an array in place
    function shuffleArray(arr) {
        for (let i = arr.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [arr[i], arr[j]] = [arr[j], arr[i]];
        }
    }

    // custom code ends here //

    function Test (questions, choices, answers) {
        this.questions = questions;
        this.choices = choices;
        this.answers = answers;
    }

    //
    // displays the sample test in the browser with the correct answer highlighted
    //
    function renderTest (test, parent) {
        const randomizedTest = randomizeTest(test);

        for (let i = 0; i < randomizedTest.questions.length; i += 1) {
            const qElement = document.createElement("li");
            let correctCount = 0;

            qElement.setAttribute("class", "question");
            qElement.appendChild(
                document.createTextNode(randomizedTest.questions[i])
            );

            for (let j = 0; j < randomizedTest.answers[i].length; j += 1) {
                if (randomizedTest.answers[i][j] === 1) {
                    correctCount += 1;
                }
            }

            for (let j = 0; j < randomizedTest.choices[i].length; j += 1) {
                const choiceLabelElement = document.createElement("label"),
                    choiceInputElement = document.createElement("input");

                choiceInputElement.setAttribute("name", (correctCount === 1 ? "radio" : "check") + i);
                choiceInputElement.setAttribute("type", correctCount === 1 ? "radio" : "checkbox");
                choiceInputElement.setAttribute("value", j);

                choiceLabelElement.classList.add("choice");
                if (randomizedTest.answers[i][j] === 1) {
                    choiceLabelElement.classList.add("correct");
                }

                choiceLabelElement.appendChild(choiceInputElement);
                choiceLabelElement.appendChild(
                    document.createTextNode(randomizedTest.choices[i][j])
                );

                qElement.appendChild(choiceLabelElement);
                parent.appendChild(qElement);
            }
        }
    }

    const questions = [
            "What can you find in Rustici Software's office?",
            "All of Rustici Software employees are expected to work no more than ____ hours per week.",
            "The end users of Rustici Software's products number in the _________",
            "Rustici Software is a (choose all that apply):",
            "Tim likes to wear:"
        ],
        choices = [
            [
                "Dart Board",
                "Ping Pong Table",
                "Cubicles",
                "Laptops with dual monitors",
                "TPS reports, ummm yeah"
            ],
            [
                "80",
                "40",
                "50",
                "60"
            ],
            [
                "Tens",
                "Hundreds",
                "Thousands",
                "Millions",
                "Billions"
            ],
            [
                "Great place to work",
                "Respected leader in its field",
                "Place where people don't matter, just results"
            ],
            [
                "Capri pants",
                "Goth attire",
                "Sport coat",
                "T-shirt and shorts"
            ]
        ],
        answers = [
            [1, 1, 0, 1, 0],
            [0, 1, 0, 0],
            [0, 0, 0, 1, 0],
            [1, 1, 0],
            [0, 0, 0, 1, 0]
        ],
        test = new Test(questions, choices, answers);

    renderTest(test, document.getElementById("questions"));
}());
