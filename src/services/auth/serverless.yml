service: ${self:custom.project}-auth
frameworkVersion: "3"
package:
  individually: true
plugins:
  - serverless-bundle
  - serverless-stack-termination-protection
  - serverless-plugin-scripts
  - "@stratiformdigital/serverless-iam-helper"
  - "@stratiformdigital/serverless-s3-security-helper"
provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:REGION_A}
  stackTags:
    PROJECT: ${self:custom.project}
    SERVICE: ${self:service}
  iam:
    role:
      path: /delegatedadmin/developer/
      permissionsBoundary: arn:aws:iam::${aws:accountId}:policy/cms-cloud-admin/developer-boundary-policy
      statements:
        - Effect: "Allow"
          Action:
            - "*"
          Resource: !GetAtt CognitoUserPool.Arn

custom:
  project: ${env:PROJECT} # This should always be set by direnv.
  accountId: !Sub "${AWS::AccountId}"
  serverlessTerminationProtection:
    stages:
      - master
      - val
      - production
  bundle:
    linting: false
  cognitoEmailAddress: ${ssm:/aws/reference/secretsmanager/${self:custom.project}/${sls:stage}/cognitoEmailAddress, ssm:/aws/reference/secretsmanager/${self:custom.project}/default/cognitoEmailAddress, ""}
  okta_metadata_url: ${ssm:/aws/reference/secretsmanager/${self:custom.project}/${sls:stage}/okta_metadata_url, ""}
  bootstrapUsers: ${ssm:/aws/reference/secretsmanager/${self:custom.project}/${sls:stage}/bootstrapUsers, param:bootstrapUsers}
  bootstrapUsersPassword: ${ssm:/aws/reference/secretsmanager/${self:custom.project}/${sls:stage}/bootstrapUsersPassword, "asdfASDF1234!@#$"}
  scripts:
    hooks:
      deploy:finalize: |
        if [ "${self:custom.bootstrapUsers}" = "true" ];
        then
          aws lambda invoke --region ${self:provider.region} --function-name ${self:service}-${sls:stage}-bootstrapUsers --invocation-type RequestResponse /dev/null
        fi

params:
  val:
    bootstrapUsers: "false"
  production:
    bootstrapUsers: "false"
  default:
    bootstrapUsers: "true"

functions:
  bootstrapUsers:
    handler: handlers/createUsers.handler
    environment:
      userPoolId: !Ref CognitoUserPool
      bootstrapUsersPassword: ${self:custom.bootstrapUsersPassword}
      region: ${self:provider.region}

resources:
  Conditions:
    CreateEmailConfiguration:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:custom.cognitoEmailAddress}
    BackWithOkta:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:custom.okta_metadata_url}
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${sls:stage}-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        EmailConfiguration:
          Fn::If:
            - CreateEmailConfiguration
            - EmailSendingAccount: DEVELOPER
              SourceArn: !Sub arn:aws:ses:${self:provider.region}:${AWS::AccountId}:identity/${self:custom.cognitoEmailAddress}
            - EmailSendingAccount: COGNITO_DEFAULT
        Schema:
          - Name: given_name
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: family_name
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: phone_number
            AttributeDataType: String
            Mutable: true
            Required: false
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${sls:stage}-user-pool-client
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false # pragma: allowlist secret
        AllowedOAuthFlows:
          - code
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - email
          - openid
          - aws.cognito.signin.user.admin # Needed to call Auth.currentUserInfo()
        CallbackURLs:
          - ${param:ApplicationEndpointUrl}
          - http://localhost:5000/
        DefaultRedirectURI: ${param:ApplicationEndpointUrl}
        LogoutURLs:
          - ${param:ApplicationEndpointUrl}
          - http://localhost:5000/
        SupportedIdentityProviders:
          - COGNITO
          - Fn::If:
              - BackWithOkta
              - !Ref OktaUserPoolIdentityProvider
              - !Ref AWS::NoValue
    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain:
          Fn::Join:
            - ""
            - - ${sls:stage}-login-
              - Ref: CognitoUserPoolClient
        UserPoolId:
          Ref: CognitoUserPool
    OktaUserPoolIdentityProvider:
      Condition: BackWithOkta
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        AttributeMapping:
          email: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
          given_name: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname
          family_name: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname
        IdpIdentifiers:
          - IdpIdentifier
        ProviderDetails:
          MetadataURL: ${self:custom.okta_metadata_url}
        ProviderName: Okta
        ProviderType: SAML
        UserPoolId:
          Ref: CognitoUserPool
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${sls:stage}IdentityPool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId: !Ref CognitoUserPoolClient
            ProviderName: !GetAtt CognitoUserPool.ProviderName
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: !Ref CognitoIdentityPool
        Roles:
          authenticated: !GetAtt CognitoAuthRole.Arn
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: !Sub arn:aws:execute-api:${self:provider.region}:${AWS::AccountId}:${param:ApiName}/*
  Outputs:
    UserPoolId:
      Value: !Ref CognitoUserPool
    UserPoolClientId:
      Value: !Ref CognitoUserPoolClient
    UserPoolClientDomain:
      Value: !Sub ${UserPoolDomain}.auth.${self:provider.region}.amazoncognito.com
    IdentityPoolId:
      Value: !Ref CognitoIdentityPool
    Region:
      Value: !Sub ${AWS::Region}
