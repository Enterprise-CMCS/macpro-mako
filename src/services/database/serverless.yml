service: ${self:custom.project}-database

frameworkVersion: "3"

package:
  individually: true

plugins:
  - serverless-stack-termination-protection
  - "@stratiformdigital/serverless-s3-security-helper"
  - "@stratiformdigital/serverless-iam-helper"
  - serverless-bundle
  - serverless-plugin-scripts

provider:
  name: aws
  region: us-east-1
  iam:
    role:
      path: /delegatedadmin/developer/
      permissionsBoundary: arn:aws:iam::${aws:accountId}:policy/cms-cloud-admin/developer-boundary-policy
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Get*
            - dynamodb:BatchWrite*
            - dynamodb:BatchGet*
          Resource: "arn:aws:dynamodb:*:*:table/${self:custom.issuesTableName}"

  stackTags:
    PROJECT: ${self:custom.project}
    SERVICE: ${self:service}

custom:
  project: ${env:PROJECT}
  referenceDataHash: ${file(./src/reference/items.json)}
  serverlessTerminationProtection:
    stages: # Apply CloudFormation termination protection for these stages
      - master
      - val
      - production
  bundle:
    linting: false
  issuesTableName: ${self:service}-${sls:stage}-issues
  scripts:
    commands:
      seed: |
        set -e
        echo 'Loading test data...'
        call=`aws lambda invoke --region ${self:provider.region} --function-name ${self:service}-${sls:stage}-testDataLoader --invocation-type RequestResponse --log Tail /dev/null`
        error=`echo $call | jq 'select(.FunctionError != null)'`
        if [ "$error" != "null" -a -n "$error" ]; then
          echo "An error occured while loading test data.  Error below"
          echo `echo $call | jq -r '.LogResult'` | base64 --decode
          exit 1
        fi

functions:
  seeddatabase:
    handler: handlers/seeddatabase.handler
    environment:
      region: ${self:provider.region}
  testDataLoader:
    handler: handlers/testDataLoader.handler
    environment:
      region: ${self:provider.region}
      tableName: !Ref IssuesTable

resources:
  Resources:
    IssuesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.issuesTableName}
    InitializeDynamoDB:
      Type: Custom::InitFunction
      DependsOn: IssuesTable
      Properties:
        ServiceToken:
          Fn::GetAtt: [SeeddatabaseLambdaFunction, "Arn"]
        DynamoTableName:
          Ref: IssuesTable
        Trigger: ${self:custom.referenceDataHash}
  Outputs:
    IssuesTableName:
      Description: database table name for issues
      Value: ${self:custom.issuesTableName}
