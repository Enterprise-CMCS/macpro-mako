{
  "config": {
    "configFile": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/playwright.config.ts",
    "rootDir": "/home/runner/work/macpro-mako/macpro-mako/test",
    "forbidOnly": true,
    "fullyParallel": true,
    "globalSetup": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/utils/auth.setup.ts",
    "globalTeardown": null,
    "globalTimeout": 0,
    "grep": {},
    "grepInvert": null,
    "maxFailures": 0,
    "metadata": {
      "actualWorkers": 1
    },
    "preserveOutput": "always",
    "reporter": [
      [
        "github",
        null
      ],
      [
        "html",
        {
          "outputFolder": "playwright-reports/html-report",
          "open": "never"
        }
      ],
      [
        "json",
        {
          "outputFile": "playwright-reports/playwright-summary.json"
        }
      ]
    ],
    "reportSlowTests": {
      "max": 5,
      "threshold": 300000
    },
    "quiet": false,
    "projects": [
      {
        "outputDir": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results",
        "repeatEach": 1,
        "retries": 2,
        "metadata": {
          "actualWorkers": 1
        },
        "id": "state-user-chrome",
        "name": "state-user-chrome",
        "testDir": "/home/runner/work/macpro-mako/macpro-mako/test",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 30000
      }
    ],
    "shard": null,
    "updateSnapshots": "missing",
    "updateSourceMethod": "patch",
    "version": "1.51.0",
    "workers": 1,
    "webServer": null
  },
  "suites": [
    {
      "title": "e2e/faq/faq.spec.ts",
      "file": "e2e/faq/faq.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "FAQ page",
          "file": "e2e/faq/faq.spec.ts",
          "line": 7,
          "column": 6,
          "specs": [],
          "suites": [
            {
              "title": "UI validation",
              "file": "e2e/faq/faq.spec.ts",
              "line": 13,
              "column": 8,
              "specs": [],
              "suites": [
                {
                  "title": "header",
                  "file": "e2e/faq/faq.spec.ts",
                  "line": 14,
                  "column": 10,
                  "specs": [
                    {
                      "title": "displays header",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 0,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5493,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByTestId('sub-nav-header')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for getByTestId('sub-nav-header')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByTestId('sub-nav-header')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for getByTestId('sub-nav-header')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:16:38",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByTestId('sub-nav-header')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for getByTestId('sub-nav-header')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for getByTestId('sub-nav-header')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 38,
                                  "line": 16
                                },
                                "snippet": "\u001b[0m \u001b[90m 14 |\u001b[39m     test\u001b[33m.\u001b[39mdescribe(\u001b[32m\"header\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 15 |\u001b[39m       test(\u001b[32m\"displays header\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 16 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mheader)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 17 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mheader)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"Frequently Asked Questions\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 18 |\u001b[39m       })\u001b[33m;\u001b[39m\n \u001b[90m 19 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 38,
                                    "line": 16
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByTestId('sub-nav-header')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for getByTestId('sub-nav-header')\u001b[22m\n\n\n  14 |     test.describe(\"header\", () => {\n  15 |       test(\"displays header\", async () => {\n> 16 |         await expect(faqPage.header).toBeVisible();\n     |                                      ^\n  17 |         await expect(faqPage.header).toHaveText(\"Frequently Asked Questions\");\n  18 |       });\n  19 |     });\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:16:38"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:26:45.075Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 38,
                                "line": 16
                              }
                            },
                            {
                              "workerIndex": 1,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5644,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByTestId('sub-nav-header')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for getByTestId('sub-nav-header')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByTestId('sub-nav-header')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for getByTestId('sub-nav-header')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:16:38",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByTestId('sub-nav-header')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for getByTestId('sub-nav-header')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for getByTestId('sub-nav-header')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 38,
                                  "line": 16
                                },
                                "snippet": "\u001b[0m \u001b[90m 14 |\u001b[39m     test\u001b[33m.\u001b[39mdescribe(\u001b[32m\"header\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 15 |\u001b[39m       test(\u001b[32m\"displays header\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 16 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mheader)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 17 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mheader)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"Frequently Asked Questions\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 18 |\u001b[39m       })\u001b[33m;\u001b[39m\n \u001b[90m 19 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 38,
                                    "line": 16
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByTestId('sub-nav-header')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for getByTestId('sub-nav-header')\u001b[22m\n\n\n  14 |     test.describe(\"header\", () => {\n  15 |       test(\"displays header\", async () => {\n> 16 |         await expect(faqPage.header).toBeVisible();\n     |                                      ^\n  17 |         await expect(faqPage.header).toHaveText(\"Frequently Asked Questions\");\n  18 |       });\n  19 |     });\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:16:38"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:26:51.489Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-validation-header-displays-header-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 38,
                                "line": 16
                              }
                            },
                            {
                              "workerIndex": 2,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5487,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByTestId('sub-nav-header')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for getByTestId('sub-nav-header')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByTestId('sub-nav-header')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for getByTestId('sub-nav-header')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:16:38",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByTestId('sub-nav-header')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for getByTestId('sub-nav-header')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for getByTestId('sub-nav-header')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 38,
                                  "line": 16
                                },
                                "snippet": "\u001b[0m \u001b[90m 14 |\u001b[39m     test\u001b[33m.\u001b[39mdescribe(\u001b[32m\"header\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 15 |\u001b[39m       test(\u001b[32m\"displays header\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 16 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mheader)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 17 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mheader)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"Frequently Asked Questions\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 18 |\u001b[39m       })\u001b[33m;\u001b[39m\n \u001b[90m 19 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 38,
                                    "line": 16
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByTestId('sub-nav-header')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for getByTestId('sub-nav-header')\u001b[22m\n\n\n  14 |     test.describe(\"header\", () => {\n  15 |       test(\"displays header\", async () => {\n> 16 |         await expect(faqPage.header).toBeVisible();\n     |                                      ^\n  17 |         await expect(faqPage.header).toHaveText(\"Frequently Asked Questions\");\n  18 |       });\n  19 |     });\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:16:38"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:26:58.100Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 38,
                                "line": 16
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-4e622ef0edec4f961300",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 15,
                      "column": 7
                    }
                  ]
                },
                {
                  "title": "General section",
                  "file": "e2e/faq/faq.spec.ts",
                  "line": 21,
                  "column": 10,
                  "specs": [
                    {
                      "title": "displays system for state submission FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 3,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5500,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#crosswalk-system')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#crosswalk-system')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#crosswalk-system')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#crosswalk-system')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:23:41",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#crosswalk-system')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#crosswalk-system')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#crosswalk-system')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 41,
                                  "line": 23
                                },
                                "snippet": "\u001b[0m \u001b[90m 21 |\u001b[39m     test\u001b[33m.\u001b[39mdescribe(\u001b[32m\"General section\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 22 |\u001b[39m       test(\u001b[32m\"displays system for state submission FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 23 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mcrossWalk)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 24 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mcrossWalk)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 25 |\u001b[39m           \u001b[32m\"Which system should I use for my state’s submission?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 26 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 41,
                                    "line": 23
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#crosswalk-system')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#crosswalk-system')\u001b[22m\n\n\n  21 |     test.describe(\"General section\", () => {\n  22 |       test(\"displays system for state submission FAQ\", async () => {\n> 23 |         await expect(faqPage.crossWalk).toBeVisible();\n     |                                         ^\n  24 |         await expect(faqPage.crossWalk).toHaveText(\n  25 |           \"Which system should I use for my state’s submission?\",\n  26 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:23:41"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:27:04.500Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 41,
                                "line": 23
                              }
                            },
                            {
                              "workerIndex": 4,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5641,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#crosswalk-system')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#crosswalk-system')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#crosswalk-system')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#crosswalk-system')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:23:41",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#crosswalk-system')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#crosswalk-system')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#crosswalk-system')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 41,
                                  "line": 23
                                },
                                "snippet": "\u001b[0m \u001b[90m 21 |\u001b[39m     test\u001b[33m.\u001b[39mdescribe(\u001b[32m\"General section\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 22 |\u001b[39m       test(\u001b[32m\"displays system for state submission FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 23 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mcrossWalk)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 24 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mcrossWalk)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 25 |\u001b[39m           \u001b[32m\"Which system should I use for my state’s submission?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 26 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 41,
                                    "line": 23
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#crosswalk-system')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#crosswalk-system')\u001b[22m\n\n\n  21 |     test.describe(\"General section\", () => {\n  22 |       test(\"displays system for state submission FAQ\", async () => {\n> 23 |         await expect(faqPage.crossWalk).toBeVisible();\n     |                                         ^\n  24 |         await expect(faqPage.crossWalk).toHaveText(\n  25 |           \"Which system should I use for my state’s submission?\",\n  26 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:23:41"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:27:10.923Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-2a37f-em-for-state-submission-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 41,
                                "line": 23
                              }
                            },
                            {
                              "workerIndex": 5,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5517,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#crosswalk-system')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#crosswalk-system')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#crosswalk-system')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#crosswalk-system')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:23:41",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#crosswalk-system')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#crosswalk-system')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#crosswalk-system')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 41,
                                  "line": 23
                                },
                                "snippet": "\u001b[0m \u001b[90m 21 |\u001b[39m     test\u001b[33m.\u001b[39mdescribe(\u001b[32m\"General section\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 22 |\u001b[39m       test(\u001b[32m\"displays system for state submission FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 23 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mcrossWalk)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 24 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mcrossWalk)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 25 |\u001b[39m           \u001b[32m\"Which system should I use for my state’s submission?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 26 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 41,
                                    "line": 23
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#crosswalk-system')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#crosswalk-system')\u001b[22m\n\n\n  21 |     test.describe(\"General section\", () => {\n  22 |       test(\"displays system for state submission FAQ\", async () => {\n> 23 |         await expect(faqPage.crossWalk).toBeVisible();\n     |                                         ^\n  24 |         await expect(faqPage.crossWalk).toHaveText(\n  25 |           \"Which system should I use for my state’s submission?\",\n  26 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:23:41"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:27:17.521Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 41,
                                "line": 23
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-939d93089e0af2b4a675",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 22,
                      "column": 7
                    },
                    {
                      "title": "displays browser type FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 6,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5483,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#browsers')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#browsers')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#browsers')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#browsers')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:32:40",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#browsers')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#browsers')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#browsers')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 40,
                                  "line": 32
                                },
                                "snippet": "\u001b[0m \u001b[90m 30 |\u001b[39m\n \u001b[90m 31 |\u001b[39m       test(\u001b[32m\"displays browser type FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 32 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mbrowsers)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 33 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mbrowsers)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"What browsers can I use to access the system?\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 34 |\u001b[39m\n \u001b[90m 35 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mbrowsers\u001b[33m.\u001b[39mlocator(\u001b[32m\"div:nth-child(1)\"\u001b[39m))\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 40,
                                    "line": 32
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#browsers')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#browsers')\u001b[22m\n\n\n  30 |\n  31 |       test(\"displays browser type FAQ\", async () => {\n> 32 |         await expect(faqPage.browsers).toBeVisible();\n     |                                        ^\n  33 |         await expect(faqPage.browsers).toHaveText(\"What browsers can I use to access the system?\");\n  34 |\n  35 |         await expect(faqPage.browsers.locator(\"div:nth-child(1)\")).not.toBeVisible();\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:32:40"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:27:23.940Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 40,
                                "line": 32
                              }
                            },
                            {
                              "workerIndex": 7,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5647,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#browsers')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#browsers')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#browsers')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#browsers')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:32:40",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#browsers')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#browsers')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#browsers')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 40,
                                  "line": 32
                                },
                                "snippet": "\u001b[0m \u001b[90m 30 |\u001b[39m\n \u001b[90m 31 |\u001b[39m       test(\u001b[32m\"displays browser type FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 32 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mbrowsers)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 33 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mbrowsers)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"What browsers can I use to access the system?\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 34 |\u001b[39m\n \u001b[90m 35 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mbrowsers\u001b[33m.\u001b[39mlocator(\u001b[32m\"div:nth-child(1)\"\u001b[39m))\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 40,
                                    "line": 32
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#browsers')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#browsers')\u001b[22m\n\n\n  30 |\n  31 |       test(\"displays browser type FAQ\", async () => {\n> 32 |         await expect(faqPage.browsers).toBeVisible();\n     |                                        ^\n  33 |         await expect(faqPage.browsers).toHaveText(\"What browsers can I use to access the system?\");\n  34 |\n  35 |         await expect(faqPage.browsers.locator(\"div:nth-child(1)\")).not.toBeVisible();\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:32:40"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:27:30.333Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-c26c5-n-displays-browser-type-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 40,
                                "line": 32
                              }
                            },
                            {
                              "workerIndex": 8,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5513,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#browsers')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#browsers')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#browsers')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#browsers')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:32:40",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#browsers')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#browsers')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#browsers')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 40,
                                  "line": 32
                                },
                                "snippet": "\u001b[0m \u001b[90m 30 |\u001b[39m\n \u001b[90m 31 |\u001b[39m       test(\u001b[32m\"displays browser type FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 32 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mbrowsers)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 33 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mbrowsers)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"What browsers can I use to access the system?\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 34 |\u001b[39m\n \u001b[90m 35 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mbrowsers\u001b[33m.\u001b[39mlocator(\u001b[32m\"div:nth-child(1)\"\u001b[39m))\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 40,
                                    "line": 32
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#browsers')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#browsers')\u001b[22m\n\n\n  30 |\n  31 |       test(\"displays browser type FAQ\", async () => {\n> 32 |         await expect(faqPage.browsers).toBeVisible();\n     |                                        ^\n  33 |         await expect(faqPage.browsers).toHaveText(\"What browsers can I use to access the system?\");\n  34 |\n  35 |         await expect(faqPage.browsers.locator(\"div:nth-child(1)\")).not.toBeVisible();\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:32:40"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:27:36.954Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 40,
                                "line": 32
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-1b3eee382ad552f8014d",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 31,
                      "column": 7
                    },
                    {
                      "title": "displays confirmation email FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 9,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5518,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#confirm-email')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#confirm-email')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#confirm-email')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#confirm-email')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:39:44",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#confirm-email')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#confirm-email')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#confirm-email')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 44,
                                  "line": 39
                                },
                                "snippet": "\u001b[0m \u001b[90m 37 |\u001b[39m\n \u001b[90m 38 |\u001b[39m       test(\u001b[32m\"displays confirmation email FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mconfirmEmail)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 40 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mconfirmEmail)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 41 |\u001b[39m           \u001b[32m\"What should we do if we don’t receive a confirmation email?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 42 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 44,
                                    "line": 39
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#confirm-email')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#confirm-email')\u001b[22m\n\n\n  37 |\n  38 |       test(\"displays confirmation email FAQ\", async () => {\n> 39 |         await expect(faqPage.confirmEmail).toBeVisible();\n     |                                            ^\n  40 |         await expect(faqPage.confirmEmail).toHaveText(\n  41 |           \"What should we do if we don’t receive a confirmation email?\",\n  42 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:39:44"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:27:43.378Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 44,
                                "line": 39
                              }
                            },
                            {
                              "workerIndex": 10,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5891,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#confirm-email')\nExpected string: \u001b[32m\"What should we do if we don’t receive a confirmation email?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#confirm-email')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#confirm-email')\nExpected string: \u001b[32m\"What should we do if we don’t receive a confirmation email?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#confirm-email')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:40:44",
                                "matcherResult": {
                                  "name": "toHaveText",
                                  "expected": "What should we do if we don’t receive a confirmation email?",
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#confirm-email')\nExpected string: \u001b[32m\"What should we do if we don’t receive a confirmation email?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#confirm-email')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "log": [
                                    "  - expect.toHaveText with timeout 5000ms",
                                    "  - waiting for locator('#confirm-email')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 44,
                                  "line": 40
                                },
                                "snippet": "\u001b[0m \u001b[90m 38 |\u001b[39m       test(\u001b[32m\"displays confirmation email FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 39 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mconfirmEmail)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 40 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mconfirmEmail)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m    |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 41 |\u001b[39m           \u001b[32m\"What should we do if we don’t receive a confirmation email?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 42 |\u001b[39m         )\u001b[33m;\u001b[39m\n \u001b[90m 43 |\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 44,
                                    "line": 40
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#confirm-email')\nExpected string: \u001b[32m\"What should we do if we don’t receive a confirmation email?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#confirm-email')\u001b[22m\n\n\n  38 |       test(\"displays confirmation email FAQ\", async () => {\n  39 |         await expect(faqPage.confirmEmail).toBeVisible();\n> 40 |         await expect(faqPage.confirmEmail).toHaveText(\n     |                                            ^\n  41 |           \"What should we do if we don’t receive a confirmation email?\",\n  42 |         );\n  43 |\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:40:44"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:27:49.810Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-dfa5d-lays-confirmation-email-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 44,
                                "line": 40
                              }
                            },
                            {
                              "workerIndex": 11,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5500,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#confirm-email')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#confirm-email')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#confirm-email')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#confirm-email')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:39:44",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#confirm-email')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#confirm-email')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#confirm-email')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 44,
                                  "line": 39
                                },
                                "snippet": "\u001b[0m \u001b[90m 37 |\u001b[39m\n \u001b[90m 38 |\u001b[39m       test(\u001b[32m\"displays confirmation email FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 39 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mconfirmEmail)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 40 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mconfirmEmail)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 41 |\u001b[39m           \u001b[32m\"What should we do if we don’t receive a confirmation email?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 42 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 44,
                                    "line": 39
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#confirm-email')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#confirm-email')\u001b[22m\n\n\n  37 |\n  38 |       test(\"displays confirmation email FAQ\", async () => {\n> 39 |         await expect(faqPage.confirmEmail).toBeVisible();\n     |                                            ^\n  40 |         await expect(faqPage.confirmEmail).toHaveText(\n  41 |           \"What should we do if we don’t receive a confirmation email?\",\n  42 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:39:44"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:27:56.685Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 44,
                                "line": 39
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-86458dc55ce4d083c823",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 38,
                      "column": 7
                    },
                    {
                      "title": "displays official submission FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 12,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5477,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#is-official')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#is-official')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#is-official')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#is-official')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:48:40",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#is-official')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#is-official')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#is-official')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 40,
                                  "line": 48
                                },
                                "snippet": "\u001b[0m \u001b[90m 46 |\u001b[39m\n \u001b[90m 47 |\u001b[39m       test(\u001b[32m\"displays official submission FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 48 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mofficial)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 49 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mofficial)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 50 |\u001b[39m           \u001b[32m\"Is this considered the official state submission?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 51 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 40,
                                    "line": 48
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#is-official')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#is-official')\u001b[22m\n\n\n  46 |\n  47 |       test(\"displays official submission FAQ\", async () => {\n> 48 |         await expect(faqPage.official).toBeVisible();\n     |                                        ^\n  49 |         await expect(faqPage.official).toHaveText(\n  50 |           \"Is this considered the official state submission?\",\n  51 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:48:40"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:28:03.115Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 40,
                                "line": 48
                              }
                            },
                            {
                              "workerIndex": 13,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5641,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#is-official')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#is-official')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#is-official')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#is-official')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:48:40",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#is-official')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#is-official')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#is-official')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 40,
                                  "line": 48
                                },
                                "snippet": "\u001b[0m \u001b[90m 46 |\u001b[39m\n \u001b[90m 47 |\u001b[39m       test(\u001b[32m\"displays official submission FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 48 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mofficial)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 49 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mofficial)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 50 |\u001b[39m           \u001b[32m\"Is this considered the official state submission?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 51 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 40,
                                    "line": 48
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#is-official')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#is-official')\u001b[22m\n\n\n  46 |\n  47 |       test(\"displays official submission FAQ\", async () => {\n> 48 |         await expect(faqPage.official).toBeVisible();\n     |                                        ^\n  49 |         await expect(faqPage.official).toHaveText(\n  50 |           \"Is this considered the official state submission?\",\n  51 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:48:40"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:28:09.528Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-ebf2f-ays-official-submission-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 40,
                                "line": 48
                              }
                            },
                            {
                              "workerIndex": 14,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5470,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#is-official')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#is-official')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#is-official')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#is-official')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:48:40",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#is-official')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#is-official')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#is-official')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 40,
                                  "line": 48
                                },
                                "snippet": "\u001b[0m \u001b[90m 46 |\u001b[39m\n \u001b[90m 47 |\u001b[39m       test(\u001b[32m\"displays official submission FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 48 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mofficial)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 49 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mofficial)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 50 |\u001b[39m           \u001b[32m\"Is this considered the official state submission?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 51 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 40,
                                    "line": 48
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#is-official')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#is-official')\u001b[22m\n\n\n  46 |\n  47 |       test(\"displays official submission FAQ\", async () => {\n> 48 |         await expect(faqPage.official).toBeVisible();\n     |                                        ^\n  49 |         await expect(faqPage.official).toHaveText(\n  50 |           \"Is this considered the official state submission?\",\n  51 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:48:40"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:28:16.115Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 40,
                                "line": 48
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-37ffcfb73c675e1bb134",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 47,
                      "column": 7
                    },
                    {
                      "title": "displays OneMac user roles FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 15,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5485,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onemac-roles')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onemac-roles')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onemac-roles')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onemac-roles')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:57:43",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onemac-roles')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onemac-roles')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#onemac-roles')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 43,
                                  "line": 57
                                },
                                "snippet": "\u001b[0m \u001b[90m 55 |\u001b[39m\n \u001b[90m 56 |\u001b[39m       test(\u001b[32m\"displays OneMac user roles FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 57 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monemacRoles)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 58 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monemacRoles)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"What are the OneMAC user roles?\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 59 |\u001b[39m\n \u001b[90m 60 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monemacRoles\u001b[33m.\u001b[39mlocator(\u001b[32m\"div:nth-child(1)\"\u001b[39m))\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 43,
                                    "line": 57
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onemac-roles')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onemac-roles')\u001b[22m\n\n\n  55 |\n  56 |       test(\"displays OneMac user roles FAQ\", async () => {\n> 57 |         await expect(faqPage.onemacRoles).toBeVisible();\n     |                                           ^\n  58 |         await expect(faqPage.onemacRoles).toHaveText(\"What are the OneMAC user roles?\");\n  59 |\n  60 |         await expect(faqPage.onemacRoles.locator(\"div:nth-child(1)\")).not.toBeVisible();\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:57:43"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:28:22.520Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 43,
                                "line": 57
                              }
                            },
                            {
                              "workerIndex": 16,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5849,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#onemac-roles')\nExpected string: \u001b[32m\"What are the OneMAC user roles?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onemac-roles')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#onemac-roles')\nExpected string: \u001b[32m\"What are the OneMAC user roles?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onemac-roles')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:58:43",
                                "matcherResult": {
                                  "name": "toHaveText",
                                  "expected": "What are the OneMAC user roles?",
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#onemac-roles')\nExpected string: \u001b[32m\"What are the OneMAC user roles?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onemac-roles')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "log": [
                                    "  - expect.toHaveText with timeout 5000ms",
                                    "  - waiting for locator('#onemac-roles')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 43,
                                  "line": 58
                                },
                                "snippet": "\u001b[0m \u001b[90m 56 |\u001b[39m       test(\u001b[32m\"displays OneMac user roles FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 57 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monemacRoles)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 58 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monemacRoles)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"What are the OneMAC user roles?\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 59 |\u001b[39m\n \u001b[90m 60 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monemacRoles\u001b[33m.\u001b[39mlocator(\u001b[32m\"div:nth-child(1)\"\u001b[39m))\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m 61 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 43,
                                    "line": 58
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#onemac-roles')\nExpected string: \u001b[32m\"What are the OneMAC user roles?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onemac-roles')\u001b[22m\n\n\n  56 |       test(\"displays OneMac user roles FAQ\", async () => {\n  57 |         await expect(faqPage.onemacRoles).toBeVisible();\n> 58 |         await expect(faqPage.onemacRoles).toHaveText(\"What are the OneMAC user roles?\");\n     |                                           ^\n  59 |\n  60 |         await expect(faqPage.onemacRoles.locator(\"div:nth-child(1)\")).not.toBeVisible();\n  61 |       });\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:58:43"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:28:28.917Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-fe312-plays-OneMac-user-roles-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 43,
                                "line": 58
                              }
                            },
                            {
                              "workerIndex": 17,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5492,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onemac-roles')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onemac-roles')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onemac-roles')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onemac-roles')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:57:43",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onemac-roles')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onemac-roles')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#onemac-roles')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 43,
                                  "line": 57
                                },
                                "snippet": "\u001b[0m \u001b[90m 55 |\u001b[39m\n \u001b[90m 56 |\u001b[39m       test(\u001b[32m\"displays OneMac user roles FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 57 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monemacRoles)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 58 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monemacRoles)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"What are the OneMAC user roles?\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 59 |\u001b[39m\n \u001b[90m 60 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monemacRoles\u001b[33m.\u001b[39mlocator(\u001b[32m\"div:nth-child(1)\"\u001b[39m))\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 43,
                                    "line": 57
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onemac-roles')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onemac-roles')\u001b[22m\n\n\n  55 |\n  56 |       test(\"displays OneMac user roles FAQ\", async () => {\n> 57 |         await expect(faqPage.onemacRoles).toBeVisible();\n     |                                           ^\n  58 |         await expect(faqPage.onemacRoles).toHaveText(\"What are the OneMAC user roles?\");\n  59 |\n  60 |         await expect(faqPage.onemacRoles.locator(\"div:nth-child(1)\")).not.toBeVisible();\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:57:43"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:28:35.743Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 43,
                                "line": 57
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-7821de7ea6508168c162",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 56,
                      "column": 7
                    },
                    {
                      "title": "displays file format FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 18,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5502,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#acceptable-file-formats')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#acceptable-file-formats')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#acceptable-file-formats')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#acceptable-file-formats')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:64:43",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#acceptable-file-formats')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#acceptable-file-formats')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#acceptable-file-formats')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 43,
                                  "line": 64
                                },
                                "snippet": "\u001b[0m \u001b[90m 62 |\u001b[39m\n \u001b[90m 63 |\u001b[39m       test(\u001b[32m\"displays file format FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 64 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mfileFormats)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 65 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mfileFormats)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 66 |\u001b[39m           \u001b[32m\"What are the kinds of file formats I can upload into OneMAC\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 67 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 43,
                                    "line": 64
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#acceptable-file-formats')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#acceptable-file-formats')\u001b[22m\n\n\n  62 |\n  63 |       test(\"displays file format FAQ\", async () => {\n> 64 |         await expect(faqPage.fileFormats).toBeVisible();\n     |                                           ^\n  65 |         await expect(faqPage.fileFormats).toHaveText(\n  66 |           \"What are the kinds of file formats I can upload into OneMAC\",\n  67 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:64:43"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:28:42.170Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 43,
                                "line": 64
                              }
                            },
                            {
                              "workerIndex": 19,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5682,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#acceptable-file-formats')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#acceptable-file-formats')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#acceptable-file-formats')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#acceptable-file-formats')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:64:43",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#acceptable-file-formats')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#acceptable-file-formats')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#acceptable-file-formats')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 43,
                                  "line": 64
                                },
                                "snippet": "\u001b[0m \u001b[90m 62 |\u001b[39m\n \u001b[90m 63 |\u001b[39m       test(\u001b[32m\"displays file format FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 64 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mfileFormats)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 65 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mfileFormats)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 66 |\u001b[39m           \u001b[32m\"What are the kinds of file formats I can upload into OneMAC\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 67 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 43,
                                    "line": 64
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#acceptable-file-formats')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#acceptable-file-formats')\u001b[22m\n\n\n  62 |\n  63 |       test(\"displays file format FAQ\", async () => {\n> 64 |         await expect(faqPage.fileFormats).toBeVisible();\n     |                                           ^\n  65 |         await expect(faqPage.fileFormats).toHaveText(\n  66 |           \"What are the kinds of file formats I can upload into OneMAC\",\n  67 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:64:43"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:28:48.597Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-52bd0-on-displays-file-format-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 43,
                                "line": 64
                              }
                            },
                            {
                              "workerIndex": 20,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5505,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#acceptable-file-formats')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#acceptable-file-formats')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#acceptable-file-formats')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#acceptable-file-formats')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:64:43",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#acceptable-file-formats')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#acceptable-file-formats')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#acceptable-file-formats')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 43,
                                  "line": 64
                                },
                                "snippet": "\u001b[0m \u001b[90m 62 |\u001b[39m\n \u001b[90m 63 |\u001b[39m       test(\u001b[32m\"displays file format FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 64 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mfileFormats)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 65 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mfileFormats)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 66 |\u001b[39m           \u001b[32m\"What are the kinds of file formats I can upload into OneMAC\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 67 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 43,
                                    "line": 64
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#acceptable-file-formats')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#acceptable-file-formats')\u001b[22m\n\n\n  62 |\n  63 |       test(\"displays file format FAQ\", async () => {\n> 64 |         await expect(faqPage.fileFormats).toBeVisible();\n     |                                           ^\n  65 |         await expect(faqPage.fileFormats).toHaveText(\n  66 |           \"What are the kinds of file formats I can upload into OneMAC\",\n  67 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:64:43"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:28:55.226Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 43,
                                "line": 64
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-15b57e29b71783880603",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 63,
                      "column": 7
                    },
                    {
                      "title": "displays onboarding materials FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 21,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5490,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onboarding-materials')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onboarding-materials')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onboarding-materials')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onboarding-materials')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:73:51",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onboarding-materials')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onboarding-materials')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#onboarding-materials')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 51,
                                  "line": 73
                                },
                                "snippet": "\u001b[0m \u001b[90m 71 |\u001b[39m\n \u001b[90m 72 |\u001b[39m       test(\u001b[32m\"displays onboarding materials FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 73 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monboardingMaterials)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 74 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monboardingMaterials)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"Onboarding Materials\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 75 |\u001b[39m\n \u001b[90m 76 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monboardingMaterials\u001b[33m.\u001b[39mlocator(\u001b[32m\"div:nth-child(1)\"\u001b[39m))\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 51,
                                    "line": 73
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onboarding-materials')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onboarding-materials')\u001b[22m\n\n\n  71 |\n  72 |       test(\"displays onboarding materials FAQ\", async () => {\n> 73 |         await expect(faqPage.onboardingMaterials).toBeVisible();\n     |                                                   ^\n  74 |         await expect(faqPage.onboardingMaterials).toHaveText(\"Onboarding Materials\");\n  75 |\n  76 |         await expect(faqPage.onboardingMaterials.locator(\"div:nth-child(1)\")).not.toBeVisible();\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:73:51"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:29:01.649Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 51,
                                "line": 73
                              }
                            },
                            {
                              "workerIndex": 22,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5641,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onboarding-materials')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onboarding-materials')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onboarding-materials')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onboarding-materials')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:73:51",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onboarding-materials')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onboarding-materials')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#onboarding-materials')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 51,
                                  "line": 73
                                },
                                "snippet": "\u001b[0m \u001b[90m 71 |\u001b[39m\n \u001b[90m 72 |\u001b[39m       test(\u001b[32m\"displays onboarding materials FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 73 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monboardingMaterials)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 74 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monboardingMaterials)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"Onboarding Materials\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 75 |\u001b[39m\n \u001b[90m 76 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monboardingMaterials\u001b[33m.\u001b[39mlocator(\u001b[32m\"div:nth-child(1)\"\u001b[39m))\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 51,
                                    "line": 73
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onboarding-materials')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onboarding-materials')\u001b[22m\n\n\n  71 |\n  72 |       test(\"displays onboarding materials FAQ\", async () => {\n> 73 |         await expect(faqPage.onboardingMaterials).toBeVisible();\n     |                                                   ^\n  74 |         await expect(faqPage.onboardingMaterials).toHaveText(\"Onboarding Materials\");\n  75 |\n  76 |         await expect(faqPage.onboardingMaterials.locator(\"div:nth-child(1)\")).not.toBeVisible();\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:73:51"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:29:08.051Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-db055-ys-onboarding-materials-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 51,
                                "line": 73
                              }
                            },
                            {
                              "workerIndex": 23,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5493,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onboarding-materials')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onboarding-materials')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onboarding-materials')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onboarding-materials')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:73:51",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onboarding-materials')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onboarding-materials')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#onboarding-materials')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 51,
                                  "line": 73
                                },
                                "snippet": "\u001b[0m \u001b[90m 71 |\u001b[39m\n \u001b[90m 72 |\u001b[39m       test(\u001b[32m\"displays onboarding materials FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 73 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monboardingMaterials)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 74 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monboardingMaterials)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"Onboarding Materials\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 75 |\u001b[39m\n \u001b[90m 76 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39monboardingMaterials\u001b[33m.\u001b[39mlocator(\u001b[32m\"div:nth-child(1)\"\u001b[39m))\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 51,
                                    "line": 73
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#onboarding-materials')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#onboarding-materials')\u001b[22m\n\n\n  71 |\n  72 |       test(\"displays onboarding materials FAQ\", async () => {\n> 73 |         await expect(faqPage.onboardingMaterials).toBeVisible();\n     |                                                   ^\n  74 |         await expect(faqPage.onboardingMaterials).toHaveText(\"Onboarding Materials\");\n  75 |\n  76 |         await expect(faqPage.onboardingMaterials.locator(\"div:nth-child(1)\")).not.toBeVisible();\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:73:51"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:29:14.677Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 51,
                                "line": 73
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-24087be2a5f2d9c3bdf1",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 72,
                      "column": 7
                    }
                  ]
                },
                {
                  "title": "State Plan Amendments (SPAs)",
                  "file": "e2e/faq/faq.spec.ts",
                  "line": 80,
                  "column": 10,
                  "specs": [
                    {
                      "title": "displays format used to enter a SPA ID FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 24,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5481,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#spa-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#spa-id-format')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#spa-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#spa-id-format')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:82:43",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#spa-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#spa-id-format')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#spa-id-format')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 43,
                                  "line": 82
                                },
                                "snippet": "\u001b[0m \u001b[90m 80 |\u001b[39m     test\u001b[33m.\u001b[39mdescribe(\u001b[32m\"State Plan Amendments (SPAs)\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 81 |\u001b[39m       test(\u001b[32m\"displays format used to enter a SPA ID FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 82 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mspaIdFormat)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 83 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mspaIdFormat)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"What format is used to enter a SPA ID?\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 84 |\u001b[39m\n \u001b[90m 85 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mspaIdFormat\u001b[33m.\u001b[39mlocator(\u001b[32m\"div:nth-child(1)\"\u001b[39m))\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 43,
                                    "line": 82
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#spa-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#spa-id-format')\u001b[22m\n\n\n  80 |     test.describe(\"State Plan Amendments (SPAs)\", () => {\n  81 |       test(\"displays format used to enter a SPA ID FAQ\", async () => {\n> 82 |         await expect(faqPage.spaIdFormat).toBeVisible();\n     |                                           ^\n  83 |         await expect(faqPage.spaIdFormat).toHaveText(\"What format is used to enter a SPA ID?\");\n  84 |\n  85 |         await expect(faqPage.spaIdFormat.locator(\"div:nth-child(1)\")).not.toBeVisible();\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:82:43"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:29:21.086Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 43,
                                "line": 82
                              }
                            },
                            {
                              "workerIndex": 25,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5647,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#spa-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#spa-id-format')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#spa-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#spa-id-format')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:82:43",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#spa-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#spa-id-format')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#spa-id-format')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 43,
                                  "line": 82
                                },
                                "snippet": "\u001b[0m \u001b[90m 80 |\u001b[39m     test\u001b[33m.\u001b[39mdescribe(\u001b[32m\"State Plan Amendments (SPAs)\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 81 |\u001b[39m       test(\u001b[32m\"displays format used to enter a SPA ID FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 82 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mspaIdFormat)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 83 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mspaIdFormat)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"What format is used to enter a SPA ID?\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 84 |\u001b[39m\n \u001b[90m 85 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mspaIdFormat\u001b[33m.\u001b[39mlocator(\u001b[32m\"div:nth-child(1)\"\u001b[39m))\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 43,
                                    "line": 82
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#spa-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#spa-id-format')\u001b[22m\n\n\n  80 |     test.describe(\"State Plan Amendments (SPAs)\", () => {\n  81 |       test(\"displays format used to enter a SPA ID FAQ\", async () => {\n> 82 |         await expect(faqPage.spaIdFormat).toBeVisible();\n     |                                           ^\n  83 |         await expect(faqPage.spaIdFormat).toHaveText(\"What format is used to enter a SPA ID?\");\n  84 |\n  85 |         await expect(faqPage.spaIdFormat.locator(\"div:nth-child(1)\")).not.toBeVisible();\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:82:43"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:29:27.469Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-e8b91--used-to-enter-a-SPA-ID-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 43,
                                "line": 82
                              }
                            },
                            {
                              "workerIndex": 26,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5538,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#spa-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#spa-id-format')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#spa-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#spa-id-format')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:82:43",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#spa-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#spa-id-format')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#spa-id-format')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 43,
                                  "line": 82
                                },
                                "snippet": "\u001b[0m \u001b[90m 80 |\u001b[39m     test\u001b[33m.\u001b[39mdescribe(\u001b[32m\"State Plan Amendments (SPAs)\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 81 |\u001b[39m       test(\u001b[32m\"displays format used to enter a SPA ID FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 82 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mspaIdFormat)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 83 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mspaIdFormat)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"What format is used to enter a SPA ID?\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 84 |\u001b[39m\n \u001b[90m 85 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mspaIdFormat\u001b[33m.\u001b[39mlocator(\u001b[32m\"div:nth-child(1)\"\u001b[39m))\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 43,
                                    "line": 82
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#spa-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#spa-id-format')\u001b[22m\n\n\n  80 |     test.describe(\"State Plan Amendments (SPAs)\", () => {\n  81 |       test(\"displays format used to enter a SPA ID FAQ\", async () => {\n> 82 |         await expect(faqPage.spaIdFormat).toBeVisible();\n     |                                           ^\n  83 |         await expect(faqPage.spaIdFormat).toHaveText(\"What format is used to enter a SPA ID?\");\n  84 |\n  85 |         await expect(faqPage.spaIdFormat.locator(\"div:nth-child(1)\")).not.toBeVisible();\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:82:43"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:29:34.069Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 43,
                                "line": 82
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-eab721eb4b234f1f2c7a",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 81,
                      "column": 7
                    },
                    {
                      "title": "displays Medicaid SPA attachments FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 27,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5473,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:89:54",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#medicaid-spa-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 54,
                                  "line": 89
                                },
                                "snippet": "\u001b[0m \u001b[90m 87 |\u001b[39m\n \u001b[90m 88 |\u001b[39m       test(\u001b[32m\"displays Medicaid SPA attachments FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 89 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmedicaidSpaAttachments)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                                      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 90 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmedicaidSpaAttachments)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 91 |\u001b[39m           \u001b[32m\"What are the attachments for a Medicaid SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 92 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 54,
                                    "line": 89
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-attachments')\u001b[22m\n\n\n  87 |\n  88 |       test(\"displays Medicaid SPA attachments FAQ\", async () => {\n> 89 |         await expect(faqPage.medicaidSpaAttachments).toBeVisible();\n     |                                                      ^\n  90 |         await expect(faqPage.medicaidSpaAttachments).toHaveText(\n  91 |           \"What are the attachments for a Medicaid SPA?\",\n  92 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:89:54"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:29:40.509Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 54,
                                "line": 89
                              }
                            },
                            {
                              "workerIndex": 28,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5675,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:89:54",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#medicaid-spa-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 54,
                                  "line": 89
                                },
                                "snippet": "\u001b[0m \u001b[90m 87 |\u001b[39m\n \u001b[90m 88 |\u001b[39m       test(\u001b[32m\"displays Medicaid SPA attachments FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 89 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmedicaidSpaAttachments)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                                      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 90 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmedicaidSpaAttachments)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 91 |\u001b[39m           \u001b[32m\"What are the attachments for a Medicaid SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 92 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 54,
                                    "line": 89
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-attachments')\u001b[22m\n\n\n  87 |\n  88 |       test(\"displays Medicaid SPA attachments FAQ\", async () => {\n> 89 |         await expect(faqPage.medicaidSpaAttachments).toBeVisible();\n     |                                                      ^\n  90 |         await expect(faqPage.medicaidSpaAttachments).toHaveText(\n  91 |           \"What are the attachments for a Medicaid SPA?\",\n  92 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:89:54"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:29:46.904Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-ac5ab-edicaid-SPA-attachments-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 54,
                                "line": 89
                              }
                            },
                            {
                              "workerIndex": 29,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5500,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:89:54",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#medicaid-spa-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 54,
                                  "line": 89
                                },
                                "snippet": "\u001b[0m \u001b[90m 87 |\u001b[39m\n \u001b[90m 88 |\u001b[39m       test(\u001b[32m\"displays Medicaid SPA attachments FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 89 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmedicaidSpaAttachments)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m    |\u001b[39m                                                      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 90 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmedicaidSpaAttachments)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 91 |\u001b[39m           \u001b[32m\"What are the attachments for a Medicaid SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 92 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 54,
                                    "line": 89
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-attachments')\u001b[22m\n\n\n  87 |\n  88 |       test(\"displays Medicaid SPA attachments FAQ\", async () => {\n> 89 |         await expect(faqPage.medicaidSpaAttachments).toBeVisible();\n     |                                                      ^\n  90 |         await expect(faqPage.medicaidSpaAttachments).toHaveText(\n  91 |           \"What are the attachments for a Medicaid SPA?\",\n  92 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:89:54"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:29:53.561Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 54,
                                "line": 89
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-a0d98c42f240b2f773c9",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 88,
                      "column": 7
                    },
                    {
                      "title": "displays attachments response to Medicaid RAI FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 30,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5484,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-rai-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-rai-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:98:46",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-rai-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#medicaid-spa-rai-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 46,
                                  "line": 98
                                },
                                "snippet": "\u001b[0m \u001b[90m  96 |\u001b[39m\n \u001b[90m  97 |\u001b[39m       test(\u001b[32m\"displays attachments response to Medicaid RAI FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m  98 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmedicaidSpaRai)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m  99 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmedicaidSpaRai)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 100 |\u001b[39m           \u001b[32m\"What are the attachments for a Medicaid response to Request for Additional Information (RAI)?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 101 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 46,
                                    "line": 98
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-rai-attachments')\u001b[22m\n\n\n   96 |\n   97 |       test(\"displays attachments response to Medicaid RAI FAQ\", async () => {\n>  98 |         await expect(faqPage.medicaidSpaRai).toBeVisible();\n      |                                              ^\n   99 |         await expect(faqPage.medicaidSpaRai).toHaveText(\n  100 |           \"What are the attachments for a Medicaid response to Request for Additional Information (RAI)?\",\n  101 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:98:46"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:30:00.006Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 46,
                                "line": 98
                              }
                            },
                            {
                              "workerIndex": 31,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5861,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#medicaid-spa-rai-attachments')\nExpected string: \u001b[32m\"What are the attachments for a Medicaid response to Request for Additional Information (RAI)?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-rai-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#medicaid-spa-rai-attachments')\nExpected string: \u001b[32m\"What are the attachments for a Medicaid response to Request for Additional Information (RAI)?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-rai-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:99:46",
                                "matcherResult": {
                                  "name": "toHaveText",
                                  "expected": "What are the attachments for a Medicaid response to Request for Additional Information (RAI)?",
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#medicaid-spa-rai-attachments')\nExpected string: \u001b[32m\"What are the attachments for a Medicaid response to Request for Additional Information (RAI)?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-rai-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "log": [
                                    "  - expect.toHaveText with timeout 5000ms",
                                    "  - waiting for locator('#medicaid-spa-rai-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 46,
                                  "line": 99
                                },
                                "snippet": "\u001b[0m \u001b[90m  97 |\u001b[39m       test(\u001b[32m\"displays attachments response to Medicaid RAI FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m  98 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmedicaidSpaRai)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m  99 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmedicaidSpaRai)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m     |\u001b[39m                                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 100 |\u001b[39m           \u001b[32m\"What are the attachments for a Medicaid response to Request for Additional Information (RAI)?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 101 |\u001b[39m         )\u001b[33m;\u001b[39m\n \u001b[90m 102 |\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 46,
                                    "line": 99
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#medicaid-spa-rai-attachments')\nExpected string: \u001b[32m\"What are the attachments for a Medicaid response to Request for Additional Information (RAI)?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-rai-attachments')\u001b[22m\n\n\n   97 |       test(\"displays attachments response to Medicaid RAI FAQ\", async () => {\n   98 |         await expect(faqPage.medicaidSpaRai).toBeVisible();\n>  99 |         await expect(faqPage.medicaidSpaRai).toHaveText(\n      |                                              ^\n  100 |           \"What are the attachments for a Medicaid response to Request for Additional Information (RAI)?\",\n  101 |         );\n  102 |\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:99:46"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:30:06.395Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-90810-esponse-to-Medicaid-RAI-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 46,
                                "line": 99
                              }
                            },
                            {
                              "workerIndex": 32,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5488,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-rai-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-rai-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:98:46",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-rai-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#medicaid-spa-rai-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 46,
                                  "line": 98
                                },
                                "snippet": "\u001b[0m \u001b[90m  96 |\u001b[39m\n \u001b[90m  97 |\u001b[39m       test(\u001b[32m\"displays attachments response to Medicaid RAI FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m  98 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmedicaidSpaRai)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m  99 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmedicaidSpaRai)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 100 |\u001b[39m           \u001b[32m\"What are the attachments for a Medicaid response to Request for Additional Information (RAI)?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 101 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 46,
                                    "line": 98
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#medicaid-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#medicaid-spa-rai-attachments')\u001b[22m\n\n\n   96 |\n   97 |       test(\"displays attachments response to Medicaid RAI FAQ\", async () => {\n>  98 |         await expect(faqPage.medicaidSpaRai).toBeVisible();\n      |                                              ^\n   99 |         await expect(faqPage.medicaidSpaRai).toHaveText(\n  100 |           \"What are the attachments for a Medicaid response to Request for Additional Information (RAI)?\",\n  101 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:98:46"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:30:13.236Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 46,
                                "line": 98
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-2d769ea391b4955cdfd7",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 97,
                      "column": 7
                    },
                    {
                      "title": "displays CHIP SPA attachments FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 33,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5491,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:107:50",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#chip-spa-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 50,
                                  "line": 107
                                },
                                "snippet": "\u001b[0m \u001b[90m 105 |\u001b[39m\n \u001b[90m 106 |\u001b[39m       test(\u001b[32m\"displays CHIP SPA attachments FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 107 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaAttachments)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 108 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaAttachments)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 109 |\u001b[39m           \u001b[32m\"What are the attachments for a CHIP SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 110 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 50,
                                    "line": 107
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-attachments')\u001b[22m\n\n\n  105 |\n  106 |       test(\"displays CHIP SPA attachments FAQ\", async () => {\n> 107 |         await expect(faqPage.chipSpaAttachments).toBeVisible();\n      |                                                  ^\n  108 |         await expect(faqPage.chipSpaAttachments).toHaveText(\n  109 |           \"What are the attachments for a CHIP SPA?\",\n  110 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:107:50"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:30:19.627Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": "IyBJbnN0cnVjdGlvbnMKCi0gRm9sbG93aW5nIFBsYXl3cmlnaHQgdGVzdCBmYWlsZWQuCi0gRXhwbGFpbiB3aHksIGJlIGNvbmNpc2UsIHJlc3BlY3QgUGxheXdyaWdodCBiZXN0IHByYWN0aWNlcy4KLSBQcm92aWRlIGEgc25pcHBldCBvZiBjb2RlIHdpdGggdGhlIGZpeCwgaWYgcG9zc2libGUuCgojIFRlc3QgaW5mbwoKLSBOYW1lOiBGQVEgcGFnZSA+PiBVSSB2YWxpZGF0aW9uID4+IFN0YXRlIFBsYW4gQW1lbmRtZW50cyAoU1BBcykgPj4gZGlzcGxheXMgQ0hJUCBTUEEgYXR0YWNobWVudHMgRkFRCi0gTG9jYXRpb246IC9ob21lL3J1bm5lci93b3JrL21hY3Byby1tYWtvL21hY3Byby1tYWtvL3Rlc3QvZTJlL2ZhcS9mYXEuc3BlYy50czoxMDY6NwoKIyBFcnJvciBkZXRhaWxzCgpgYGAKRXJyb3I6IFRpbWVkIG91dCA1MDAwbXMgd2FpdGluZyBmb3IgZXhwZWN0KGxvY2F0b3IpLnRvQmVWaXNpYmxlKCkKCkxvY2F0b3I6IGxvY2F0b3IoJyNjaGlwLXNwYS1hdHRhY2htZW50cycpCkV4cGVjdGVkOiB2aXNpYmxlClJlY2VpdmVkOiA8ZWxlbWVudChzKSBub3QgZm91bmQ+CkNhbGwgbG9nOgogIC0gZXhwZWN0LnRvQmVWaXNpYmxlIHdpdGggdGltZW91dCA1MDAwbXMKICAtIHdhaXRpbmcgZm9yIGxvY2F0b3IoJyNjaGlwLXNwYS1hdHRhY2htZW50cycpCgogICAgYXQgL2hvbWUvcnVubmVyL3dvcmsvbWFjcHJvLW1ha28vbWFjcHJvLW1ha28vdGVzdC9lMmUvZmFxL2ZhcS5zcGVjLnRzOjEwNzo1MApgYGAKCiMgUGFnZSBzbmFwc2hvdAoKYGBgeWFtbAotIGJhbm5lcjoKICAtIGltZyAiQSBVbml0ZWQgU3RhdGVzIEZsYWcgaWNvbiIKICAtIHBhcmFncmFwaDogQW4gb2ZmaWNpYWwgd2Vic2l0ZSBvZiB0aGUgVW5pdGVkIFN0YXRlcyBnb3Zlcm5tZW50CiAgLSBidXR0b24gIkhlcmUncyBob3cgeW91IGtub3ciOgogICAgLSB0ZXh0OiBIZXJlJ3MgaG93IHlvdSBrbm93CiAgICAtIGltZwotIG5hdmlnYXRpb246CiAgLSBpbWcgIm9uZW1hYyBzaXRlIGxvZ28iCi0gbWFpbjoKICAtIGhlYWRpbmcgIk9uZU1BQyBTdXBwb3J0IiBbbGV2ZWw9MV0KICAtIGhlYWRpbmcgIlRvcGljcyIgW2xldmVsPTJdCiAgLSBoZWFkaW5nICJHZW5lcmFsIiBbbGV2ZWw9M106CiAgICAtIGJ1dHRvbiAiR2VuZXJhbCI6CiAgICAgIC0gdGV4dDogR2VuZXJhbAogICAgICAtIGltZwogIC0gaGVhZGluZyAiUGFja2FnZSBhY3Rpb25zIiBbbGV2ZWw9M106CiAgICAtIGJ1dHRvbiAiUGFja2FnZSBhY3Rpb25zIjoKICAgICAgLSB0ZXh0OiBQYWNrYWdlIGFjdGlvbnMKICAgICAgLSBpbWcKICAtIGhlYWRpbmcgIkltcGxlbWVudGF0aW9uIGd1aWRlcyIgW2xldmVsPTNdOgogICAgLSBidXR0b24gIkltcGxlbWVudGF0aW9uIGd1aWRlcyI6CiAgICAgIC0gdGV4dDogSW1wbGVtZW50YXRpb24gZ3VpZGVzCiAgICAgIC0gaW1nCiAgLSBoZWFkaW5nICJBY2Nlc3MgJiByb2xlcyIgW2xldmVsPTNdOgogICAgLSBidXR0b24gIkFjY2VzcyAmIHJvbGVzIjoKICAgICAgLSB0ZXh0OiBBY2Nlc3MgJiByb2xlcwogICAgICAtIGltZwogIC0gaGVhZGluZyAiVXNlciBwcm9maWxlIiBbbGV2ZWw9M106CiAgICAtIGJ1dHRvbiAiVXNlciBwcm9maWxlIjoKICAgICAgLSB0ZXh0OiBVc2VyIHByb2ZpbGUKICAgICAgLSBpbWcKICAtIGhlYWRpbmcgIkdsb3NzYXJ5IiBbbGV2ZWw9M106CiAgICAtIGJ1dHRvbiAiR2xvc3NhcnkiOgogICAgICAtIHRleHQ6IEdsb3NzYXJ5CiAgICAgIC0gaW1nCiAgLSBoZWFkaW5nICJOb3QgZmluZGluZyB0aGUgaW5mb3JtYXRpb24geW91IG5lZWQ/IiBbbGV2ZWw9M10KICAtIHBhcmFncmFwaDogQ29udGFjdCB0aGUgSGVscCBEZXNrCiAgLSBwYXJhZ3JhcGg6CiAgICAtIHRleHQ6ICJFbWFpbDoiCiAgICAtIGxpbmsgIk9uZU1BQ19IZWxwZGVza0BDTVMuaGhzLmdvdiIKICAtIHBhcmFncmFwaDoKICAgIC0gdGV4dDogTGVhdmUgYSBtZXNzYWdlIGF0CiAgICAtIGxpbmsgIig4ODMpIDIyOC0yNTQwIgogIC0gYXJ0aWNsZToKICAgIC0gaGVhZGluZyAiRnJlcXVlbnRseSBhc2tlZCBxdWVzdGlvbnMgKEZBUXMpIiBbbGV2ZWw9Ml0KICAgIC0gYnV0dG9uICJFeHBhbmQgYWxsIjoKICAgICAgLSB0ZXh0OiBFeHBhbmQgYWxsCiAgICAgIC0gaW1nCiAgICAtIHNlcGFyYXRvcgogICAgLSBoZWFkaW5nICJTaG91bGQgSSB1c2UgT25lTUFDIGZvciBteSBzdGF0ZSdzIHN1Ym1pc3Npb24/IiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJTaG91bGQgSSB1c2UgT25lTUFDIGZvciBteSBzdGF0ZSdzIHN1Ym1pc3Npb24/IjoKICAgICAgICAtIHRleHQ6IFNob3VsZCBJIHVzZSBPbmVNQUMgZm9yIG15IHN0YXRlJ3Mgc3VibWlzc2lvbj8KICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJJcyB3aGF0IEkgc3VibWl0IGluIE9uZU1BQyBjb25zaWRlcmVkIHRoZSBvZmZpY2lhbCBzdGF0ZSBzdWJtaXNzaW9uPyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiSXMgd2hhdCBJIHN1Ym1pdCBpbiBPbmVNQUMgY29uc2lkZXJlZCB0aGUgb2ZmaWNpYWwgc3RhdGUgc3VibWlzc2lvbj8iOgogICAgICAgIC0gdGV4dDogSXMgd2hhdCBJIHN1Ym1pdCBpbiBPbmVNQUMgY29uc2lkZXJlZCB0aGUgb2ZmaWNpYWwgc3RhdGUgc3VibWlzc2lvbj8KICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJXaGF0IHNob3VsZCBJIGRvIGlmIEkgZG9u4oCZdCBnZXQgYSBjb25maXJtYXRpb24gZW1haWw/IiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJXaGF0IHNob3VsZCBJIGRvIGlmIEkgZG9u4oCZdCBnZXQgYSBjb25maXJtYXRpb24gZW1haWw/IjoKICAgICAgICAtIHRleHQ6IFdoYXQgc2hvdWxkIEkgZG8gaWYgSSBkb27igJl0IGdldCBhIGNvbmZpcm1hdGlvbiBlbWFpbD8KICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJXaHkgZG9lcyB0aGUgc3RhdHVzIG9mIG15IHRlbXBvcmFyeSBleHRlbnNpb24gcmVxdWVzdCBjb250aW51ZSB0byBzaG93IGFzIOKAnHN1Ym1pdHRlZOKAnT8iIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIldoeSBkb2VzIHRoZSBzdGF0dXMgb2YgbXkgdGVtcG9yYXJ5IGV4dGVuc2lvbiByZXF1ZXN0IGNvbnRpbnVlIHRvIHNob3cgYXMg4oCcc3VibWl0dGVk4oCdPyI6CiAgICAgICAgLSB0ZXh0OiBXaHkgZG9lcyB0aGUgc3RhdHVzIG9mIG15IHRlbXBvcmFyeSBleHRlbnNpb24gcmVxdWVzdCBjb250aW51ZSB0byBzaG93IGFzIOKAnHN1Ym1pdHRlZOKAnT8KICAgICAgICAtIGltZwogIC0gYXJ0aWNsZToKICAgIC0gaGVhZGluZyAiR2VuZXJhbCIgW2xldmVsPTJdCiAgICAtIHNlcGFyYXRvcgogICAgLSBoZWFkaW5nICJTZWFyY2ggZm9yIHBhY2thZ2UgSUQgb3Igc3VibWl0dGVyIG5hbWUiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlNlYXJjaCBmb3IgcGFja2FnZSBJRCBvciBzdWJtaXR0ZXIgbmFtZSI6CiAgICAgICAgLSB0ZXh0OiBTZWFyY2ggZm9yIHBhY2thZ2UgSUQgb3Igc3VibWl0dGVyIG5hbWUKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJDdXN0b21pemUgeW91ciBkYXNoYm9hcmQgdmlldyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiQ3VzdG9taXplIHlvdXIgZGFzaGJvYXJkIHZpZXciOgogICAgICAgIC0gdGV4dDogQ3VzdG9taXplIHlvdXIgZGFzaGJvYXJkIHZpZXcKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJWaWV3IHN1Ym1pc3Npb24gcGFja2FnZSIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiVmlldyBzdWJtaXNzaW9uIHBhY2thZ2UiOgogICAgICAgIC0gdGV4dDogVmlldyBzdWJtaXNzaW9uIHBhY2thZ2UKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJBY2NlcHRlZCBmaWxlIHR5cGVzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJBY2NlcHRlZCBmaWxlIHR5cGVzIjoKICAgICAgICAtIHRleHQ6IEFjY2VwdGVkIGZpbGUgdHlwZXMKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJQYWNrYWdlIHN0YXR1c2VzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJQYWNrYWdlIHN0YXR1c2VzIjoKICAgICAgICAtIHRleHQ6IFBhY2thZ2Ugc3RhdHVzZXMKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJTdXBwb3J0ZWQgYnJvd3NlcnMiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlN1cHBvcnRlZCBicm93c2VycyI6CiAgICAgICAgLSB0ZXh0OiBTdXBwb3J0ZWQgYnJvd3NlcnMKICAgICAgICAtIGltZwogIC0gYXJ0aWNsZToKICAgIC0gaGVhZGluZyAiUGFja2FnZSBhY3Rpb25zIiBbbGV2ZWw9Ml0KICAgIC0gc2VwYXJhdG9yCiAgICAtIGhlYWRpbmcgIlN1Ym1pdCBuZXcgU1BBIG9yIHdhaXZlciIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiU3VibWl0IG5ldyBTUEEgb3Igd2FpdmVyIjoKICAgICAgICAtIHRleHQ6IFN1Ym1pdCBuZXcgU1BBIG9yIHdhaXZlcgogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIlJlc3BvbmQgdG8gUkFJIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJSZXNwb25kIHRvIFJBSSI6CiAgICAgICAgLSB0ZXh0OiBSZXNwb25kIHRvIFJBSQogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIldpdGhkcmF3IFJBSSByZXNwb25zZSIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiV2l0aGRyYXcgUkFJIHJlc3BvbnNlIjoKICAgICAgICAtIHRleHQ6IFdpdGhkcmF3IFJBSSByZXNwb25zZQogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIldpdGhkcmF3IHBhY2thZ2UiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIldpdGhkcmF3IHBhY2thZ2UiOgogICAgICAgIC0gdGV4dDogV2l0aGRyYXcgcGFja2FnZQogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIlJlcXVlc3QgdGVtcG9yYXJ5IGV4dGVuc2lvbiBmb3IgYSB3YWl2ZXIiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlJlcXVlc3QgdGVtcG9yYXJ5IGV4dGVuc2lvbiBmb3IgYSB3YWl2ZXIiOgogICAgICAgIC0gdGV4dDogUmVxdWVzdCB0ZW1wb3JhcnkgZXh0ZW5zaW9uIGZvciBhIHdhaXZlcgogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIkFkZCBhbWVuZG1lbnQgZm9yIDE5MTUoYikgd2FpdmVyIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJBZGQgYW1lbmRtZW50IGZvciAxOTE1KGIpIHdhaXZlciI6CiAgICAgICAgLSB0ZXh0OiBBZGQgYW1lbmRtZW50IGZvciAxOTE1KGIpIHdhaXZlcgogICAgICAgIC0gaW1nCiAgLSBhcnRpY2xlOgogICAgLSBoZWFkaW5nICJUZW1wbGF0ZXMgJiBpbXBsZW1lbnRhdGlvbiBndWlkZXMiIFtsZXZlbD0yXQogICAgLSBzZXBhcmF0b3IKICAgIC0gaGVhZGluZyAiTWVkaWNhaWQgQWx0ZXJuYXRpdmUgQmVuZWZpdCBQbGFuIChBQlApIFNQQSB0ZW1wbGF0ZXMiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIk1lZGljYWlkIEFsdGVybmF0aXZlIEJlbmVmaXQgUGxhbiAoQUJQKSBTUEEgdGVtcGxhdGVzIjoKICAgICAgICAtIHRleHQ6IE1lZGljYWlkIEFsdGVybmF0aXZlIEJlbmVmaXQgUGxhbiAoQUJQKSBTUEEgdGVtcGxhdGVzCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiTWVkaWNhaWQgQWx0ZXJuYXRpdmUgQmVuZWZpdCBQbGFuIChBQlApIFNQQSBpbXBsZW1lbnRhdGlvbiBndWlkZXMiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIk1lZGljYWlkIEFsdGVybmF0aXZlIEJlbmVmaXQgUGxhbiAoQUJQKSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzIjoKICAgICAgICAtIHRleHQ6IE1lZGljYWlkIEFsdGVybmF0aXZlIEJlbmVmaXQgUGxhbiAoQUJQKSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiTWVkaWNhaWQgUHJlbWl1bXMgYW5kIENvc3QgU2hhcmluZyAoTVBDKSBTUEEgdGVtcGxhdGVzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJNZWRpY2FpZCBQcmVtaXVtcyBhbmQgQ29zdCBTaGFyaW5nIChNUEMpIFNQQSB0ZW1wbGF0ZXMiOgogICAgICAgIC0gdGV4dDogTWVkaWNhaWQgUHJlbWl1bXMgYW5kIENvc3QgU2hhcmluZyAoTVBDKSBTUEEgdGVtcGxhdGVzCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiTWVkaWNhaWQgUHJlbWl1bXMgYW5kIENvc3QgU2hhcmluZyAoTVBDKSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJNZWRpY2FpZCBQcmVtaXVtcyBhbmQgQ29zdCBTaGFyaW5nIChNUEMpIFNQQSBpbXBsZW1lbnRhdGlvbiBndWlkZXMiOgogICAgICAgIC0gdGV4dDogTWVkaWNhaWQgUHJlbWl1bXMgYW5kIENvc3QgU2hhcmluZyAoTVBDKSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiQ0hJUCBlbGlnaWJpbGl0eSBTUEEgdGVtcGxhdGVzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJDSElQIGVsaWdpYmlsaXR5IFNQQSB0ZW1wbGF0ZXMiOgogICAgICAgIC0gdGV4dDogQ0hJUCBlbGlnaWJpbGl0eSBTUEEgdGVtcGxhdGVzCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiQ0hJUCBlbGlnaWJpbGl0eSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJDSElQIGVsaWdpYmlsaXR5IFNQQSBpbXBsZW1lbnRhdGlvbiBndWlkZXMiOgogICAgICAgIC0gdGV4dDogQ0hJUCBlbGlnaWJpbGl0eSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzCiAgICAgICAgLSBpbWcKICAtIGFydGljbGU6CiAgICAtIGhlYWRpbmcgIkFjY2VzcyAmIFJvbGVzIiBbbGV2ZWw9Ml0KICAgIC0gc2VwYXJhdG9yCiAgICAtIGhlYWRpbmcgIk9uZU1BQyB1c2VyIHJvbGVzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJPbmVNQUMgdXNlciByb2xlcyI6CiAgICAgICAgLSB0ZXh0OiBPbmVNQUMgdXNlciByb2xlcwogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIlJlcXVlc3Qgcm9sZSBpbiBPbmVNQUMiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlJlcXVlc3Qgcm9sZSBpbiBPbmVNQUMiOgogICAgICAgIC0gdGV4dDogUmVxdWVzdCByb2xlIGluIE9uZU1BQwogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIlJlcXVlc3Qgcm9sZSBjaGFuZ2UgaW4gT25lTUFDIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJSZXF1ZXN0IHJvbGUgY2hhbmdlIGluIE9uZU1BQyI6CiAgICAgICAgLSB0ZXh0OiBSZXF1ZXN0IHJvbGUgY2hhbmdlIGluIE9uZU1BQwogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIkFwcHJvdmUgb3IgZGVueSByb2xlIHJlcXVlc3QgKHN0YXRlIHN5c3RlbSBBZG1pbmlzdHJhdG9yIHVzZXJzKSIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiQXBwcm92ZSBvciBkZW55IHJvbGUgcmVxdWVzdCAoc3RhdGUgc3lzdGVtIEFkbWluaXN0cmF0b3IgdXNlcnMpIjoKICAgICAgICAtIHRleHQ6IEFwcHJvdmUgb3IgZGVueSByb2xlIHJlcXVlc3QgKHN0YXRlIHN5c3RlbSBBZG1pbmlzdHJhdG9yIHVzZXJzKQogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIklETSBpbnN0cnVjdGlvbnMgZm9yIE9uZU1BQyB1c2VycyAoUERGKSIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiSURNIGluc3RydWN0aW9ucyBmb3IgT25lTUFDIHVzZXJzIChQREYpIjoKICAgICAgICAtIHRleHQ6IElETSBpbnN0cnVjdGlvbnMgZm9yIE9uZU1BQyB1c2VycyAoUERGKQogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIk9uZU1BQyBJRE0gZ3VpZGUgKFBERikiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIk9uZU1BQyBJRE0gZ3VpZGUgKFBERikiOgogICAgICAgIC0gdGV4dDogT25lTUFDIElETSBndWlkZSAoUERGKQogICAgICAgIC0gaW1nCiAgLSBhcnRpY2xlOgogICAgLSBoZWFkaW5nICJVc2VyIHByb2ZpbGUiIFtsZXZlbD0yXQogICAgLSBzZXBhcmF0b3IKICAgIC0gaGVhZGluZyAiVmlldyB5b3VyIHVzZXIgcHJvZmlsZSIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiVmlldyB5b3VyIHVzZXIgcHJvZmlsZSI6CiAgICAgICAgLSB0ZXh0OiBWaWV3IHlvdXIgdXNlciBwcm9maWxlCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiQWRkIHBob25lIG51bWJlciB0byB5b3VyIHByb2ZpbGUiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIkFkZCBwaG9uZSBudW1iZXIgdG8geW91ciBwcm9maWxlIjoKICAgICAgICAtIHRleHQ6IEFkZCBwaG9uZSBudW1iZXIgdG8geW91ciBwcm9maWxlCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiQWRkIGFjY2VzcyB0byBhIHN0YXRlIGFzIFN0YXRlIFN1Ym1pdHRlciIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiQWRkIGFjY2VzcyB0byBhIHN0YXRlIGFzIFN0YXRlIFN1Ym1pdHRlciI6CiAgICAgICAgLSB0ZXh0OiBBZGQgYWNjZXNzIHRvIGEgc3RhdGUgYXMgU3RhdGUgU3VibWl0dGVyCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiUmVtb3ZlIGFjY2VzcyB0byBhIHN0YXRlIGFzIGEgU3RhdGUgU3VibWl0dGVyIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJSZW1vdmUgYWNjZXNzIHRvIGEgc3RhdGUgYXMgYSBTdGF0ZSBTdWJtaXR0ZXIiOgogICAgICAgIC0gdGV4dDogUmVtb3ZlIGFjY2VzcyB0byBhIHN0YXRlIGFzIGEgU3RhdGUgU3VibWl0dGVyCiAgICAgICAgLSBpbWcKICAtIGFydGljbGU6CiAgICAtIGhlYWRpbmcgIkdsb3NzYXJ5IiBbbGV2ZWw9Ml0KICAgIC0gc2VwYXJhdG9yCiAgICAtIGhlYWRpbmcgIkFwcHJvdmVkIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJBcHByb3ZlZCI6CiAgICAgICAgLSB0ZXh0OiBBcHByb3ZlZAogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIkRpc2FwcHJvdmVkIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJEaXNhcHByb3ZlZCI6CiAgICAgICAgLSB0ZXh0OiBEaXNhcHByb3ZlZAogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIlJBSSBpc3N1ZWQiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlJBSSBpc3N1ZWQiOgogICAgICAgIC0gdGV4dDogUkFJIGlzc3VlZAogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIlVuZGVyIHJldmlldyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiVW5kZXIgcmV2aWV3IjoKICAgICAgICAtIHRleHQ6IFVuZGVyIHJldmlldwogICAgICAgIC0gaW1nCi0gY29udGVudGluZm86CiAgLSBpbWcgIkxvZ28gZm9yIE1lZGljYWlkIgogIC0gaW1nICJMb2dvIGZvciBEZXBhcnRtZW50IG9mIEhlYWx0aCBhbmQgSHVtYW4gU2VydmljZXMiCiAgLSBwYXJhZ3JhcGg6IEEgZmVkZXJhbCBnb3Zlcm5tZW50IHdlYnNpdGUgbWFuYWdlZCBhbmQgcGFpZCBmb3IgYnkgdGhlIFUuUy4gQ2VudGVycyBmb3IgTWVkaWNhcmUgYW5kIE1lZGljYWlkIFNlcnZpY2VzIGFuZCBwYXJ0IG9mIHRoZSBNQUNQcm8gc3VpdGUuCiAgLSB0ZXh0OiBFbWFpbAogIC0gbGluayAiT25lTUFDX0hlbHBkZXNrQGNtcy5oaHMuZ292IgogIC0gdGV4dDogZm9yIGhlbHAgb3IgZmVlZGJhY2sgNzUwMCBTZWN1cml0eSBCb3VsZXZhcmQgQmFsdGltb3JlLCBNRCAyMTI0NApgYGAKCiMgVGVzdCBzb3VyY2UKCmBgYHRzCiAgIDcgfCB0ZXN0LmRlc2NyaWJlKCJGQVEgcGFnZSIsIHsgdGFnOiBbIkBlMmUiLCAiQHNtb2tlIiwgIkBmYXEiXSB9LCAoKSA9PiB7CiAgIDggfCAgIHRlc3QuYmVmb3JlRWFjaChhc3luYyAoeyBwYWdlIH0pID0+IHsKICAgOSB8ICAgICBmYXFQYWdlID0gbmV3IEZBUVBhZ2UocGFnZSk7CiAgIDEwIHwgICAgIGF3YWl0IHBhZ2UuZ290bygiL2ZhcSIpOwogICAxMSB8ICAgfSk7CiAgIDEyIHwKICAgMTMgfCAgIHRlc3QuZGVzY3JpYmUoIlVJIHZhbGlkYXRpb24iLCB7IHRhZzogWyJAQ0kiXSB9LCAoKSA9PiB7CiAgIDE0IHwgICAgIHRlc3QuZGVzY3JpYmUoImhlYWRlciIsICgpID0+IHsKICAgMTUgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyBoZWFkZXIiLCBhc3luYyAoKSA9PiB7CiAgIDE2IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5oZWFkZXIpLnRvQmVWaXNpYmxlKCk7CiAgIDE3IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5oZWFkZXIpLnRvSGF2ZVRleHQoIkZyZXF1ZW50bHkgQXNrZWQgUXVlc3Rpb25zIik7CiAgIDE4IHwgICAgICAgfSk7CiAgIDE5IHwgICAgIH0pOwogICAyMCB8CiAgIDIxIHwgICAgIHRlc3QuZGVzY3JpYmUoIkdlbmVyYWwgc2VjdGlvbiIsICgpID0+IHsKICAgMjIgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyBzeXN0ZW0gZm9yIHN0YXRlIHN1Ym1pc3Npb24gRkFRIiwgYXN5bmMgKCkgPT4gewogICAyMyB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuY3Jvc3NXYWxrKS50b0JlVmlzaWJsZSgpOwogICAyNCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuY3Jvc3NXYWxrKS50b0hhdmVUZXh0KAogICAyNSB8ICAgICAgICAgICAiV2hpY2ggc3lzdGVtIHNob3VsZCBJIHVzZSBmb3IgbXkgc3RhdGXigJlzIHN1Ym1pc3Npb24/IiwKICAgMjYgfCAgICAgICAgICk7CiAgIDI3IHwKICAgMjggfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLnBkZnMuc3RhdGVQbGFucykubm90LnRvQmVWaXNpYmxlKCk7CiAgIDI5IHwgICAgICAgfSk7CiAgIDMwIHwKICAgMzEgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyBicm93c2VyIHR5cGUgRkFRIiwgYXN5bmMgKCkgPT4gewogICAzMiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYnJvd3NlcnMpLnRvQmVWaXNpYmxlKCk7CiAgIDMzIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5icm93c2VycykudG9IYXZlVGV4dCgiV2hhdCBicm93c2VycyBjYW4gSSB1c2UgdG8gYWNjZXNzIHRoZSBzeXN0ZW0/Iik7CiAgIDM0IHwKICAgMzUgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmJyb3dzZXJzLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgIDM2IHwgICAgICAgfSk7CiAgIDM3IHwKICAgMzggfCAgICAgICB0ZXN0KCJkaXNwbGF5cyBjb25maXJtYXRpb24gZW1haWwgRkFRIiwgYXN5bmMgKCkgPT4gewogICAzOSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuY29uZmlybUVtYWlsKS50b0JlVmlzaWJsZSgpOwogICA0MCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuY29uZmlybUVtYWlsKS50b0hhdmVUZXh0KAogICA0MSB8ICAgICAgICAgICAiV2hhdCBzaG91bGQgd2UgZG8gaWYgd2UgZG9u4oCZdCByZWNlaXZlIGEgY29uZmlybWF0aW9uIGVtYWlsPyIsCiAgIDQyIHwgICAgICAgICApOwogICA0MyB8CiAgIDQ0IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5jb25maXJtRW1haWwubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAgNDUgfCAgICAgICB9KTsKICAgNDYgfAogICA0NyB8ICAgICAgIHRlc3QoImRpc3BsYXlzIG9mZmljaWFsIHN1Ym1pc3Npb24gRkFRIiwgYXN5bmMgKCkgPT4gewogICA0OCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uub2ZmaWNpYWwpLnRvQmVWaXNpYmxlKCk7CiAgIDQ5IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5vZmZpY2lhbCkudG9IYXZlVGV4dCgKICAgNTAgfCAgICAgICAgICAgIklzIHRoaXMgY29uc2lkZXJlZCB0aGUgb2ZmaWNpYWwgc3RhdGUgc3VibWlzc2lvbj8iLAogICA1MSB8ICAgICAgICAgKTsKICAgNTIgfAogICA1MyB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uub2ZmaWNpYWwubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAgNTQgfCAgICAgICB9KTsKICAgNTUgfAogICA1NiB8ICAgICAgIHRlc3QoImRpc3BsYXlzIE9uZU1hYyB1c2VyIHJvbGVzIEZBUSIsIGFzeW5jICgpID0+IHsKICAgNTcgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLm9uZW1hY1JvbGVzKS50b0JlVmlzaWJsZSgpOwogICA1OCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uub25lbWFjUm9sZXMpLnRvSGF2ZVRleHQoIldoYXQgYXJlIHRoZSBPbmVNQUMgdXNlciByb2xlcz8iKTsKICAgNTkgfAogICA2MCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uub25lbWFjUm9sZXMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAgNjEgfCAgICAgICB9KTsKICAgNjIgfAogICA2MyB8ICAgICAgIHRlc3QoImRpc3BsYXlzIGZpbGUgZm9ybWF0IEZBUSIsIGFzeW5jICgpID0+IHsKICAgNjQgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmZpbGVGb3JtYXRzKS50b0JlVmlzaWJsZSgpOwogICA2NSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuZmlsZUZvcm1hdHMpLnRvSGF2ZVRleHQoCiAgIDY2IHwgICAgICAgICAgICJXaGF0IGFyZSB0aGUga2luZHMgb2YgZmlsZSBmb3JtYXRzIEkgY2FuIHVwbG9hZCBpbnRvIE9uZU1BQyIsCiAgIDY3IHwgICAgICAgICApOwogICA2OCB8CiAgIDY5IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5maWxlRm9ybWF0cy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogICA3MCB8ICAgICAgIH0pOwogICA3MSB8CiAgIDcyIHwgICAgICAgdGVzdCgiZGlzcGxheXMgb25ib2FyZGluZyBtYXRlcmlhbHMgRkFRIiwgYXN5bmMgKCkgPT4gewogICA3MyB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uub25ib2FyZGluZ01hdGVyaWFscykudG9CZVZpc2libGUoKTsKICAgNzQgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLm9uYm9hcmRpbmdNYXRlcmlhbHMpLnRvSGF2ZVRleHQoIk9uYm9hcmRpbmcgTWF0ZXJpYWxzIik7CiAgIDc1IHwKICAgNzYgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLm9uYm9hcmRpbmdNYXRlcmlhbHMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAgNzcgfCAgICAgICB9KTsKICAgNzggfCAgICAgfSk7CiAgIDc5IHwKICAgODAgfCAgICAgdGVzdC5kZXNjcmliZSgiU3RhdGUgUGxhbiBBbWVuZG1lbnRzIChTUEFzKSIsICgpID0+IHsKICAgODEgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyBmb3JtYXQgdXNlZCB0byBlbnRlciBhIFNQQSBJRCBGQVEiLCBhc3luYyAoKSA9PiB7CiAgIDgyIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5zcGFJZEZvcm1hdCkudG9CZVZpc2libGUoKTsKICAgODMgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLnNwYUlkRm9ybWF0KS50b0hhdmVUZXh0KCJXaGF0IGZvcm1hdCBpcyB1c2VkIHRvIGVudGVyIGEgU1BBIElEPyIpOwogICA4NCB8CiAgIDg1IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5zcGFJZEZvcm1hdC5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogICA4NiB8ICAgICAgIH0pOwogICA4NyB8CiAgIDg4IHwgICAgICAgdGVzdCgiZGlzcGxheXMgTWVkaWNhaWQgU1BBIGF0dGFjaG1lbnRzIEZBUSIsIGFzeW5jICgpID0+IHsKICAgODkgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLm1lZGljYWlkU3BhQXR0YWNobWVudHMpLnRvQmVWaXNpYmxlKCk7CiAgIDkwIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5tZWRpY2FpZFNwYUF0dGFjaG1lbnRzKS50b0hhdmVUZXh0KAogICA5MSB8ICAgICAgICAgICAiV2hhdCBhcmUgdGhlIGF0dGFjaG1lbnRzIGZvciBhIE1lZGljYWlkIFNQQT8iLAogICA5MiB8ICAgICAgICAgKTsKICAgOTMgfAogICA5NCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UubWVkaWNhaWRTcGFBdHRhY2htZW50cy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogICA5NSB8ICAgICAgIH0pOwogICA5NiB8CiAgIDk3IHwgICAgICAgdGVzdCgiZGlzcGxheXMgYXR0YWNobWVudHMgcmVzcG9uc2UgdG8gTWVkaWNhaWQgUkFJIEZBUSIsIGFzeW5jICgpID0+IHsKICAgOTggfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLm1lZGljYWlkU3BhUmFpKS50b0JlVmlzaWJsZSgpOwogICA5OSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UubWVkaWNhaWRTcGFSYWkpLnRvSGF2ZVRleHQoCiAgMTAwIHwgICAgICAgICAgICJXaGF0IGFyZSB0aGUgYXR0YWNobWVudHMgZm9yIGEgTWVkaWNhaWQgcmVzcG9uc2UgdG8gUmVxdWVzdCBmb3IgQWRkaXRpb25hbCBJbmZvcm1hdGlvbiAoUkFJKT8iLAogIDEwMSB8ICAgICAgICAgKTsKICAxMDIgfAogIDEwMyB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UubWVkaWNhaWRTcGFSYWkubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAxMDQgfCAgICAgICB9KTsKICAxMDUgfAogIDEwNiB8ICAgICAgIHRlc3QoImRpc3BsYXlzIENISVAgU1BBIGF0dGFjaG1lbnRzIEZBUSIsIGFzeW5jICgpID0+IHsKPiAxMDcgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmNoaXBTcGFBdHRhY2htZW50cykudG9CZVZpc2libGUoKTsKICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXiBFcnJvcjogVGltZWQgb3V0IDUwMDBtcyB3YWl0aW5nIGZvciBleHBlY3QobG9jYXRvcikudG9CZVZpc2libGUoKQogIDEwOCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuY2hpcFNwYUF0dGFjaG1lbnRzKS50b0hhdmVUZXh0KAogIDEwOSB8ICAgICAgICAgICAiV2hhdCBhcmUgdGhlIGF0dGFjaG1lbnRzIGZvciBhIENISVAgU1BBPyIsCiAgMTEwIHwgICAgICAgICApOwogIDExMSB8CiAgMTEyIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5jaGlwU3BhQXR0YWNobWVudHMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAxMTMgfCAgICAgICB9KTsKICAxMTQgfAogIDExNSB8ICAgICAgIHRlc3QoImRpc3BsYXlzIGF0dGFjaG1lbnRzIHJlc3BvbnNlIHRvIENISVAgUkFJIEZBUSIsIGFzeW5jICgpID0+IHsKICAxMTYgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmNoaXBTcGFSYWkpLnRvQmVWaXNpYmxlKCk7CiAgMTE3IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5jaGlwU3BhUmFpKS50b0hhdmVUZXh0KAogIDExOCB8ICAgICAgICAgICAiV2hhdCBhcmUgdGhlIGF0dGFjaG1lbnRzIGZvciBhIENISVAgU1BBIHJlc3BvbnNlIHRvIFJlcXVlc3QgZm9yIEFkZGl0aW9uYWwgSW5mb3JtYXRpb24gKFJBSSk/IiwKICAxMTkgfCAgICAgICAgICk7CiAgMTIwIHwKICAxMjEgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmNoaXBTcGFSYWkubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAxMjIgfCAgICAgICB9KTsKICAxMjMgfAogIDEyNCB8ICAgICAgIHRlc3QoImRpc3BsYXlzIFBIRSBGQVEiLCBhc3luYyAoKSA9PiB7CiAgMTI1IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5wdWJsaWNIZWFsdGhFbWVyZ2VuY3kpLnRvQmVWaXNpYmxlKCk7CiAgMTI2IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5wdWJsaWNIZWFsdGhFbWVyZ2VuY3kpLnRvSGF2ZVRleHQoCiAgMTI3IHwgICAgICAgICAgICJDYW4gSSBzdWJtaXQgU1BBcyByZWxhdGluZyB0byB0aGUgUHVibGljIEhlYWx0aCBFbWVyZ2VuY3kgKFBIRSkgaW4gT25lTUFDPyIsCiAgMTI4IHwgICAgICAgICApOwogIDEyOSB8CiAgMTMwIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5wdWJsaWNIZWFsdGhFbWVyZ2VuY3kubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAxMzEgfCAgICAgICB9KTsKICAxMzIgfAogIDEzMyB8ICAgICAgIHRlc3QoImRpc3BsYXlzIHdpdGhkcmF3IGZvcm1hbCBSQUkgZm9yIE1lZGljYWlkIFNQQSBGQVEiLCBhc3luYyAoKSA9PiB7CiAgMTM0IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53aXRoZHJhd1NwYVJhaSkudG9CZVZpc2libGUoKTsKICAxMzUgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndpdGhkcmF3U3BhUmFpKS50b0hhdmVUZXh0KAogIDEzNiB8ICAgICAgICAgICAiSG93IGRvIEkgV2l0aGRyYXcgYSBGb3JtYWwgUkFJIFJlc3BvbnNlIGZvciBhIE1lZGljYWlkIFNQQT8iLAogIDEzNyB8ICAgICAgICAgKTsKICAxMzggfAogIDEzOSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2l0aGRyYXdTcGFSYWkubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAxNDAgfCAgICAgICB9KTsKICAxNDEgfAogIDE0MiB8ICAgICAgIHRlc3QoImRpc3BsYXlzIHdpdGhkcmF3IHBhY2thZ2UgZm9yIE1lZGljYWlkIFNQQSBGQVEiLCBhc3luYyAoKSA9PiB7CiAgMTQzIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53aXRoZHJhd1BhY2thZ2VTcGEpLnRvQmVWaXNpYmxlKCk7CiAgMTQ0IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53aXRoZHJhd1BhY2thZ2VTcGEpLnRvSGF2ZVRleHQoCiAgMTQ1IHwgICAgICAgICAgICJIb3cgZG8gSSBXaXRoZHJhdyBhIFBhY2thZ2UgZm9yIGEgTWVkaWNhaWQgU1BBPyIsCiAgMTQ2IHwgICAgICAgICApOwogIDE0NyB8CiAgMTQ4IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53aXRoZHJhd1BhY2thZ2VTcGEubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAxNDkgfCAgICAgICB9KTsKICAxNTAgfAogIDE1MSB8ICAgICAgIHRlc3QoImRpc3BsYXlzIHdpdGhkcmF3IGZvcm1hbCBSQUkgZm9yIENISVAgU1BBIEZBUSIsIGFzeW5jICgpID0+IHsKICAxNTIgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndpdGhkcmF3Q2hpcFNwYVJhaSkudG9CZVZpc2libGUoKTsKICAxNTMgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndpdGhkcmF3Q2hpcFNwYVJhaSkudG9IYXZlVGV4dCgKICAxNTQgfCAgICAgICAgICAgIkhvdyBkbyBJIFdpdGhkcmF3IGEgRm9ybWFsIFJBSSBSZXNwb25zZSBmb3IgYSBDSElQIFNQQT8iLAogIDE1NSB8ICAgICAgICAgKTsKICAxNTYgfAogIDE1NyB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2l0aGRyYXdDaGlwU3BhUmFpLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgMTU4IHwgICAgICAgfSk7CiAgMTU5IHwKICAxNjAgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyB3aXRoZHJhdyBwYWNrYWdlIGZvciBDSElQIFNQQSBGQVEiLCBhc3luYyAoKSA9PiB7CiAgMTYxIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53aXRoZHJhd1BhY2thZ2VDaGlwU3BhKS50b0JlVmlzaWJsZSgpOwogIDE2MiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2l0aGRyYXdQYWNrYWdlQ2hpcFNwYSkudG9IYXZlVGV4dCgKICAxNjMgfCAgICAgICAgICAgIkhvdyBkbyBJIFdpdGhkcmF3IGEgUGFja2FnZSBmb3IgYSBDSElQIFNQQT8iLAogIDE2NCB8ICAgICAgICAgKTsKICAxNjUgfAogIDE2NiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2l0aGRyYXdQYWNrYWdlQ2hpcFNwYS5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDE2NyB8ICAgICAgIH0pOwogIDE2OCB8CiAgMTY5IHwgICAgICAgdGVzdCgiZGlzcGxheXMgZG93bmxvYWQgQUJQIFNQQSB0ZW1wbGF0ZXMgRkFRIiwgYXN5bmMgKCkgPT4gewogIDE3MCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYWJwU3BhVGVtcGxhdGVzKS50b0JlVmlzaWJsZSgpOwogIDE3MSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYWJwU3BhVGVtcGxhdGVzKS50b0hhdmVUZXh0KAogIDE3MiB8ICAgICAgICAgICAiV2hlcmUgY2FuIEkgZG93bmxvYWQgTWVkaWNhaWQgQWx0ZXJuYXRpdmUgQmVuZWZpdCBQbGFuIChBQlApIFNQQSB0ZW1wbGF0ZXM/IiwKICAxNzMgfCAgICAgICAgICk7CiAgMTc0IHwKICAxNzUgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmFicFNwYVRlbXBsYXRlcy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDE3NiB8ICAgICAgIH0pOwogIDE3NyB8CiAgMTc4IHwgICAgICAgdGVzdCgiZGlzcGxheXMgZG93bmxvYWQgQUJQIFNQQSBpbXBsZW1lbnRhdGlvbiBndWlkZXMgRkFRIiwgYXN5bmMgKCkgPT4gewogIDE3OSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYWJwU3BhR3VpZGVzKS50b0JlVmlzaWJsZSgpOwogIDE4MCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYWJwU3BhR3VpZGVzKS50b0hhdmVUZXh0KAogIDE4MSB8ICAgICAgICAgICAiV2hlcmUgY2FuIEkgZG93bmxvYWQgTWVkaWNhaWQgQWx0ZXJuYXRpdmUgQmVuZWZpdCBQbGFuIChBQlApIFNQQSBpbXBsZW1lbnRhdGlvbiBndWlkZXM/IiwKICAxODIgfCAgICAgICAgICk7CiAgMTgzIHwKICAxODQgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmFicFNwYUd1aWRlcy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDE4NSB8ICAgICAgIH0pOwogIDE4NiB8CiAgMTg3IHwgICAgICAgdGVzdCgiZGlzcGxheXMgZG93bmxvYWQgTVBDIFNQQSB0ZW1wbGF0ZXMgRkFRIiwgYXN5bmMgKCkgPT4gewogIDE4OCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UubXBjU3BhVGVtcGxhdGVzKS50b0JlVmlzaWJsZSgpOwogIDE4OSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UubXBjU3BhVGVtcGxhdGVzKS50b0hhdmVUZXh0KAogIDE5MCB8ICAgICAgICAgICAiV2hlcmUgY2FuIEkgZG93bmxvYWQgTWVkaWNhaWQgUHJlbWl1bXMgYW5kIENvc3QgU2hhcmluZyAoTVBDKSBTUEEgdGVtcGxhdGVzPyIsCiAgMTkxIHwgICAgICAgICApOwogIDE5MiB8CiAgMTkzIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5tcGNTcGFUZW1wbGF0ZXMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAxOTQgfCAgICAgICB9KTsKICAxOTUgfAogIDE5NiB8ICAgICAgIHRlc3QoImRpc3BsYXlzIGRvd25sb2FkIE1QQyBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzIEZBUSIsIGFzeW5jICgpID0+IHsKICAxOTcgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLm1wY1NwYUd1aWRlcykudG9CZVZpc2libGUoKTsKICAxOTggfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLm1wY1NwYUd1aWRlcykudG9IYXZlVGV4dCgKICAxOTkgfCAgICAgICAgICAgIldoZXJlIGNhbiBJIGRvd25sb2FkIE1lZGljYWlkIFByZW1pdW1zIGFuZCBDb3N0IFNoYXJpbmcgKE1QQykgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcz8iLAogIDIwMCB8ICAgICAgICAgKTsKICAyMDEgfAogIDIwMiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UubXBjU3BhR3VpZGVzLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgMjAzIHwgICAgICAgfSk7CiAgMjA0IHwKICAyMDUgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyBkb3dubG9hZCBDSElQIGVsaWdpYmlsaXR5IFNQQSB0ZW1wbGF0ZXMgRkFRIiwgYXN5bmMgKCkgPT4gewogIDIwNiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuY2hpcFNwYVRlbXBsYXRlcykudG9CZVZpc2libGUoKTsKICAyMDcgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmNoaXBTcGFUZW1wbGF0ZXMpLnRvSGF2ZVRleHQoCmBgYA=="
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 50,
                                "line": 107
                              }
                            },
                            {
                              "workerIndex": 34,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5640,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:107:50",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#chip-spa-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 50,
                                  "line": 107
                                },
                                "snippet": "\u001b[0m \u001b[90m 105 |\u001b[39m\n \u001b[90m 106 |\u001b[39m       test(\u001b[32m\"displays CHIP SPA attachments FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 107 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaAttachments)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 108 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaAttachments)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 109 |\u001b[39m           \u001b[32m\"What are the attachments for a CHIP SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 110 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 50,
                                    "line": 107
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-attachments')\u001b[22m\n\n\n  105 |\n  106 |       test(\"displays CHIP SPA attachments FAQ\", async () => {\n> 107 |         await expect(faqPage.chipSpaAttachments).toBeVisible();\n      |                                                  ^\n  108 |         await expect(faqPage.chipSpaAttachments).toHaveText(\n  109 |           \"What are the attachments for a CHIP SPA?\",\n  110 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:107:50"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:30:26.042Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-ce894-ys-CHIP-SPA-attachments-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 50,
                                "line": 107
                              }
                            },
                            {
                              "workerIndex": 35,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5481,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:107:50",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#chip-spa-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 50,
                                  "line": 107
                                },
                                "snippet": "\u001b[0m \u001b[90m 105 |\u001b[39m\n \u001b[90m 106 |\u001b[39m       test(\u001b[32m\"displays CHIP SPA attachments FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 107 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaAttachments)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 108 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaAttachments)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 109 |\u001b[39m           \u001b[32m\"What are the attachments for a CHIP SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 110 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 50,
                                    "line": 107
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-attachments')\u001b[22m\n\n\n  105 |\n  106 |       test(\"displays CHIP SPA attachments FAQ\", async () => {\n> 107 |         await expect(faqPage.chipSpaAttachments).toBeVisible();\n      |                                                  ^\n  108 |         await expect(faqPage.chipSpaAttachments).toHaveText(\n  109 |           \"What are the attachments for a CHIP SPA?\",\n  110 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:107:50"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:30:32.642Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 50,
                                "line": 107
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-7297c9c7eb95015076b0",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 106,
                      "column": 7
                    },
                    {
                      "title": "displays attachments response to CHIP RAI FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 36,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5487,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-rai-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-rai-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:116:42",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-rai-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#chip-spa-rai-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 42,
                                  "line": 116
                                },
                                "snippet": "\u001b[0m \u001b[90m 114 |\u001b[39m\n \u001b[90m 115 |\u001b[39m       test(\u001b[32m\"displays attachments response to CHIP RAI FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 116 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaRai)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 117 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaRai)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 118 |\u001b[39m           \u001b[32m\"What are the attachments for a CHIP SPA response to Request for Additional Information (RAI)?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 119 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 42,
                                    "line": 116
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-rai-attachments')\u001b[22m\n\n\n  114 |\n  115 |       test(\"displays attachments response to CHIP RAI FAQ\", async () => {\n> 116 |         await expect(faqPage.chipSpaRai).toBeVisible();\n      |                                          ^\n  117 |         await expect(faqPage.chipSpaRai).toHaveText(\n  118 |           \"What are the attachments for a CHIP SPA response to Request for Additional Information (RAI)?\",\n  119 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:116:42"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:30:39.039Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 42,
                                "line": 116
                              }
                            },
                            {
                              "workerIndex": 37,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5632,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-rai-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-rai-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:116:42",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-rai-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#chip-spa-rai-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 42,
                                  "line": 116
                                },
                                "snippet": "\u001b[0m \u001b[90m 114 |\u001b[39m\n \u001b[90m 115 |\u001b[39m       test(\u001b[32m\"displays attachments response to CHIP RAI FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 116 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaRai)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 117 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaRai)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 118 |\u001b[39m           \u001b[32m\"What are the attachments for a CHIP SPA response to Request for Additional Information (RAI)?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 119 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 42,
                                    "line": 116
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-rai-attachments')\u001b[22m\n\n\n  114 |\n  115 |       test(\"displays attachments response to CHIP RAI FAQ\", async () => {\n> 116 |         await expect(faqPage.chipSpaRai).toBeVisible();\n      |                                          ^\n  117 |         await expect(faqPage.chipSpaRai).toHaveText(\n  118 |           \"What are the attachments for a CHIP SPA response to Request for Additional Information (RAI)?\",\n  119 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:116:42"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:30:45.436Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-7136a-ts-response-to-CHIP-RAI-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 42,
                                "line": 116
                              }
                            },
                            {
                              "workerIndex": 38,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5525,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-rai-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-rai-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:116:42",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-rai-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#chip-spa-rai-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 42,
                                  "line": 116
                                },
                                "snippet": "\u001b[0m \u001b[90m 114 |\u001b[39m\n \u001b[90m 115 |\u001b[39m       test(\u001b[32m\"displays attachments response to CHIP RAI FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 116 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaRai)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 117 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaRai)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 118 |\u001b[39m           \u001b[32m\"What are the attachments for a CHIP SPA response to Request for Additional Information (RAI)?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 119 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 42,
                                    "line": 116
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-rai-attachments')\u001b[22m\n\n\n  114 |\n  115 |       test(\"displays attachments response to CHIP RAI FAQ\", async () => {\n> 116 |         await expect(faqPage.chipSpaRai).toBeVisible();\n      |                                          ^\n  117 |         await expect(faqPage.chipSpaRai).toHaveText(\n  118 |           \"What are the attachments for a CHIP SPA response to Request for Additional Information (RAI)?\",\n  119 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:116:42"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:30:52.059Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 42,
                                "line": 116
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-ae5f05ae96c93f4b73ae",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 115,
                      "column": 7
                    },
                    {
                      "title": "displays PHE FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 39,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5479,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#public-health-emergency')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#public-health-emergency')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#public-health-emergency')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#public-health-emergency')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:125:53",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#public-health-emergency')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#public-health-emergency')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#public-health-emergency')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 53,
                                  "line": 125
                                },
                                "snippet": "\u001b[0m \u001b[90m 123 |\u001b[39m\n \u001b[90m 124 |\u001b[39m       test(\u001b[32m\"displays PHE FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 125 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mpublicHealthEmergency)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 126 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mpublicHealthEmergency)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 127 |\u001b[39m           \u001b[32m\"Can I submit SPAs relating to the Public Health Emergency (PHE) in OneMAC?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 128 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 53,
                                    "line": 125
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#public-health-emergency')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#public-health-emergency')\u001b[22m\n\n\n  123 |\n  124 |       test(\"displays PHE FAQ\", async () => {\n> 125 |         await expect(faqPage.publicHealthEmergency).toBeVisible();\n      |                                                     ^\n  126 |         await expect(faqPage.publicHealthEmergency).toHaveText(\n  127 |           \"Can I submit SPAs relating to the Public Health Emergency (PHE) in OneMAC?\",\n  128 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:125:53"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:30:58.516Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 53,
                                "line": 125
                              }
                            },
                            {
                              "workerIndex": 40,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5637,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#public-health-emergency')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#public-health-emergency')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#public-health-emergency')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#public-health-emergency')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:125:53",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#public-health-emergency')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#public-health-emergency')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#public-health-emergency')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 53,
                                  "line": 125
                                },
                                "snippet": "\u001b[0m \u001b[90m 123 |\u001b[39m\n \u001b[90m 124 |\u001b[39m       test(\u001b[32m\"displays PHE FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 125 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mpublicHealthEmergency)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 126 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mpublicHealthEmergency)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 127 |\u001b[39m           \u001b[32m\"Can I submit SPAs relating to the Public Health Emergency (PHE) in OneMAC?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 128 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 53,
                                    "line": 125
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#public-health-emergency')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#public-health-emergency')\u001b[22m\n\n\n  123 |\n  124 |       test(\"displays PHE FAQ\", async () => {\n> 125 |         await expect(faqPage.publicHealthEmergency).toBeVisible();\n      |                                                     ^\n  126 |         await expect(faqPage.publicHealthEmergency).toHaveText(\n  127 |           \"Can I submit SPAs relating to the Public Health Emergency (PHE) in OneMAC?\",\n  128 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:125:53"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:31:04.907Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-0e123-ments-SPAs-displays-PHE-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 53,
                                "line": 125
                              }
                            },
                            {
                              "workerIndex": 41,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5481,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#public-health-emergency')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#public-health-emergency')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#public-health-emergency')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#public-health-emergency')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:125:53",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#public-health-emergency')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#public-health-emergency')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#public-health-emergency')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 53,
                                  "line": 125
                                },
                                "snippet": "\u001b[0m \u001b[90m 123 |\u001b[39m\n \u001b[90m 124 |\u001b[39m       test(\u001b[32m\"displays PHE FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 125 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mpublicHealthEmergency)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 126 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mpublicHealthEmergency)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 127 |\u001b[39m           \u001b[32m\"Can I submit SPAs relating to the Public Health Emergency (PHE) in OneMAC?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 128 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 53,
                                    "line": 125
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#public-health-emergency')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#public-health-emergency')\u001b[22m\n\n\n  123 |\n  124 |       test(\"displays PHE FAQ\", async () => {\n> 125 |         await expect(faqPage.publicHealthEmergency).toBeVisible();\n      |                                                     ^\n  126 |         await expect(faqPage.publicHealthEmergency).toHaveText(\n  127 |           \"Can I submit SPAs relating to the Public Health Emergency (PHE) in OneMAC?\",\n  128 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:125:53"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:31:11.500Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 53,
                                "line": 125
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-22d899400d99d98361f6",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 124,
                      "column": 7
                    },
                    {
                      "title": "displays withdraw formal RAI for Medicaid SPA FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 42,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5473,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-spa-rai-response')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-spa-rai-response')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:134:46",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-spa-rai-response')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-spa-rai-response')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 46,
                                  "line": 134
                                },
                                "snippet": "\u001b[0m \u001b[90m 132 |\u001b[39m\n \u001b[90m 133 |\u001b[39m       test(\u001b[32m\"displays withdraw formal RAI for Medicaid SPA FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 134 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawSpaRai)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 135 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawSpaRai)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 136 |\u001b[39m           \u001b[32m\"How do I Withdraw a Formal RAI Response for a Medicaid SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 137 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 46,
                                    "line": 134
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-spa-rai-response')\u001b[22m\n\n\n  132 |\n  133 |       test(\"displays withdraw formal RAI for Medicaid SPA FAQ\", async () => {\n> 134 |         await expect(faqPage.withdrawSpaRai).toBeVisible();\n      |                                              ^\n  135 |         await expect(faqPage.withdrawSpaRai).toHaveText(\n  136 |           \"How do I Withdraw a Formal RAI Response for a Medicaid SPA?\",\n  137 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:134:46"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:31:17.891Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 46,
                                "line": 134
                              }
                            },
                            {
                              "workerIndex": 43,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5658,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-spa-rai-response')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-spa-rai-response')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:134:46",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-spa-rai-response')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-spa-rai-response')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 46,
                                  "line": 134
                                },
                                "snippet": "\u001b[0m \u001b[90m 132 |\u001b[39m\n \u001b[90m 133 |\u001b[39m       test(\u001b[32m\"displays withdraw formal RAI for Medicaid SPA FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 134 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawSpaRai)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 135 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawSpaRai)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 136 |\u001b[39m           \u001b[32m\"How do I Withdraw a Formal RAI Response for a Medicaid SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 137 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 46,
                                    "line": 134
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-spa-rai-response')\u001b[22m\n\n\n  132 |\n  133 |       test(\"displays withdraw formal RAI for Medicaid SPA FAQ\", async () => {\n> 134 |         await expect(faqPage.withdrawSpaRai).toBeVisible();\n      |                                              ^\n  135 |         await expect(faqPage.withdrawSpaRai).toHaveText(\n  136 |           \"How do I Withdraw a Formal RAI Response for a Medicaid SPA?\",\n  137 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:134:46"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:31:24.274Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-25c25-al-RAI-for-Medicaid-SPA-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 46,
                                "line": 134
                              }
                            },
                            {
                              "workerIndex": 44,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5476,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-spa-rai-response')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-spa-rai-response')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:134:46",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-spa-rai-response')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-spa-rai-response')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 46,
                                  "line": 134
                                },
                                "snippet": "\u001b[0m \u001b[90m 132 |\u001b[39m\n \u001b[90m 133 |\u001b[39m       test(\u001b[32m\"displays withdraw formal RAI for Medicaid SPA FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 134 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawSpaRai)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 135 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawSpaRai)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 136 |\u001b[39m           \u001b[32m\"How do I Withdraw a Formal RAI Response for a Medicaid SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 137 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 46,
                                    "line": 134
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-spa-rai-response')\u001b[22m\n\n\n  132 |\n  133 |       test(\"displays withdraw formal RAI for Medicaid SPA FAQ\", async () => {\n> 134 |         await expect(faqPage.withdrawSpaRai).toBeVisible();\n      |                                              ^\n  135 |         await expect(faqPage.withdrawSpaRai).toHaveText(\n  136 |           \"How do I Withdraw a Formal RAI Response for a Medicaid SPA?\",\n  137 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:134:46"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:31:30.888Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 46,
                                "line": 134
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-0f64481b59219a5bbaa7",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 133,
                      "column": 7
                    },
                    {
                      "title": "displays withdraw package for Medicaid SPA FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 45,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5483,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-spa')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-spa')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:143:50",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-spa')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-package-spa')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 50,
                                  "line": 143
                                },
                                "snippet": "\u001b[0m \u001b[90m 141 |\u001b[39m\n \u001b[90m 142 |\u001b[39m       test(\u001b[32m\"displays withdraw package for Medicaid SPA FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 143 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageSpa)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 144 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageSpa)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 145 |\u001b[39m           \u001b[32m\"How do I Withdraw a Package for a Medicaid SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 146 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 50,
                                    "line": 143
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-spa')\u001b[22m\n\n\n  141 |\n  142 |       test(\"displays withdraw package for Medicaid SPA FAQ\", async () => {\n> 143 |         await expect(faqPage.withdrawPackageSpa).toBeVisible();\n      |                                                  ^\n  144 |         await expect(faqPage.withdrawPackageSpa).toHaveText(\n  145 |           \"How do I Withdraw a Package for a Medicaid SPA?\",\n  146 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:143:50"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:31:37.272Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 50,
                                "line": 143
                              }
                            },
                            {
                              "workerIndex": 46,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5641,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-spa')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-spa')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:143:50",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-spa')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-package-spa')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 50,
                                  "line": 143
                                },
                                "snippet": "\u001b[0m \u001b[90m 141 |\u001b[39m\n \u001b[90m 142 |\u001b[39m       test(\u001b[32m\"displays withdraw package for Medicaid SPA FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 143 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageSpa)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 144 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageSpa)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 145 |\u001b[39m           \u001b[32m\"How do I Withdraw a Package for a Medicaid SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 146 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 50,
                                    "line": 143
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-spa')\u001b[22m\n\n\n  141 |\n  142 |       test(\"displays withdraw package for Medicaid SPA FAQ\", async () => {\n> 143 |         await expect(faqPage.withdrawPackageSpa).toBeVisible();\n      |                                                  ^\n  144 |         await expect(faqPage.withdrawPackageSpa).toHaveText(\n  145 |           \"How do I Withdraw a Package for a Medicaid SPA?\",\n  146 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:143:50"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:31:43.658Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-2901a-ackage-for-Medicaid-SPA-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 50,
                                "line": 143
                              }
                            },
                            {
                              "workerIndex": 47,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5477,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-spa')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-spa')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:143:50",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-spa')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-package-spa')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 50,
                                  "line": 143
                                },
                                "snippet": "\u001b[0m \u001b[90m 141 |\u001b[39m\n \u001b[90m 142 |\u001b[39m       test(\u001b[32m\"displays withdraw package for Medicaid SPA FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 143 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageSpa)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 144 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageSpa)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 145 |\u001b[39m           \u001b[32m\"How do I Withdraw a Package for a Medicaid SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 146 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 50,
                                    "line": 143
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-spa')\u001b[22m\n\n\n  141 |\n  142 |       test(\"displays withdraw package for Medicaid SPA FAQ\", async () => {\n> 143 |         await expect(faqPage.withdrawPackageSpa).toBeVisible();\n      |                                                  ^\n  144 |         await expect(faqPage.withdrawPackageSpa).toHaveText(\n  145 |           \"How do I Withdraw a Package for a Medicaid SPA?\",\n  146 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:143:50"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:31:50.283Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 50,
                                "line": 143
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-bdda65491865e132ee38",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 142,
                      "column": 7
                    },
                    {
                      "title": "displays withdraw formal RAI for CHIP SPA FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 48,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5504,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-chip-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-chip-spa-rai-response')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-chip-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-chip-spa-rai-response')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:152:50",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-chip-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-chip-spa-rai-response')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-chip-spa-rai-response')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 50,
                                  "line": 152
                                },
                                "snippet": "\u001b[0m \u001b[90m 150 |\u001b[39m\n \u001b[90m 151 |\u001b[39m       test(\u001b[32m\"displays withdraw formal RAI for CHIP SPA FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 152 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawChipSpaRai)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 153 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawChipSpaRai)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 154 |\u001b[39m           \u001b[32m\"How do I Withdraw a Formal RAI Response for a CHIP SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 155 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 50,
                                    "line": 152
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-chip-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-chip-spa-rai-response')\u001b[22m\n\n\n  150 |\n  151 |       test(\"displays withdraw formal RAI for CHIP SPA FAQ\", async () => {\n> 152 |         await expect(faqPage.withdrawChipSpaRai).toBeVisible();\n      |                                                  ^\n  153 |         await expect(faqPage.withdrawChipSpaRai).toHaveText(\n  154 |           \"How do I Withdraw a Formal RAI Response for a CHIP SPA?\",\n  155 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:152:50"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:31:56.669Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 50,
                                "line": 152
                              }
                            },
                            {
                              "workerIndex": 49,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5661,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-chip-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-chip-spa-rai-response')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-chip-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-chip-spa-rai-response')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:152:50",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-chip-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-chip-spa-rai-response')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-chip-spa-rai-response')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 50,
                                  "line": 152
                                },
                                "snippet": "\u001b[0m \u001b[90m 150 |\u001b[39m\n \u001b[90m 151 |\u001b[39m       test(\u001b[32m\"displays withdraw formal RAI for CHIP SPA FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 152 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawChipSpaRai)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 153 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawChipSpaRai)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 154 |\u001b[39m           \u001b[32m\"How do I Withdraw a Formal RAI Response for a CHIP SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 155 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 50,
                                    "line": 152
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-chip-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-chip-spa-rai-response')\u001b[22m\n\n\n  150 |\n  151 |       test(\"displays withdraw formal RAI for CHIP SPA FAQ\", async () => {\n> 152 |         await expect(faqPage.withdrawChipSpaRai).toBeVisible();\n      |                                                  ^\n  153 |         await expect(faqPage.withdrawChipSpaRai).toHaveText(\n  154 |           \"How do I Withdraw a Formal RAI Response for a CHIP SPA?\",\n  155 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:152:50"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:32:03.065Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-bdd66-formal-RAI-for-CHIP-SPA-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 50,
                                "line": 152
                              }
                            },
                            {
                              "workerIndex": 50,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5482,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-chip-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-chip-spa-rai-response')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-chip-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-chip-spa-rai-response')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:152:50",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-chip-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-chip-spa-rai-response')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-chip-spa-rai-response')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 50,
                                  "line": 152
                                },
                                "snippet": "\u001b[0m \u001b[90m 150 |\u001b[39m\n \u001b[90m 151 |\u001b[39m       test(\u001b[32m\"displays withdraw formal RAI for CHIP SPA FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 152 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawChipSpaRai)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 153 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawChipSpaRai)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 154 |\u001b[39m           \u001b[32m\"How do I Withdraw a Formal RAI Response for a CHIP SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 155 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 50,
                                    "line": 152
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-chip-spa-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-chip-spa-rai-response')\u001b[22m\n\n\n  150 |\n  151 |       test(\"displays withdraw formal RAI for CHIP SPA FAQ\", async () => {\n> 152 |         await expect(faqPage.withdrawChipSpaRai).toBeVisible();\n      |                                                  ^\n  153 |         await expect(faqPage.withdrawChipSpaRai).toHaveText(\n  154 |           \"How do I Withdraw a Formal RAI Response for a CHIP SPA?\",\n  155 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:152:50"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:32:09.678Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 50,
                                "line": 152
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-7bddfed0ac94c0971c5c",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 151,
                      "column": 7
                    },
                    {
                      "title": "displays withdraw package for CHIP SPA FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 51,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5481,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-chip-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-chip-spa')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-chip-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-chip-spa')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:161:54",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-chip-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-chip-spa')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-package-chip-spa')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 54,
                                  "line": 161
                                },
                                "snippet": "\u001b[0m \u001b[90m 159 |\u001b[39m\n \u001b[90m 160 |\u001b[39m       test(\u001b[32m\"displays withdraw package for CHIP SPA FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 161 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageChipSpa)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 162 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageChipSpa)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 163 |\u001b[39m           \u001b[32m\"How do I Withdraw a Package for a CHIP SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 164 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 54,
                                    "line": 161
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-chip-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-chip-spa')\u001b[22m\n\n\n  159 |\n  160 |       test(\"displays withdraw package for CHIP SPA FAQ\", async () => {\n> 161 |         await expect(faqPage.withdrawPackageChipSpa).toBeVisible();\n      |                                                      ^\n  162 |         await expect(faqPage.withdrawPackageChipSpa).toHaveText(\n  163 |           \"How do I Withdraw a Package for a CHIP SPA?\",\n  164 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:161:54"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:32:16.074Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 54,
                                "line": 161
                              }
                            },
                            {
                              "workerIndex": 52,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5849,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#withdraw-package-chip-spa')\nExpected string: \u001b[32m\"How do I Withdraw a Package for a CHIP SPA?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-chip-spa')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#withdraw-package-chip-spa')\nExpected string: \u001b[32m\"How do I Withdraw a Package for a CHIP SPA?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-chip-spa')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:162:54",
                                "matcherResult": {
                                  "name": "toHaveText",
                                  "expected": "How do I Withdraw a Package for a CHIP SPA?",
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#withdraw-package-chip-spa')\nExpected string: \u001b[32m\"How do I Withdraw a Package for a CHIP SPA?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-chip-spa')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "log": [
                                    "  - expect.toHaveText with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-package-chip-spa')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 54,
                                  "line": 162
                                },
                                "snippet": "\u001b[0m \u001b[90m 160 |\u001b[39m       test(\u001b[32m\"displays withdraw package for CHIP SPA FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 161 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageChipSpa)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 162 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageChipSpa)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m     |\u001b[39m                                                      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 163 |\u001b[39m           \u001b[32m\"How do I Withdraw a Package for a CHIP SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 164 |\u001b[39m         )\u001b[33m;\u001b[39m\n \u001b[90m 165 |\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 54,
                                    "line": 162
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#withdraw-package-chip-spa')\nExpected string: \u001b[32m\"How do I Withdraw a Package for a CHIP SPA?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-chip-spa')\u001b[22m\n\n\n  160 |       test(\"displays withdraw package for CHIP SPA FAQ\", async () => {\n  161 |         await expect(faqPage.withdrawPackageChipSpa).toBeVisible();\n> 162 |         await expect(faqPage.withdrawPackageChipSpa).toHaveText(\n      |                                                      ^\n  163 |           \"How do I Withdraw a Package for a CHIP SPA?\",\n  164 |         );\n  165 |\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:162:54"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:32:22.467Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-907a9-aw-package-for-CHIP-SPA-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 54,
                                "line": 162
                              }
                            },
                            {
                              "workerIndex": 53,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5477,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-chip-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-chip-spa')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-chip-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-chip-spa')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:161:54",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-chip-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-chip-spa')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-package-chip-spa')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 54,
                                  "line": 161
                                },
                                "snippet": "\u001b[0m \u001b[90m 159 |\u001b[39m\n \u001b[90m 160 |\u001b[39m       test(\u001b[32m\"displays withdraw package for CHIP SPA FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 161 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageChipSpa)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                      \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 162 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageChipSpa)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 163 |\u001b[39m           \u001b[32m\"How do I Withdraw a Package for a CHIP SPA?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 164 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 54,
                                    "line": 161
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-chip-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-chip-spa')\u001b[22m\n\n\n  159 |\n  160 |       test(\"displays withdraw package for CHIP SPA FAQ\", async () => {\n> 161 |         await expect(faqPage.withdrawPackageChipSpa).toBeVisible();\n      |                                                      ^\n  162 |         await expect(faqPage.withdrawPackageChipSpa).toHaveText(\n  163 |           \"How do I Withdraw a Package for a CHIP SPA?\",\n  164 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:161:54"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:32:29.280Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": "IyBJbnN0cnVjdGlvbnMKCi0gRm9sbG93aW5nIFBsYXl3cmlnaHQgdGVzdCBmYWlsZWQuCi0gRXhwbGFpbiB3aHksIGJlIGNvbmNpc2UsIHJlc3BlY3QgUGxheXdyaWdodCBiZXN0IHByYWN0aWNlcy4KLSBQcm92aWRlIGEgc25pcHBldCBvZiBjb2RlIHdpdGggdGhlIGZpeCwgaWYgcG9zc2libGUuCgojIFRlc3QgaW5mbwoKLSBOYW1lOiBGQVEgcGFnZSA+PiBVSSB2YWxpZGF0aW9uID4+IFN0YXRlIFBsYW4gQW1lbmRtZW50cyAoU1BBcykgPj4gZGlzcGxheXMgd2l0aGRyYXcgcGFja2FnZSBmb3IgQ0hJUCBTUEEgRkFRCi0gTG9jYXRpb246IC9ob21lL3J1bm5lci93b3JrL21hY3Byby1tYWtvL21hY3Byby1tYWtvL3Rlc3QvZTJlL2ZhcS9mYXEuc3BlYy50czoxNjA6NwoKIyBFcnJvciBkZXRhaWxzCgpgYGAKRXJyb3I6IFRpbWVkIG91dCA1MDAwbXMgd2FpdGluZyBmb3IgZXhwZWN0KGxvY2F0b3IpLnRvQmVWaXNpYmxlKCkKCkxvY2F0b3I6IGxvY2F0b3IoJyN3aXRoZHJhdy1wYWNrYWdlLWNoaXAtc3BhJykKRXhwZWN0ZWQ6IHZpc2libGUKUmVjZWl2ZWQ6IDxlbGVtZW50KHMpIG5vdCBmb3VuZD4KQ2FsbCBsb2c6CiAgLSBleHBlY3QudG9CZVZpc2libGUgd2l0aCB0aW1lb3V0IDUwMDBtcwogIC0gd2FpdGluZyBmb3IgbG9jYXRvcignI3dpdGhkcmF3LXBhY2thZ2UtY2hpcC1zcGEnKQoKICAgIGF0IC9ob21lL3J1bm5lci93b3JrL21hY3Byby1tYWtvL21hY3Byby1tYWtvL3Rlc3QvZTJlL2ZhcS9mYXEuc3BlYy50czoxNjE6NTQKYGBgCgojIFBhZ2Ugc25hcHNob3QKCmBgYHlhbWwKLSBiYW5uZXI6CiAgLSBpbWcgIkEgVW5pdGVkIFN0YXRlcyBGbGFnIGljb24iCiAgLSBwYXJhZ3JhcGg6IEFuIG9mZmljaWFsIHdlYnNpdGUgb2YgdGhlIFVuaXRlZCBTdGF0ZXMgZ292ZXJubWVudAogIC0gYnV0dG9uICJIZXJlJ3MgaG93IHlvdSBrbm93IjoKICAgIC0gdGV4dDogSGVyZSdzIGhvdyB5b3Uga25vdwogICAgLSBpbWcKLSBuYXZpZ2F0aW9uOgogIC0gaW1nICJvbmVtYWMgc2l0ZSBsb2dvIgotIG1haW46CiAgLSBoZWFkaW5nICJPbmVNQUMgU3VwcG9ydCIgW2xldmVsPTFdCiAgLSBoZWFkaW5nICJUb3BpY3MiIFtsZXZlbD0yXQogIC0gaGVhZGluZyAiR2VuZXJhbCIgW2xldmVsPTNdOgogICAgLSBidXR0b24gIkdlbmVyYWwiOgogICAgICAtIHRleHQ6IEdlbmVyYWwKICAgICAgLSBpbWcKICAtIGhlYWRpbmcgIlBhY2thZ2UgYWN0aW9ucyIgW2xldmVsPTNdOgogICAgLSBidXR0b24gIlBhY2thZ2UgYWN0aW9ucyI6CiAgICAgIC0gdGV4dDogUGFja2FnZSBhY3Rpb25zCiAgICAgIC0gaW1nCiAgLSBoZWFkaW5nICJJbXBsZW1lbnRhdGlvbiBndWlkZXMiIFtsZXZlbD0zXToKICAgIC0gYnV0dG9uICJJbXBsZW1lbnRhdGlvbiBndWlkZXMiOgogICAgICAtIHRleHQ6IEltcGxlbWVudGF0aW9uIGd1aWRlcwogICAgICAtIGltZwogIC0gaGVhZGluZyAiQWNjZXNzICYgcm9sZXMiIFtsZXZlbD0zXToKICAgIC0gYnV0dG9uICJBY2Nlc3MgJiByb2xlcyI6CiAgICAgIC0gdGV4dDogQWNjZXNzICYgcm9sZXMKICAgICAgLSBpbWcKICAtIGhlYWRpbmcgIlVzZXIgcHJvZmlsZSIgW2xldmVsPTNdOgogICAgLSBidXR0b24gIlVzZXIgcHJvZmlsZSI6CiAgICAgIC0gdGV4dDogVXNlciBwcm9maWxlCiAgICAgIC0gaW1nCiAgLSBoZWFkaW5nICJHbG9zc2FyeSIgW2xldmVsPTNdOgogICAgLSBidXR0b24gIkdsb3NzYXJ5IjoKICAgICAgLSB0ZXh0OiBHbG9zc2FyeQogICAgICAtIGltZwogIC0gaGVhZGluZyAiTm90IGZpbmRpbmcgdGhlIGluZm9ybWF0aW9uIHlvdSBuZWVkPyIgW2xldmVsPTNdCiAgLSBwYXJhZ3JhcGg6IENvbnRhY3QgdGhlIEhlbHAgRGVzawogIC0gcGFyYWdyYXBoOgogICAgLSB0ZXh0OiAiRW1haWw6IgogICAgLSBsaW5rICJPbmVNQUNfSGVscGRlc2tAQ01TLmhocy5nb3YiCiAgLSBwYXJhZ3JhcGg6CiAgICAtIHRleHQ6IExlYXZlIGEgbWVzc2FnZSBhdAogICAgLSBsaW5rICIoODgzKSAyMjgtMjU0MCIKICAtIGFydGljbGU6CiAgICAtIGhlYWRpbmcgIkZyZXF1ZW50bHkgYXNrZWQgcXVlc3Rpb25zIChGQVFzKSIgW2xldmVsPTJdCiAgICAtIGJ1dHRvbiAiRXhwYW5kIGFsbCI6CiAgICAgIC0gdGV4dDogRXhwYW5kIGFsbAogICAgICAtIGltZwogICAgLSBzZXBhcmF0b3IKICAgIC0gaGVhZGluZyAiU2hvdWxkIEkgdXNlIE9uZU1BQyBmb3IgbXkgc3RhdGUncyBzdWJtaXNzaW9uPyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiU2hvdWxkIEkgdXNlIE9uZU1BQyBmb3IgbXkgc3RhdGUncyBzdWJtaXNzaW9uPyI6CiAgICAgICAgLSB0ZXh0OiBTaG91bGQgSSB1c2UgT25lTUFDIGZvciBteSBzdGF0ZSdzIHN1Ym1pc3Npb24/CiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiSXMgd2hhdCBJIHN1Ym1pdCBpbiBPbmVNQUMgY29uc2lkZXJlZCB0aGUgb2ZmaWNpYWwgc3RhdGUgc3VibWlzc2lvbj8iIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIklzIHdoYXQgSSBzdWJtaXQgaW4gT25lTUFDIGNvbnNpZGVyZWQgdGhlIG9mZmljaWFsIHN0YXRlIHN1Ym1pc3Npb24/IjoKICAgICAgICAtIHRleHQ6IElzIHdoYXQgSSBzdWJtaXQgaW4gT25lTUFDIGNvbnNpZGVyZWQgdGhlIG9mZmljaWFsIHN0YXRlIHN1Ym1pc3Npb24/CiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiV2hhdCBzaG91bGQgSSBkbyBpZiBJIGRvbuKAmXQgZ2V0IGEgY29uZmlybWF0aW9uIGVtYWlsPyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiV2hhdCBzaG91bGQgSSBkbyBpZiBJIGRvbuKAmXQgZ2V0IGEgY29uZmlybWF0aW9uIGVtYWlsPyI6CiAgICAgICAgLSB0ZXh0OiBXaGF0IHNob3VsZCBJIGRvIGlmIEkgZG9u4oCZdCBnZXQgYSBjb25maXJtYXRpb24gZW1haWw/CiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiV2h5IGRvZXMgdGhlIHN0YXR1cyBvZiBteSB0ZW1wb3JhcnkgZXh0ZW5zaW9uIHJlcXVlc3QgY29udGludWUgdG8gc2hvdyBhcyDigJxzdWJtaXR0ZWTigJ0/IiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJXaHkgZG9lcyB0aGUgc3RhdHVzIG9mIG15IHRlbXBvcmFyeSBleHRlbnNpb24gcmVxdWVzdCBjb250aW51ZSB0byBzaG93IGFzIOKAnHN1Ym1pdHRlZOKAnT8iOgogICAgICAgIC0gdGV4dDogV2h5IGRvZXMgdGhlIHN0YXR1cyBvZiBteSB0ZW1wb3JhcnkgZXh0ZW5zaW9uIHJlcXVlc3QgY29udGludWUgdG8gc2hvdyBhcyDigJxzdWJtaXR0ZWTigJ0/CiAgICAgICAgLSBpbWcKICAtIGFydGljbGU6CiAgICAtIGhlYWRpbmcgIkdlbmVyYWwiIFtsZXZlbD0yXQogICAgLSBzZXBhcmF0b3IKICAgIC0gaGVhZGluZyAiU2VhcmNoIGZvciBwYWNrYWdlIElEIG9yIHN1Ym1pdHRlciBuYW1lIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJTZWFyY2ggZm9yIHBhY2thZ2UgSUQgb3Igc3VibWl0dGVyIG5hbWUiOgogICAgICAgIC0gdGV4dDogU2VhcmNoIGZvciBwYWNrYWdlIElEIG9yIHN1Ym1pdHRlciBuYW1lCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiQ3VzdG9taXplIHlvdXIgZGFzaGJvYXJkIHZpZXciIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIkN1c3RvbWl6ZSB5b3VyIGRhc2hib2FyZCB2aWV3IjoKICAgICAgICAtIHRleHQ6IEN1c3RvbWl6ZSB5b3VyIGRhc2hib2FyZCB2aWV3CiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiVmlldyBzdWJtaXNzaW9uIHBhY2thZ2UiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlZpZXcgc3VibWlzc2lvbiBwYWNrYWdlIjoKICAgICAgICAtIHRleHQ6IFZpZXcgc3VibWlzc2lvbiBwYWNrYWdlCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiQWNjZXB0ZWQgZmlsZSB0eXBlcyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiQWNjZXB0ZWQgZmlsZSB0eXBlcyI6CiAgICAgICAgLSB0ZXh0OiBBY2NlcHRlZCBmaWxlIHR5cGVzCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiUGFja2FnZSBzdGF0dXNlcyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiUGFja2FnZSBzdGF0dXNlcyI6CiAgICAgICAgLSB0ZXh0OiBQYWNrYWdlIHN0YXR1c2VzCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiU3VwcG9ydGVkIGJyb3dzZXJzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJTdXBwb3J0ZWQgYnJvd3NlcnMiOgogICAgICAgIC0gdGV4dDogU3VwcG9ydGVkIGJyb3dzZXJzCiAgICAgICAgLSBpbWcKICAtIGFydGljbGU6CiAgICAtIGhlYWRpbmcgIlBhY2thZ2UgYWN0aW9ucyIgW2xldmVsPTJdCiAgICAtIHNlcGFyYXRvcgogICAgLSBoZWFkaW5nICJTdWJtaXQgbmV3IFNQQSBvciB3YWl2ZXIiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlN1Ym1pdCBuZXcgU1BBIG9yIHdhaXZlciI6CiAgICAgICAgLSB0ZXh0OiBTdWJtaXQgbmV3IFNQQSBvciB3YWl2ZXIKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJSZXNwb25kIHRvIFJBSSIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiUmVzcG9uZCB0byBSQUkiOgogICAgICAgIC0gdGV4dDogUmVzcG9uZCB0byBSQUkKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJXaXRoZHJhdyBSQUkgcmVzcG9uc2UiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIldpdGhkcmF3IFJBSSByZXNwb25zZSI6CiAgICAgICAgLSB0ZXh0OiBXaXRoZHJhdyBSQUkgcmVzcG9uc2UKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJXaXRoZHJhdyBwYWNrYWdlIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJXaXRoZHJhdyBwYWNrYWdlIjoKICAgICAgICAtIHRleHQ6IFdpdGhkcmF3IHBhY2thZ2UKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJSZXF1ZXN0IHRlbXBvcmFyeSBleHRlbnNpb24gZm9yIGEgd2FpdmVyIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJSZXF1ZXN0IHRlbXBvcmFyeSBleHRlbnNpb24gZm9yIGEgd2FpdmVyIjoKICAgICAgICAtIHRleHQ6IFJlcXVlc3QgdGVtcG9yYXJ5IGV4dGVuc2lvbiBmb3IgYSB3YWl2ZXIKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJBZGQgYW1lbmRtZW50IGZvciAxOTE1KGIpIHdhaXZlciIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiQWRkIGFtZW5kbWVudCBmb3IgMTkxNShiKSB3YWl2ZXIiOgogICAgICAgIC0gdGV4dDogQWRkIGFtZW5kbWVudCBmb3IgMTkxNShiKSB3YWl2ZXIKICAgICAgICAtIGltZwogIC0gYXJ0aWNsZToKICAgIC0gaGVhZGluZyAiVGVtcGxhdGVzICYgaW1wbGVtZW50YXRpb24gZ3VpZGVzIiBbbGV2ZWw9Ml0KICAgIC0gc2VwYXJhdG9yCiAgICAtIGhlYWRpbmcgIk1lZGljYWlkIEFsdGVybmF0aXZlIEJlbmVmaXQgUGxhbiAoQUJQKSBTUEEgdGVtcGxhdGVzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJNZWRpY2FpZCBBbHRlcm5hdGl2ZSBCZW5lZml0IFBsYW4gKEFCUCkgU1BBIHRlbXBsYXRlcyI6CiAgICAgICAgLSB0ZXh0OiBNZWRpY2FpZCBBbHRlcm5hdGl2ZSBCZW5lZml0IFBsYW4gKEFCUCkgU1BBIHRlbXBsYXRlcwogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIk1lZGljYWlkIEFsdGVybmF0aXZlIEJlbmVmaXQgUGxhbiAoQUJQKSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJNZWRpY2FpZCBBbHRlcm5hdGl2ZSBCZW5lZml0IFBsYW4gKEFCUCkgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcyI6CiAgICAgICAgLSB0ZXh0OiBNZWRpY2FpZCBBbHRlcm5hdGl2ZSBCZW5lZml0IFBsYW4gKEFCUCkgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcwogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIk1lZGljYWlkIFByZW1pdW1zIGFuZCBDb3N0IFNoYXJpbmcgKE1QQykgU1BBIHRlbXBsYXRlcyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiTWVkaWNhaWQgUHJlbWl1bXMgYW5kIENvc3QgU2hhcmluZyAoTVBDKSBTUEEgdGVtcGxhdGVzIjoKICAgICAgICAtIHRleHQ6IE1lZGljYWlkIFByZW1pdW1zIGFuZCBDb3N0IFNoYXJpbmcgKE1QQykgU1BBIHRlbXBsYXRlcwogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIk1lZGljYWlkIFByZW1pdW1zIGFuZCBDb3N0IFNoYXJpbmcgKE1QQykgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiTWVkaWNhaWQgUHJlbWl1bXMgYW5kIENvc3QgU2hhcmluZyAoTVBDKSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzIjoKICAgICAgICAtIHRleHQ6IE1lZGljYWlkIFByZW1pdW1zIGFuZCBDb3N0IFNoYXJpbmcgKE1QQykgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcwogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIkNISVAgZWxpZ2liaWxpdHkgU1BBIHRlbXBsYXRlcyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiQ0hJUCBlbGlnaWJpbGl0eSBTUEEgdGVtcGxhdGVzIjoKICAgICAgICAtIHRleHQ6IENISVAgZWxpZ2liaWxpdHkgU1BBIHRlbXBsYXRlcwogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIkNISVAgZWxpZ2liaWxpdHkgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiQ0hJUCBlbGlnaWJpbGl0eSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzIjoKICAgICAgICAtIHRleHQ6IENISVAgZWxpZ2liaWxpdHkgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcwogICAgICAgIC0gaW1nCiAgLSBhcnRpY2xlOgogICAgLSBoZWFkaW5nICJBY2Nlc3MgJiBSb2xlcyIgW2xldmVsPTJdCiAgICAtIHNlcGFyYXRvcgogICAgLSBoZWFkaW5nICJPbmVNQUMgdXNlciByb2xlcyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiT25lTUFDIHVzZXIgcm9sZXMiOgogICAgICAgIC0gdGV4dDogT25lTUFDIHVzZXIgcm9sZXMKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJSZXF1ZXN0IHJvbGUgaW4gT25lTUFDIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJSZXF1ZXN0IHJvbGUgaW4gT25lTUFDIjoKICAgICAgICAtIHRleHQ6IFJlcXVlc3Qgcm9sZSBpbiBPbmVNQUMKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJSZXF1ZXN0IHJvbGUgY2hhbmdlIGluIE9uZU1BQyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiUmVxdWVzdCByb2xlIGNoYW5nZSBpbiBPbmVNQUMiOgogICAgICAgIC0gdGV4dDogUmVxdWVzdCByb2xlIGNoYW5nZSBpbiBPbmVNQUMKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJBcHByb3ZlIG9yIGRlbnkgcm9sZSByZXF1ZXN0IChzdGF0ZSBzeXN0ZW0gQWRtaW5pc3RyYXRvciB1c2VycykiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIkFwcHJvdmUgb3IgZGVueSByb2xlIHJlcXVlc3QgKHN0YXRlIHN5c3RlbSBBZG1pbmlzdHJhdG9yIHVzZXJzKSI6CiAgICAgICAgLSB0ZXh0OiBBcHByb3ZlIG9yIGRlbnkgcm9sZSByZXF1ZXN0IChzdGF0ZSBzeXN0ZW0gQWRtaW5pc3RyYXRvciB1c2VycykKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJJRE0gaW5zdHJ1Y3Rpb25zIGZvciBPbmVNQUMgdXNlcnMgKFBERikiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIklETSBpbnN0cnVjdGlvbnMgZm9yIE9uZU1BQyB1c2VycyAoUERGKSI6CiAgICAgICAgLSB0ZXh0OiBJRE0gaW5zdHJ1Y3Rpb25zIGZvciBPbmVNQUMgdXNlcnMgKFBERikKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJPbmVNQUMgSURNIGd1aWRlIChQREYpIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJPbmVNQUMgSURNIGd1aWRlIChQREYpIjoKICAgICAgICAtIHRleHQ6IE9uZU1BQyBJRE0gZ3VpZGUgKFBERikKICAgICAgICAtIGltZwogIC0gYXJ0aWNsZToKICAgIC0gaGVhZGluZyAiVXNlciBwcm9maWxlIiBbbGV2ZWw9Ml0KICAgIC0gc2VwYXJhdG9yCiAgICAtIGhlYWRpbmcgIlZpZXcgeW91ciB1c2VyIHByb2ZpbGUiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlZpZXcgeW91ciB1c2VyIHByb2ZpbGUiOgogICAgICAgIC0gdGV4dDogVmlldyB5b3VyIHVzZXIgcHJvZmlsZQogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIkFkZCBwaG9uZSBudW1iZXIgdG8geW91ciBwcm9maWxlIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJBZGQgcGhvbmUgbnVtYmVyIHRvIHlvdXIgcHJvZmlsZSI6CiAgICAgICAgLSB0ZXh0OiBBZGQgcGhvbmUgbnVtYmVyIHRvIHlvdXIgcHJvZmlsZQogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIkFkZCBhY2Nlc3MgdG8gYSBzdGF0ZSBhcyBTdGF0ZSBTdWJtaXR0ZXIiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIkFkZCBhY2Nlc3MgdG8gYSBzdGF0ZSBhcyBTdGF0ZSBTdWJtaXR0ZXIiOgogICAgICAgIC0gdGV4dDogQWRkIGFjY2VzcyB0byBhIHN0YXRlIGFzIFN0YXRlIFN1Ym1pdHRlcgogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIlJlbW92ZSBhY2Nlc3MgdG8gYSBzdGF0ZSBhcyBhIFN0YXRlIFN1Ym1pdHRlciIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiUmVtb3ZlIGFjY2VzcyB0byBhIHN0YXRlIGFzIGEgU3RhdGUgU3VibWl0dGVyIjoKICAgICAgICAtIHRleHQ6IFJlbW92ZSBhY2Nlc3MgdG8gYSBzdGF0ZSBhcyBhIFN0YXRlIFN1Ym1pdHRlcgogICAgICAgIC0gaW1nCiAgLSBhcnRpY2xlOgogICAgLSBoZWFkaW5nICJHbG9zc2FyeSIgW2xldmVsPTJdCiAgICAtIHNlcGFyYXRvcgogICAgLSBoZWFkaW5nICJBcHByb3ZlZCIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiQXBwcm92ZWQiOgogICAgICAgIC0gdGV4dDogQXBwcm92ZWQKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJEaXNhcHByb3ZlZCIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiRGlzYXBwcm92ZWQiOgogICAgICAgIC0gdGV4dDogRGlzYXBwcm92ZWQKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJSQUkgaXNzdWVkIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJSQUkgaXNzdWVkIjoKICAgICAgICAtIHRleHQ6IFJBSSBpc3N1ZWQKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJVbmRlciByZXZpZXciIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlVuZGVyIHJldmlldyI6CiAgICAgICAgLSB0ZXh0OiBVbmRlciByZXZpZXcKICAgICAgICAtIGltZwotIGNvbnRlbnRpbmZvOgogIC0gaW1nICJMb2dvIGZvciBNZWRpY2FpZCIKICAtIGltZyAiTG9nbyBmb3IgRGVwYXJ0bWVudCBvZiBIZWFsdGggYW5kIEh1bWFuIFNlcnZpY2VzIgogIC0gcGFyYWdyYXBoOiBBIGZlZGVyYWwgZ292ZXJubWVudCB3ZWJzaXRlIG1hbmFnZWQgYW5kIHBhaWQgZm9yIGJ5IHRoZSBVLlMuIENlbnRlcnMgZm9yIE1lZGljYXJlIGFuZCBNZWRpY2FpZCBTZXJ2aWNlcyBhbmQgcGFydCBvZiB0aGUgTUFDUHJvIHN1aXRlLgogIC0gdGV4dDogRW1haWwKICAtIGxpbmsgIk9uZU1BQ19IZWxwZGVza0BjbXMuaGhzLmdvdiIKICAtIHRleHQ6IGZvciBoZWxwIG9yIGZlZWRiYWNrIDc1MDAgU2VjdXJpdHkgQm91bGV2YXJkIEJhbHRpbW9yZSwgTUQgMjEyNDQKYGBgCgojIFRlc3Qgc291cmNlCgpgYGB0cwogICA2MSB8ICAgICAgIH0pOwogICA2MiB8CiAgIDYzIHwgICAgICAgdGVzdCgiZGlzcGxheXMgZmlsZSBmb3JtYXQgRkFRIiwgYXN5bmMgKCkgPT4gewogICA2NCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuZmlsZUZvcm1hdHMpLnRvQmVWaXNpYmxlKCk7CiAgIDY1IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5maWxlRm9ybWF0cykudG9IYXZlVGV4dCgKICAgNjYgfCAgICAgICAgICAgIldoYXQgYXJlIHRoZSBraW5kcyBvZiBmaWxlIGZvcm1hdHMgSSBjYW4gdXBsb2FkIGludG8gT25lTUFDIiwKICAgNjcgfCAgICAgICAgICk7CiAgIDY4IHwKICAgNjkgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmZpbGVGb3JtYXRzLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgIDcwIHwgICAgICAgfSk7CiAgIDcxIHwKICAgNzIgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyBvbmJvYXJkaW5nIG1hdGVyaWFscyBGQVEiLCBhc3luYyAoKSA9PiB7CiAgIDczIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5vbmJvYXJkaW5nTWF0ZXJpYWxzKS50b0JlVmlzaWJsZSgpOwogICA3NCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uub25ib2FyZGluZ01hdGVyaWFscykudG9IYXZlVGV4dCgiT25ib2FyZGluZyBNYXRlcmlhbHMiKTsKICAgNzUgfAogICA3NiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uub25ib2FyZGluZ01hdGVyaWFscy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogICA3NyB8ICAgICAgIH0pOwogICA3OCB8ICAgICB9KTsKICAgNzkgfAogICA4MCB8ICAgICB0ZXN0LmRlc2NyaWJlKCJTdGF0ZSBQbGFuIEFtZW5kbWVudHMgKFNQQXMpIiwgKCkgPT4gewogICA4MSB8ICAgICAgIHRlc3QoImRpc3BsYXlzIGZvcm1hdCB1c2VkIHRvIGVudGVyIGEgU1BBIElEIEZBUSIsIGFzeW5jICgpID0+IHsKICAgODIgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLnNwYUlkRm9ybWF0KS50b0JlVmlzaWJsZSgpOwogICA4MyB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uuc3BhSWRGb3JtYXQpLnRvSGF2ZVRleHQoIldoYXQgZm9ybWF0IGlzIHVzZWQgdG8gZW50ZXIgYSBTUEEgSUQ/Iik7CiAgIDg0IHwKICAgODUgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLnNwYUlkRm9ybWF0LmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgIDg2IHwgICAgICAgfSk7CiAgIDg3IHwKICAgODggfCAgICAgICB0ZXN0KCJkaXNwbGF5cyBNZWRpY2FpZCBTUEEgYXR0YWNobWVudHMgRkFRIiwgYXN5bmMgKCkgPT4gewogICA4OSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UubWVkaWNhaWRTcGFBdHRhY2htZW50cykudG9CZVZpc2libGUoKTsKICAgOTAgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLm1lZGljYWlkU3BhQXR0YWNobWVudHMpLnRvSGF2ZVRleHQoCiAgIDkxIHwgICAgICAgICAgICJXaGF0IGFyZSB0aGUgYXR0YWNobWVudHMgZm9yIGEgTWVkaWNhaWQgU1BBPyIsCiAgIDkyIHwgICAgICAgICApOwogICA5MyB8CiAgIDk0IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5tZWRpY2FpZFNwYUF0dGFjaG1lbnRzLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgIDk1IHwgICAgICAgfSk7CiAgIDk2IHwKICAgOTcgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyBhdHRhY2htZW50cyByZXNwb25zZSB0byBNZWRpY2FpZCBSQUkgRkFRIiwgYXN5bmMgKCkgPT4gewogICA5OCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UubWVkaWNhaWRTcGFSYWkpLnRvQmVWaXNpYmxlKCk7CiAgIDk5IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5tZWRpY2FpZFNwYVJhaSkudG9IYXZlVGV4dCgKICAxMDAgfCAgICAgICAgICAgIldoYXQgYXJlIHRoZSBhdHRhY2htZW50cyBmb3IgYSBNZWRpY2FpZCByZXNwb25zZSB0byBSZXF1ZXN0IGZvciBBZGRpdGlvbmFsIEluZm9ybWF0aW9uIChSQUkpPyIsCiAgMTAxIHwgICAgICAgICApOwogIDEwMiB8CiAgMTAzIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5tZWRpY2FpZFNwYVJhaS5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDEwNCB8ICAgICAgIH0pOwogIDEwNSB8CiAgMTA2IHwgICAgICAgdGVzdCgiZGlzcGxheXMgQ0hJUCBTUEEgYXR0YWNobWVudHMgRkFRIiwgYXN5bmMgKCkgPT4gewogIDEwNyB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuY2hpcFNwYUF0dGFjaG1lbnRzKS50b0JlVmlzaWJsZSgpOwogIDEwOCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuY2hpcFNwYUF0dGFjaG1lbnRzKS50b0hhdmVUZXh0KAogIDEwOSB8ICAgICAgICAgICAiV2hhdCBhcmUgdGhlIGF0dGFjaG1lbnRzIGZvciBhIENISVAgU1BBPyIsCiAgMTEwIHwgICAgICAgICApOwogIDExMSB8CiAgMTEyIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5jaGlwU3BhQXR0YWNobWVudHMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAxMTMgfCAgICAgICB9KTsKICAxMTQgfAogIDExNSB8ICAgICAgIHRlc3QoImRpc3BsYXlzIGF0dGFjaG1lbnRzIHJlc3BvbnNlIHRvIENISVAgUkFJIEZBUSIsIGFzeW5jICgpID0+IHsKICAxMTYgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmNoaXBTcGFSYWkpLnRvQmVWaXNpYmxlKCk7CiAgMTE3IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5jaGlwU3BhUmFpKS50b0hhdmVUZXh0KAogIDExOCB8ICAgICAgICAgICAiV2hhdCBhcmUgdGhlIGF0dGFjaG1lbnRzIGZvciBhIENISVAgU1BBIHJlc3BvbnNlIHRvIFJlcXVlc3QgZm9yIEFkZGl0aW9uYWwgSW5mb3JtYXRpb24gKFJBSSk/IiwKICAxMTkgfCAgICAgICAgICk7CiAgMTIwIHwKICAxMjEgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmNoaXBTcGFSYWkubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAxMjIgfCAgICAgICB9KTsKICAxMjMgfAogIDEyNCB8ICAgICAgIHRlc3QoImRpc3BsYXlzIFBIRSBGQVEiLCBhc3luYyAoKSA9PiB7CiAgMTI1IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5wdWJsaWNIZWFsdGhFbWVyZ2VuY3kpLnRvQmVWaXNpYmxlKCk7CiAgMTI2IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5wdWJsaWNIZWFsdGhFbWVyZ2VuY3kpLnRvSGF2ZVRleHQoCiAgMTI3IHwgICAgICAgICAgICJDYW4gSSBzdWJtaXQgU1BBcyByZWxhdGluZyB0byB0aGUgUHVibGljIEhlYWx0aCBFbWVyZ2VuY3kgKFBIRSkgaW4gT25lTUFDPyIsCiAgMTI4IHwgICAgICAgICApOwogIDEyOSB8CiAgMTMwIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5wdWJsaWNIZWFsdGhFbWVyZ2VuY3kubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAxMzEgfCAgICAgICB9KTsKICAxMzIgfAogIDEzMyB8ICAgICAgIHRlc3QoImRpc3BsYXlzIHdpdGhkcmF3IGZvcm1hbCBSQUkgZm9yIE1lZGljYWlkIFNQQSBGQVEiLCBhc3luYyAoKSA9PiB7CiAgMTM0IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53aXRoZHJhd1NwYVJhaSkudG9CZVZpc2libGUoKTsKICAxMzUgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndpdGhkcmF3U3BhUmFpKS50b0hhdmVUZXh0KAogIDEzNiB8ICAgICAgICAgICAiSG93IGRvIEkgV2l0aGRyYXcgYSBGb3JtYWwgUkFJIFJlc3BvbnNlIGZvciBhIE1lZGljYWlkIFNQQT8iLAogIDEzNyB8ICAgICAgICAgKTsKICAxMzggfAogIDEzOSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2l0aGRyYXdTcGFSYWkubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAxNDAgfCAgICAgICB9KTsKICAxNDEgfAogIDE0MiB8ICAgICAgIHRlc3QoImRpc3BsYXlzIHdpdGhkcmF3IHBhY2thZ2UgZm9yIE1lZGljYWlkIFNQQSBGQVEiLCBhc3luYyAoKSA9PiB7CiAgMTQzIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53aXRoZHJhd1BhY2thZ2VTcGEpLnRvQmVWaXNpYmxlKCk7CiAgMTQ0IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53aXRoZHJhd1BhY2thZ2VTcGEpLnRvSGF2ZVRleHQoCiAgMTQ1IHwgICAgICAgICAgICJIb3cgZG8gSSBXaXRoZHJhdyBhIFBhY2thZ2UgZm9yIGEgTWVkaWNhaWQgU1BBPyIsCiAgMTQ2IHwgICAgICAgICApOwogIDE0NyB8CiAgMTQ4IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53aXRoZHJhd1BhY2thZ2VTcGEubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAxNDkgfCAgICAgICB9KTsKICAxNTAgfAogIDE1MSB8ICAgICAgIHRlc3QoImRpc3BsYXlzIHdpdGhkcmF3IGZvcm1hbCBSQUkgZm9yIENISVAgU1BBIEZBUSIsIGFzeW5jICgpID0+IHsKICAxNTIgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndpdGhkcmF3Q2hpcFNwYVJhaSkudG9CZVZpc2libGUoKTsKICAxNTMgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndpdGhkcmF3Q2hpcFNwYVJhaSkudG9IYXZlVGV4dCgKICAxNTQgfCAgICAgICAgICAgIkhvdyBkbyBJIFdpdGhkcmF3IGEgRm9ybWFsIFJBSSBSZXNwb25zZSBmb3IgYSBDSElQIFNQQT8iLAogIDE1NSB8ICAgICAgICAgKTsKICAxNTYgfAogIDE1NyB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2l0aGRyYXdDaGlwU3BhUmFpLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgMTU4IHwgICAgICAgfSk7CiAgMTU5IHwKICAxNjAgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyB3aXRoZHJhdyBwYWNrYWdlIGZvciBDSElQIFNQQSBGQVEiLCBhc3luYyAoKSA9PiB7Cj4gMTYxIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53aXRoZHJhd1BhY2thZ2VDaGlwU3BhKS50b0JlVmlzaWJsZSgpOwogICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXiBFcnJvcjogVGltZWQgb3V0IDUwMDBtcyB3YWl0aW5nIGZvciBleHBlY3QobG9jYXRvcikudG9CZVZpc2libGUoKQogIDE2MiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2l0aGRyYXdQYWNrYWdlQ2hpcFNwYSkudG9IYXZlVGV4dCgKICAxNjMgfCAgICAgICAgICAgIkhvdyBkbyBJIFdpdGhkcmF3IGEgUGFja2FnZSBmb3IgYSBDSElQIFNQQT8iLAogIDE2NCB8ICAgICAgICAgKTsKICAxNjUgfAogIDE2NiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2l0aGRyYXdQYWNrYWdlQ2hpcFNwYS5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDE2NyB8ICAgICAgIH0pOwogIDE2OCB8CiAgMTY5IHwgICAgICAgdGVzdCgiZGlzcGxheXMgZG93bmxvYWQgQUJQIFNQQSB0ZW1wbGF0ZXMgRkFRIiwgYXN5bmMgKCkgPT4gewogIDE3MCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYWJwU3BhVGVtcGxhdGVzKS50b0JlVmlzaWJsZSgpOwogIDE3MSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYWJwU3BhVGVtcGxhdGVzKS50b0hhdmVUZXh0KAogIDE3MiB8ICAgICAgICAgICAiV2hlcmUgY2FuIEkgZG93bmxvYWQgTWVkaWNhaWQgQWx0ZXJuYXRpdmUgQmVuZWZpdCBQbGFuIChBQlApIFNQQSB0ZW1wbGF0ZXM/IiwKICAxNzMgfCAgICAgICAgICk7CiAgMTc0IHwKICAxNzUgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmFicFNwYVRlbXBsYXRlcy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDE3NiB8ICAgICAgIH0pOwogIDE3NyB8CiAgMTc4IHwgICAgICAgdGVzdCgiZGlzcGxheXMgZG93bmxvYWQgQUJQIFNQQSBpbXBsZW1lbnRhdGlvbiBndWlkZXMgRkFRIiwgYXN5bmMgKCkgPT4gewogIDE3OSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYWJwU3BhR3VpZGVzKS50b0JlVmlzaWJsZSgpOwogIDE4MCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYWJwU3BhR3VpZGVzKS50b0hhdmVUZXh0KAogIDE4MSB8ICAgICAgICAgICAiV2hlcmUgY2FuIEkgZG93bmxvYWQgTWVkaWNhaWQgQWx0ZXJuYXRpdmUgQmVuZWZpdCBQbGFuIChBQlApIFNQQSBpbXBsZW1lbnRhdGlvbiBndWlkZXM/IiwKICAxODIgfCAgICAgICAgICk7CiAgMTgzIHwKICAxODQgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmFicFNwYUd1aWRlcy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDE4NSB8ICAgICAgIH0pOwogIDE4NiB8CiAgMTg3IHwgICAgICAgdGVzdCgiZGlzcGxheXMgZG93bmxvYWQgTVBDIFNQQSB0ZW1wbGF0ZXMgRkFRIiwgYXN5bmMgKCkgPT4gewogIDE4OCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UubXBjU3BhVGVtcGxhdGVzKS50b0JlVmlzaWJsZSgpOwogIDE4OSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UubXBjU3BhVGVtcGxhdGVzKS50b0hhdmVUZXh0KAogIDE5MCB8ICAgICAgICAgICAiV2hlcmUgY2FuIEkgZG93bmxvYWQgTWVkaWNhaWQgUHJlbWl1bXMgYW5kIENvc3QgU2hhcmluZyAoTVBDKSBTUEEgdGVtcGxhdGVzPyIsCiAgMTkxIHwgICAgICAgICApOwogIDE5MiB8CiAgMTkzIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5tcGNTcGFUZW1wbGF0ZXMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAxOTQgfCAgICAgICB9KTsKICAxOTUgfAogIDE5NiB8ICAgICAgIHRlc3QoImRpc3BsYXlzIGRvd25sb2FkIE1QQyBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzIEZBUSIsIGFzeW5jICgpID0+IHsKICAxOTcgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLm1wY1NwYUd1aWRlcykudG9CZVZpc2libGUoKTsKICAxOTggfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLm1wY1NwYUd1aWRlcykudG9IYXZlVGV4dCgKICAxOTkgfCAgICAgICAgICAgIldoZXJlIGNhbiBJIGRvd25sb2FkIE1lZGljYWlkIFByZW1pdW1zIGFuZCBDb3N0IFNoYXJpbmcgKE1QQykgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcz8iLAogIDIwMCB8ICAgICAgICAgKTsKICAyMDEgfAogIDIwMiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UubXBjU3BhR3VpZGVzLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgMjAzIHwgICAgICAgfSk7CiAgMjA0IHwKICAyMDUgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyBkb3dubG9hZCBDSElQIGVsaWdpYmlsaXR5IFNQQSB0ZW1wbGF0ZXMgRkFRIiwgYXN5bmMgKCkgPT4gewogIDIwNiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuY2hpcFNwYVRlbXBsYXRlcykudG9CZVZpc2libGUoKTsKICAyMDcgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmNoaXBTcGFUZW1wbGF0ZXMpLnRvSGF2ZVRleHQoCiAgMjA4IHwgICAgICAgICAgICJXaGVyZSBjYW4gSSBkb3dubG9hZCBDSElQIGVsaWdpYmlsaXR5IFNQQSB0ZW1wbGF0ZXM/IiwKICAyMDkgfCAgICAgICAgICk7CiAgMjEwIHwKICAyMTEgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmNoaXBTcGFUZW1wbGF0ZXMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAyMTIgfCAgICAgICB9KTsKICAyMTMgfAogIDIxNCB8ICAgICAgIHRlc3QoImRpc3BsYXlzIGRvd25sb2FkIENISVAgZWxpZ2liaWxpdHkgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcyBGQVEiLCBhc3luYyAoKSA9PiB7CiAgMjE1IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5jaGlwU3BhR3VpZGVzKS50b0JlVmlzaWJsZSgpOwogIDIxNiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuY2hpcFNwYUd1aWRlcykudG9IYXZlVGV4dCgKICAyMTcgfCAgICAgICAgICAgIldoZXJlIGNhbiBJIGRvd25sb2FkIENISVAgZWxpZ2liaWxpdHkgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcz8iLAogIDIxOCB8ICAgICAgICAgKTsKICAyMTkgfAogIDIyMCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuY2hpcFNwYUd1aWRlcy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDIyMSB8ICAgICAgIH0pOwogIDIyMiB8ICAgICB9KTsKICAyMjMgfAogIDIyNCB8ICAgICB0ZXN0LmRlc2NyaWJlKCJXYWl2ZXJzIFNlY3Rpb24iLCAoKSA9PiB7CiAgMjI1IHwgICAgICAgdGVzdCgiZGlzcGxheXMgMTkxNShiKSBpbml0aWFsIHdhaXZlciBudW1iZXIgRkFRIiwgYXN5bmMgKCkgPT4gewogIDIyNiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVySWRGb3JtYXQpLnRvQmVWaXNpYmxlKCk7CiAgMjI3IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53YWl2ZXJJZEZvcm1hdCkudG9IYXZlVGV4dCgKICAyMjggfCAgICAgICAgICAgIldoYXQgZm9ybWF0IGlzIHVzZWQgdG8gZW50ZXIgYSAxOTE1KGIpIEluaXRpYWwgV2FpdmVyIG51bWJlcj8iLAogIDIyOSB8ICAgICAgICAgKTsKICAyMzAgfAogIDIzMSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVySWRGb3JtYXQubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAyMzIgfCAgICAgICB9KTsKICAyMzMgfAogIDIzNCB8ICAgICAgIHRlc3QoImRpc3BsYXlzIDE5MTUoYikgd2FpdmVyIHJlbmV3YWwgbnVtYmVyIEZBUSIsIGFzeW5jICgpID0+IHsKICAyMzUgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlclJlbmV3YWxJZEZvcm1hdCkudG9CZVZpc2libGUoKTsKICAyMzYgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlclJlbmV3YWxJZEZvcm1hdCkudG9IYXZlVGV4dCgKICAyMzcgfCAgICAgICAgICAgIldoYXQgZm9ybWF0IGlzIHVzZWQgdG8gZW50ZXIgYSAxOTE1KGIpIFdhaXZlciBSZW5ld2FsIG51bWJlcj8iLAogIDIzOCB8ICAgICAgICAgKTsKICAyMzkgfAogIDI0MCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyUmVuZXdhbElkRm9ybWF0LmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgMjQxIHwgICAgICAgfSk7CiAgMjQyIHwKICAyNDMgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyAxOTE1KGIpIHdhaXZlciBhbWVuZG1lbnQgbnVtYmVyIEZBUSIsIGFzeW5jICgpID0+IHsKICAyNDQgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlckFtZW5kbWVudElkRm9ybWF0KS50b0JlVmlzaWJsZSgpOwogIDI0NSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyQW1lbmRtZW50SWRGb3JtYXQpLnRvSGF2ZVRleHQoCiAgMjQ2IHwgICAgICAgICAgICJXaGF0IGZvcm1hdCBpcyB1c2VkIHRvIGVudGVyIGEgMTkxNShiKSBXYWl2ZXIgQW1lbmRtZW50IG51bWJlcj8iLAogIDI0NyB8ICAgICAgICAgKTsKICAyNDggfAogIDI0OSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyQW1lbmRtZW50SWRGb3JtYXQubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAyNTAgfCAgICAgICB9KTsKICAyNTEgfAogIDI1MiB8ICAgICAgIHRlc3QoImRpc3BsYXlzIGNvbnRhY3QgaGVscCBmb3IgMTkxNShiKSB3YWl2ZXIgRkFRIiwgYXN5bmMgKCkgPT4gewogIDI1MyB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVySWRIZWxwKS50b0JlVmlzaWJsZSgpOwogIDI1NCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVySWRIZWxwKS50b0hhdmVUZXh0KAogIDI1NSB8ICAgICAgICAgICAiV2hvIGNhbiBJIGNvbnRhY3QgdG8gaGVscCBtZSBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IDE5MTUoYikgV2FpdmVyIE51bWJlcj8iLAogIDI1NiB8ICAgICAgICAgKTsKICAyNTcgfAogIDI1OCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVySWRIZWxwLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgMjU5IHwgICAgICAgfSk7CiAgMjYwIHwKICAyNjEgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyBmb3JtYXQgMTkxNShjKSB3YWl2ZXIgbnVtYmVyIEZBUSIsIGFzeW5jICgpID0+IHsKYGBg"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 54,
                                "line": 161
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-dfbff9a41baceaabce55",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 160,
                      "column": 7
                    },
                    {
                      "title": "displays download ABP SPA templates FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 54,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5486,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-spa-templates')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-spa-templates')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:170:47",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-spa-templates')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#abp-spa-templates')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 47,
                                  "line": 170
                                },
                                "snippet": "\u001b[0m \u001b[90m 168 |\u001b[39m\n \u001b[90m 169 |\u001b[39m       test(\u001b[32m\"displays download ABP SPA templates FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 170 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mabpSpaTemplates)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 171 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mabpSpaTemplates)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 172 |\u001b[39m           \u001b[32m\"Where can I download Medicaid Alternative Benefit Plan (ABP) SPA templates?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 173 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 47,
                                    "line": 170
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-spa-templates')\u001b[22m\n\n\n  168 |\n  169 |       test(\"displays download ABP SPA templates FAQ\", async () => {\n> 170 |         await expect(faqPage.abpSpaTemplates).toBeVisible();\n      |                                               ^\n  171 |         await expect(faqPage.abpSpaTemplates).toHaveText(\n  172 |           \"Where can I download Medicaid Alternative Benefit Plan (ABP) SPA templates?\",\n  173 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:170:47"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:32:35.662Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 47,
                                "line": 170
                              }
                            },
                            {
                              "workerIndex": 55,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5676,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-spa-templates')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-spa-templates')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:170:47",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-spa-templates')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#abp-spa-templates')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 47,
                                  "line": 170
                                },
                                "snippet": "\u001b[0m \u001b[90m 168 |\u001b[39m\n \u001b[90m 169 |\u001b[39m       test(\u001b[32m\"displays download ABP SPA templates FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 170 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mabpSpaTemplates)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 171 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mabpSpaTemplates)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 172 |\u001b[39m           \u001b[32m\"Where can I download Medicaid Alternative Benefit Plan (ABP) SPA templates?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 173 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 47,
                                    "line": 170
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-spa-templates')\u001b[22m\n\n\n  168 |\n  169 |       test(\"displays download ABP SPA templates FAQ\", async () => {\n> 170 |         await expect(faqPage.abpSpaTemplates).toBeVisible();\n      |                                               ^\n  171 |         await expect(faqPage.abpSpaTemplates).toHaveText(\n  172 |           \"Where can I download Medicaid Alternative Benefit Plan (ABP) SPA templates?\",\n  173 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:170:47"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:32:42.052Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-b9fe9-nload-ABP-SPA-templates-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 47,
                                "line": 170
                              }
                            },
                            {
                              "workerIndex": 56,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5503,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-spa-templates')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-spa-templates')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:170:47",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-spa-templates')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#abp-spa-templates')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 47,
                                  "line": 170
                                },
                                "snippet": "\u001b[0m \u001b[90m 168 |\u001b[39m\n \u001b[90m 169 |\u001b[39m       test(\u001b[32m\"displays download ABP SPA templates FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 170 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mabpSpaTemplates)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 171 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mabpSpaTemplates)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 172 |\u001b[39m           \u001b[32m\"Where can I download Medicaid Alternative Benefit Plan (ABP) SPA templates?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 173 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 47,
                                    "line": 170
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-spa-templates')\u001b[22m\n\n\n  168 |\n  169 |       test(\"displays download ABP SPA templates FAQ\", async () => {\n> 170 |         await expect(faqPage.abpSpaTemplates).toBeVisible();\n      |                                               ^\n  171 |         await expect(faqPage.abpSpaTemplates).toHaveText(\n  172 |           \"Where can I download Medicaid Alternative Benefit Plan (ABP) SPA templates?\",\n  173 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:170:47"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:32:48.685Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 47,
                                "line": 170
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-37434253b0908d9ce75e",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 169,
                      "column": 7
                    },
                    {
                      "title": "displays download ABP SPA implementation guides FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 57,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5475,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-implementation-guides-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-implementation-guides-spa')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-implementation-guides-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-implementation-guides-spa')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:179:44",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-implementation-guides-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-implementation-guides-spa')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#abp-implementation-guides-spa')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 44,
                                  "line": 179
                                },
                                "snippet": "\u001b[0m \u001b[90m 177 |\u001b[39m\n \u001b[90m 178 |\u001b[39m       test(\u001b[32m\"displays download ABP SPA implementation guides FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 179 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mabpSpaGuides)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 180 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mabpSpaGuides)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 181 |\u001b[39m           \u001b[32m\"Where can I download Medicaid Alternative Benefit Plan (ABP) SPA implementation guides?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 182 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 44,
                                    "line": 179
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-implementation-guides-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-implementation-guides-spa')\u001b[22m\n\n\n  177 |\n  178 |       test(\"displays download ABP SPA implementation guides FAQ\", async () => {\n> 179 |         await expect(faqPage.abpSpaGuides).toBeVisible();\n      |                                            ^\n  180 |         await expect(faqPage.abpSpaGuides).toHaveText(\n  181 |           \"Where can I download Medicaid Alternative Benefit Plan (ABP) SPA implementation guides?\",\n  182 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:179:44"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:32:55.093Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 44,
                                "line": 179
                              }
                            },
                            {
                              "workerIndex": 58,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5680,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-implementation-guides-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-implementation-guides-spa')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-implementation-guides-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-implementation-guides-spa')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:179:44",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-implementation-guides-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-implementation-guides-spa')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#abp-implementation-guides-spa')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 44,
                                  "line": 179
                                },
                                "snippet": "\u001b[0m \u001b[90m 177 |\u001b[39m\n \u001b[90m 178 |\u001b[39m       test(\u001b[32m\"displays download ABP SPA implementation guides FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 179 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mabpSpaGuides)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 180 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mabpSpaGuides)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 181 |\u001b[39m           \u001b[32m\"Where can I download Medicaid Alternative Benefit Plan (ABP) SPA implementation guides?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 182 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 44,
                                    "line": 179
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-implementation-guides-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-implementation-guides-spa')\u001b[22m\n\n\n  177 |\n  178 |       test(\"displays download ABP SPA implementation guides FAQ\", async () => {\n> 179 |         await expect(faqPage.abpSpaGuides).toBeVisible();\n      |                                            ^\n  180 |         await expect(faqPage.abpSpaGuides).toHaveText(\n  181 |           \"Where can I download Medicaid Alternative Benefit Plan (ABP) SPA implementation guides?\",\n  182 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:179:44"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:33:01.485Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-87f96-A-implementation-guides-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 44,
                                "line": 179
                              }
                            },
                            {
                              "workerIndex": 59,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5476,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-implementation-guides-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-implementation-guides-spa')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-implementation-guides-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-implementation-guides-spa')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:179:44",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-implementation-guides-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-implementation-guides-spa')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#abp-implementation-guides-spa')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 44,
                                  "line": 179
                                },
                                "snippet": "\u001b[0m \u001b[90m 177 |\u001b[39m\n \u001b[90m 178 |\u001b[39m       test(\u001b[32m\"displays download ABP SPA implementation guides FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 179 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mabpSpaGuides)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 180 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mabpSpaGuides)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 181 |\u001b[39m           \u001b[32m\"Where can I download Medicaid Alternative Benefit Plan (ABP) SPA implementation guides?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 182 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 44,
                                    "line": 179
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#abp-implementation-guides-spa')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#abp-implementation-guides-spa')\u001b[22m\n\n\n  177 |\n  178 |       test(\"displays download ABP SPA implementation guides FAQ\", async () => {\n> 179 |         await expect(faqPage.abpSpaGuides).toBeVisible();\n      |                                            ^\n  180 |         await expect(faqPage.abpSpaGuides).toHaveText(\n  181 |           \"Where can I download Medicaid Alternative Benefit Plan (ABP) SPA implementation guides?\",\n  182 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:179:44"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:33:08.132Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 44,
                                "line": 179
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-0963c854d8258e74f166",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 178,
                      "column": 7
                    },
                    {
                      "title": "displays download MPC SPA templates FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 60,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5473,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-templates')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-templates')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:188:47",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-templates')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#mpc-spa-templates')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 47,
                                  "line": 188
                                },
                                "snippet": "\u001b[0m \u001b[90m 186 |\u001b[39m\n \u001b[90m 187 |\u001b[39m       test(\u001b[32m\"displays download MPC SPA templates FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 188 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmpcSpaTemplates)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 189 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmpcSpaTemplates)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 190 |\u001b[39m           \u001b[32m\"Where can I download Medicaid Premiums and Cost Sharing (MPC) SPA templates?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 191 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 47,
                                    "line": 188
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-templates')\u001b[22m\n\n\n  186 |\n  187 |       test(\"displays download MPC SPA templates FAQ\", async () => {\n> 188 |         await expect(faqPage.mpcSpaTemplates).toBeVisible();\n      |                                               ^\n  189 |         await expect(faqPage.mpcSpaTemplates).toHaveText(\n  190 |           \"Where can I download Medicaid Premiums and Cost Sharing (MPC) SPA templates?\",\n  191 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:188:47"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:33:14.501Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 47,
                                "line": 188
                              }
                            },
                            {
                              "workerIndex": 61,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5641,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-templates')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-templates')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:188:47",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-templates')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#mpc-spa-templates')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 47,
                                  "line": 188
                                },
                                "snippet": "\u001b[0m \u001b[90m 186 |\u001b[39m\n \u001b[90m 187 |\u001b[39m       test(\u001b[32m\"displays download MPC SPA templates FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 188 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmpcSpaTemplates)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 189 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmpcSpaTemplates)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 190 |\u001b[39m           \u001b[32m\"Where can I download Medicaid Premiums and Cost Sharing (MPC) SPA templates?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 191 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 47,
                                    "line": 188
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-templates')\u001b[22m\n\n\n  186 |\n  187 |       test(\"displays download MPC SPA templates FAQ\", async () => {\n> 188 |         await expect(faqPage.mpcSpaTemplates).toBeVisible();\n      |                                               ^\n  189 |         await expect(faqPage.mpcSpaTemplates).toHaveText(\n  190 |           \"Where can I download Medicaid Premiums and Cost Sharing (MPC) SPA templates?\",\n  191 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:188:47"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:33:20.887Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-4d8c2-nload-MPC-SPA-templates-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 47,
                                "line": 188
                              }
                            },
                            {
                              "workerIndex": 62,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5491,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-templates')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-templates')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:188:47",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-templates')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#mpc-spa-templates')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 47,
                                  "line": 188
                                },
                                "snippet": "\u001b[0m \u001b[90m 186 |\u001b[39m\n \u001b[90m 187 |\u001b[39m       test(\u001b[32m\"displays download MPC SPA templates FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 188 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmpcSpaTemplates)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 189 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmpcSpaTemplates)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 190 |\u001b[39m           \u001b[32m\"Where can I download Medicaid Premiums and Cost Sharing (MPC) SPA templates?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 191 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 47,
                                    "line": 188
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-templates')\u001b[22m\n\n\n  186 |\n  187 |       test(\"displays download MPC SPA templates FAQ\", async () => {\n> 188 |         await expect(faqPage.mpcSpaTemplates).toBeVisible();\n      |                                               ^\n  189 |         await expect(faqPage.mpcSpaTemplates).toHaveText(\n  190 |           \"Where can I download Medicaid Premiums and Cost Sharing (MPC) SPA templates?\",\n  191 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:188:47"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:33:27.502Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 47,
                                "line": 188
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-496ea50452ddd6df612b",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 187,
                      "column": 7
                    },
                    {
                      "title": "displays download MPC SPA implementation guides FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 63,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5485,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-implementation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-implementation-guides')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-implementation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-implementation-guides')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:197:44",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-implementation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-implementation-guides')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#mpc-spa-implementation-guides')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 44,
                                  "line": 197
                                },
                                "snippet": "\u001b[0m \u001b[90m 195 |\u001b[39m\n \u001b[90m 196 |\u001b[39m       test(\u001b[32m\"displays download MPC SPA implementation guides FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 197 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmpcSpaGuides)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 198 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmpcSpaGuides)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 199 |\u001b[39m           \u001b[32m\"Where can I download Medicaid Premiums and Cost Sharing (MPC) SPA implementation guides?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 200 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 44,
                                    "line": 197
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-implementation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-implementation-guides')\u001b[22m\n\n\n  195 |\n  196 |       test(\"displays download MPC SPA implementation guides FAQ\", async () => {\n> 197 |         await expect(faqPage.mpcSpaGuides).toBeVisible();\n      |                                            ^\n  198 |         await expect(faqPage.mpcSpaGuides).toHaveText(\n  199 |           \"Where can I download Medicaid Premiums and Cost Sharing (MPC) SPA implementation guides?\",\n  200 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:197:44"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:33:33.885Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 44,
                                "line": 197
                              }
                            },
                            {
                              "workerIndex": 64,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5645,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-implementation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-implementation-guides')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-implementation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-implementation-guides')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:197:44",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-implementation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-implementation-guides')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#mpc-spa-implementation-guides')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 44,
                                  "line": 197
                                },
                                "snippet": "\u001b[0m \u001b[90m 195 |\u001b[39m\n \u001b[90m 196 |\u001b[39m       test(\u001b[32m\"displays download MPC SPA implementation guides FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 197 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmpcSpaGuides)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 198 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmpcSpaGuides)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 199 |\u001b[39m           \u001b[32m\"Where can I download Medicaid Premiums and Cost Sharing (MPC) SPA implementation guides?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 200 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 44,
                                    "line": 197
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-implementation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-implementation-guides')\u001b[22m\n\n\n  195 |\n  196 |       test(\"displays download MPC SPA implementation guides FAQ\", async () => {\n> 197 |         await expect(faqPage.mpcSpaGuides).toBeVisible();\n      |                                            ^\n  198 |         await expect(faqPage.mpcSpaGuides).toHaveText(\n  199 |           \"Where can I download Medicaid Premiums and Cost Sharing (MPC) SPA implementation guides?\",\n  200 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:197:44"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:33:40.304Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-54f3b-A-implementation-guides-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 44,
                                "line": 197
                              }
                            },
                            {
                              "workerIndex": 65,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5474,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-implementation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-implementation-guides')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-implementation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-implementation-guides')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:197:44",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-implementation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-implementation-guides')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#mpc-spa-implementation-guides')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 44,
                                  "line": 197
                                },
                                "snippet": "\u001b[0m \u001b[90m 195 |\u001b[39m\n \u001b[90m 196 |\u001b[39m       test(\u001b[32m\"displays download MPC SPA implementation guides FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 197 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmpcSpaGuides)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 198 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mmpcSpaGuides)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 199 |\u001b[39m           \u001b[32m\"Where can I download Medicaid Premiums and Cost Sharing (MPC) SPA implementation guides?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 200 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 44,
                                    "line": 197
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#mpc-spa-implementation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#mpc-spa-implementation-guides')\u001b[22m\n\n\n  195 |\n  196 |       test(\"displays download MPC SPA implementation guides FAQ\", async () => {\n> 197 |         await expect(faqPage.mpcSpaGuides).toBeVisible();\n      |                                            ^\n  198 |         await expect(faqPage.mpcSpaGuides).toHaveText(\n  199 |           \"Where can I download Medicaid Premiums and Cost Sharing (MPC) SPA implementation guides?\",\n  200 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:197:44"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:33:46.893Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 44,
                                "line": 197
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-cc93c82c71b42b6a1187",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 196,
                      "column": 7
                    },
                    {
                      "title": "displays download CHIP eligibility SPA templates FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 66,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5478,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-templates')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-templates')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:206:48",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-templates')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#chip-spa-templates')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 48,
                                  "line": 206
                                },
                                "snippet": "\u001b[0m \u001b[90m 204 |\u001b[39m\n \u001b[90m 205 |\u001b[39m       test(\u001b[32m\"displays download CHIP eligibility SPA templates FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 206 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaTemplates)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 207 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaTemplates)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 208 |\u001b[39m           \u001b[32m\"Where can I download CHIP eligibility SPA templates?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 209 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 48,
                                    "line": 206
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-templates')\u001b[22m\n\n\n  204 |\n  205 |       test(\"displays download CHIP eligibility SPA templates FAQ\", async () => {\n> 206 |         await expect(faqPage.chipSpaTemplates).toBeVisible();\n      |                                                ^\n  207 |         await expect(faqPage.chipSpaTemplates).toHaveText(\n  208 |           \"Where can I download CHIP eligibility SPA templates?\",\n  209 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:206:48"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:33:53.285Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 48,
                                "line": 206
                              }
                            },
                            {
                              "workerIndex": 67,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5648,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-templates')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-templates')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:206:48",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-templates')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#chip-spa-templates')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 48,
                                  "line": 206
                                },
                                "snippet": "\u001b[0m \u001b[90m 204 |\u001b[39m\n \u001b[90m 205 |\u001b[39m       test(\u001b[32m\"displays download CHIP eligibility SPA templates FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 206 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaTemplates)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 207 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaTemplates)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 208 |\u001b[39m           \u001b[32m\"Where can I download CHIP eligibility SPA templates?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 209 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 48,
                                    "line": 206
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-templates')\u001b[22m\n\n\n  204 |\n  205 |       test(\"displays download CHIP eligibility SPA templates FAQ\", async () => {\n> 206 |         await expect(faqPage.chipSpaTemplates).toBeVisible();\n      |                                                ^\n  207 |         await expect(faqPage.chipSpaTemplates).toHaveText(\n  208 |           \"Where can I download CHIP eligibility SPA templates?\",\n  209 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:206:48"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:33:59.672Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-280fe-igibility-SPA-templates-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 48,
                                "line": 206
                              }
                            },
                            {
                              "workerIndex": 68,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5510,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-templates')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-templates')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:206:48",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-templates')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#chip-spa-templates')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 48,
                                  "line": 206
                                },
                                "snippet": "\u001b[0m \u001b[90m 204 |\u001b[39m\n \u001b[90m 205 |\u001b[39m       test(\u001b[32m\"displays download CHIP eligibility SPA templates FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 206 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaTemplates)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 207 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaTemplates)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 208 |\u001b[39m           \u001b[32m\"Where can I download CHIP eligibility SPA templates?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 209 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 48,
                                    "line": 206
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-templates')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-templates')\u001b[22m\n\n\n  204 |\n  205 |       test(\"displays download CHIP eligibility SPA templates FAQ\", async () => {\n> 206 |         await expect(faqPage.chipSpaTemplates).toBeVisible();\n      |                                                ^\n  207 |         await expect(faqPage.chipSpaTemplates).toHaveText(\n  208 |           \"Where can I download CHIP eligibility SPA templates?\",\n  209 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:206:48"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:34:06.293Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 48,
                                "line": 206
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-f47e28b489e7752fcf61",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 205,
                      "column": 7
                    },
                    {
                      "title": "displays download CHIP eligibility SPA implementation guides FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 69,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5469,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-implentation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-implentation-guides')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-implentation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-implentation-guides')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:215:45",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-implentation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-implentation-guides')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#chip-spa-implentation-guides')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 45,
                                  "line": 215
                                },
                                "snippet": "\u001b[0m \u001b[90m 213 |\u001b[39m\n \u001b[90m 214 |\u001b[39m       test(\u001b[32m\"displays download CHIP eligibility SPA implementation guides FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 215 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaGuides)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 216 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaGuides)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 217 |\u001b[39m           \u001b[32m\"Where can I download CHIP eligibility SPA implementation guides?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 218 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 45,
                                    "line": 215
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-implentation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-implentation-guides')\u001b[22m\n\n\n  213 |\n  214 |       test(\"displays download CHIP eligibility SPA implementation guides FAQ\", async () => {\n> 215 |         await expect(faqPage.chipSpaGuides).toBeVisible();\n      |                                             ^\n  216 |         await expect(faqPage.chipSpaGuides).toHaveText(\n  217 |           \"Where can I download CHIP eligibility SPA implementation guides?\",\n  218 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:215:45"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:34:12.749Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 45,
                                "line": 215
                              }
                            },
                            {
                              "workerIndex": 70,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5636,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-implentation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-implentation-guides')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-implentation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-implentation-guides')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:215:45",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-implentation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-implentation-guides')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#chip-spa-implentation-guides')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 45,
                                  "line": 215
                                },
                                "snippet": "\u001b[0m \u001b[90m 213 |\u001b[39m\n \u001b[90m 214 |\u001b[39m       test(\u001b[32m\"displays download CHIP eligibility SPA implementation guides FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 215 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaGuides)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 216 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaGuides)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 217 |\u001b[39m           \u001b[32m\"Where can I download CHIP eligibility SPA implementation guides?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 218 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 45,
                                    "line": 215
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-implentation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-implentation-guides')\u001b[22m\n\n\n  213 |\n  214 |       test(\"displays download CHIP eligibility SPA implementation guides FAQ\", async () => {\n> 215 |         await expect(faqPage.chipSpaGuides).toBeVisible();\n      |                                             ^\n  216 |         await expect(faqPage.chipSpaGuides).toHaveText(\n  217 |           \"Where can I download CHIP eligibility SPA implementation guides?\",\n  218 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:215:45"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:34:19.175Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-864c1-A-implementation-guides-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 45,
                                "line": 215
                              }
                            },
                            {
                              "workerIndex": 71,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5491,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-implentation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-implentation-guides')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-implentation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-implentation-guides')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:215:45",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-implentation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-implentation-guides')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#chip-spa-implentation-guides')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 45,
                                  "line": 215
                                },
                                "snippet": "\u001b[0m \u001b[90m 213 |\u001b[39m\n \u001b[90m 214 |\u001b[39m       test(\u001b[32m\"displays download CHIP eligibility SPA implementation guides FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 215 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaGuides)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 216 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mchipSpaGuides)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 217 |\u001b[39m           \u001b[32m\"Where can I download CHIP eligibility SPA implementation guides?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 218 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 45,
                                    "line": 215
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#chip-spa-implentation-guides')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#chip-spa-implentation-guides')\u001b[22m\n\n\n  213 |\n  214 |       test(\"displays download CHIP eligibility SPA implementation guides FAQ\", async () => {\n> 215 |         await expect(faqPage.chipSpaGuides).toBeVisible();\n      |                                             ^\n  216 |         await expect(faqPage.chipSpaGuides).toHaveText(\n  217 |           \"Where can I download CHIP eligibility SPA implementation guides?\",\n  218 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:215:45"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:34:25.750Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 45,
                                "line": 215
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-ce499e6a378aacf18db0",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 214,
                      "column": 7
                    }
                  ]
                },
                {
                  "title": "Waivers Section",
                  "file": "e2e/faq/faq.spec.ts",
                  "line": 224,
                  "column": 10,
                  "specs": [
                    {
                      "title": "displays 1915(b) initial waiver number FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 72,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5475,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#initial-waiver-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#initial-waiver-id-format')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#initial-waiver-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#initial-waiver-id-format')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:226:46",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#initial-waiver-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#initial-waiver-id-format')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#initial-waiver-id-format')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 46,
                                  "line": 226
                                },
                                "snippet": "\u001b[0m \u001b[90m 224 |\u001b[39m     test\u001b[33m.\u001b[39mdescribe(\u001b[32m\"Waivers Section\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 225 |\u001b[39m       test(\u001b[32m\"displays 1915(b) initial waiver number FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 226 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverIdFormat)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 227 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverIdFormat)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 228 |\u001b[39m           \u001b[32m\"What format is used to enter a 1915(b) Initial Waiver number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 229 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 46,
                                    "line": 226
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#initial-waiver-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#initial-waiver-id-format')\u001b[22m\n\n\n  224 |     test.describe(\"Waivers Section\", () => {\n  225 |       test(\"displays 1915(b) initial waiver number FAQ\", async () => {\n> 226 |         await expect(faqPage.waiverIdFormat).toBeVisible();\n      |                                              ^\n  227 |         await expect(faqPage.waiverIdFormat).toHaveText(\n  228 |           \"What format is used to enter a 1915(b) Initial Waiver number?\",\n  229 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:226:46"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:34:32.168Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 46,
                                "line": 226
                              }
                            },
                            {
                              "workerIndex": 73,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5635,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#initial-waiver-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#initial-waiver-id-format')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#initial-waiver-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#initial-waiver-id-format')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:226:46",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#initial-waiver-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#initial-waiver-id-format')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#initial-waiver-id-format')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 46,
                                  "line": 226
                                },
                                "snippet": "\u001b[0m \u001b[90m 224 |\u001b[39m     test\u001b[33m.\u001b[39mdescribe(\u001b[32m\"Waivers Section\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 225 |\u001b[39m       test(\u001b[32m\"displays 1915(b) initial waiver number FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 226 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverIdFormat)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 227 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverIdFormat)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 228 |\u001b[39m           \u001b[32m\"What format is used to enter a 1915(b) Initial Waiver number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 229 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 46,
                                    "line": 226
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#initial-waiver-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#initial-waiver-id-format')\u001b[22m\n\n\n  224 |     test.describe(\"Waivers Section\", () => {\n  225 |       test(\"displays 1915(b) initial waiver number FAQ\", async () => {\n> 226 |         await expect(faqPage.waiverIdFormat).toBeVisible();\n      |                                              ^\n  227 |         await expect(faqPage.waiverIdFormat).toHaveText(\n  228 |           \"What format is used to enter a 1915(b) Initial Waiver number?\",\n  229 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:226:46"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:34:38.558Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-ddc77-b-initial-waiver-number-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 46,
                                "line": 226
                              }
                            },
                            {
                              "workerIndex": 74,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5488,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#initial-waiver-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#initial-waiver-id-format')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#initial-waiver-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#initial-waiver-id-format')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:226:46",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#initial-waiver-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#initial-waiver-id-format')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#initial-waiver-id-format')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 46,
                                  "line": 226
                                },
                                "snippet": "\u001b[0m \u001b[90m 224 |\u001b[39m     test\u001b[33m.\u001b[39mdescribe(\u001b[32m\"Waivers Section\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 225 |\u001b[39m       test(\u001b[32m\"displays 1915(b) initial waiver number FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 226 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverIdFormat)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 227 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverIdFormat)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 228 |\u001b[39m           \u001b[32m\"What format is used to enter a 1915(b) Initial Waiver number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 229 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 46,
                                    "line": 226
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#initial-waiver-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#initial-waiver-id-format')\u001b[22m\n\n\n  224 |     test.describe(\"Waivers Section\", () => {\n  225 |       test(\"displays 1915(b) initial waiver number FAQ\", async () => {\n> 226 |         await expect(faqPage.waiverIdFormat).toBeVisible();\n      |                                              ^\n  227 |         await expect(faqPage.waiverIdFormat).toHaveText(\n  228 |           \"What format is used to enter a 1915(b) Initial Waiver number?\",\n  229 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:226:46"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:34:45.146Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 46,
                                "line": 226
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-0b1b9fb9301d726ae420",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 225,
                      "column": 7
                    },
                    {
                      "title": "displays 1915(b) waiver renewal number FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 75,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5472,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-renewal-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-renewal-id-format')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-renewal-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-renewal-id-format')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:235:53",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-renewal-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-renewal-id-format')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiver-renewal-id-format')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 53,
                                  "line": 235
                                },
                                "snippet": "\u001b[0m \u001b[90m 233 |\u001b[39m\n \u001b[90m 234 |\u001b[39m       test(\u001b[32m\"displays 1915(b) waiver renewal number FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 235 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverRenewalIdFormat)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 236 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverRenewalIdFormat)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 237 |\u001b[39m           \u001b[32m\"What format is used to enter a 1915(b) Waiver Renewal number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 238 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 53,
                                    "line": 235
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-renewal-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-renewal-id-format')\u001b[22m\n\n\n  233 |\n  234 |       test(\"displays 1915(b) waiver renewal number FAQ\", async () => {\n> 235 |         await expect(faqPage.waiverRenewalIdFormat).toBeVisible();\n      |                                                     ^\n  236 |         await expect(faqPage.waiverRenewalIdFormat).toHaveText(\n  237 |           \"What format is used to enter a 1915(b) Waiver Renewal number?\",\n  238 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:235:53"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:34:51.569Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 53,
                                "line": 235
                              }
                            },
                            {
                              "workerIndex": 76,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5863,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#waiver-renewal-id-format')\nExpected string: \u001b[32m\"What format is used to enter a 1915(b) Waiver Renewal number?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-renewal-id-format')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#waiver-renewal-id-format')\nExpected string: \u001b[32m\"What format is used to enter a 1915(b) Waiver Renewal number?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-renewal-id-format')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:236:53",
                                "matcherResult": {
                                  "name": "toHaveText",
                                  "expected": "What format is used to enter a 1915(b) Waiver Renewal number?",
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#waiver-renewal-id-format')\nExpected string: \u001b[32m\"What format is used to enter a 1915(b) Waiver Renewal number?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-renewal-id-format')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "log": [
                                    "  - expect.toHaveText with timeout 5000ms",
                                    "  - waiting for locator('#waiver-renewal-id-format')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 53,
                                  "line": 236
                                },
                                "snippet": "\u001b[0m \u001b[90m 234 |\u001b[39m       test(\u001b[32m\"displays 1915(b) waiver renewal number FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 235 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverRenewalIdFormat)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 236 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverRenewalIdFormat)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 237 |\u001b[39m           \u001b[32m\"What format is used to enter a 1915(b) Waiver Renewal number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 238 |\u001b[39m         )\u001b[33m;\u001b[39m\n \u001b[90m 239 |\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 53,
                                    "line": 236
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#waiver-renewal-id-format')\nExpected string: \u001b[32m\"What format is used to enter a 1915(b) Waiver Renewal number?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-renewal-id-format')\u001b[22m\n\n\n  234 |       test(\"displays 1915(b) waiver renewal number FAQ\", async () => {\n  235 |         await expect(faqPage.waiverRenewalIdFormat).toBeVisible();\n> 236 |         await expect(faqPage.waiverRenewalIdFormat).toHaveText(\n      |                                                     ^\n  237 |           \"What format is used to enter a 1915(b) Waiver Renewal number?\",\n  238 |         );\n  239 |\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:236:53"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:34:57.947Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-bb3e8-b-waiver-renewal-number-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 53,
                                "line": 236
                              }
                            },
                            {
                              "workerIndex": 77,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5476,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-renewal-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-renewal-id-format')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-renewal-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-renewal-id-format')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:235:53",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-renewal-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-renewal-id-format')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiver-renewal-id-format')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 53,
                                  "line": 235
                                },
                                "snippet": "\u001b[0m \u001b[90m 233 |\u001b[39m\n \u001b[90m 234 |\u001b[39m       test(\u001b[32m\"displays 1915(b) waiver renewal number FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 235 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverRenewalIdFormat)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 236 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverRenewalIdFormat)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 237 |\u001b[39m           \u001b[32m\"What format is used to enter a 1915(b) Waiver Renewal number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 238 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 53,
                                    "line": 235
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-renewal-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-renewal-id-format')\u001b[22m\n\n\n  233 |\n  234 |       test(\"displays 1915(b) waiver renewal number FAQ\", async () => {\n> 235 |         await expect(faqPage.waiverRenewalIdFormat).toBeVisible();\n      |                                                     ^\n  236 |         await expect(faqPage.waiverRenewalIdFormat).toHaveText(\n  237 |           \"What format is used to enter a 1915(b) Waiver Renewal number?\",\n  238 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:235:53"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:35:04.752Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 53,
                                "line": 235
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-c6edef90252424ae41ae",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 234,
                      "column": 7
                    },
                    {
                      "title": "displays 1915(b) waiver amendment number FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 78,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5524,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-amendment-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-amendment-id-format')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-amendment-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-amendment-id-format')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:244:55",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-amendment-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-amendment-id-format')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiver-amendment-id-format')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 55,
                                  "line": 244
                                },
                                "snippet": "\u001b[0m \u001b[90m 242 |\u001b[39m\n \u001b[90m 243 |\u001b[39m       test(\u001b[32m\"displays 1915(b) waiver amendment number FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 244 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverAmendmentIdFormat)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 245 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverAmendmentIdFormat)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 246 |\u001b[39m           \u001b[32m\"What format is used to enter a 1915(b) Waiver Amendment number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 247 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 55,
                                    "line": 244
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-amendment-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-amendment-id-format')\u001b[22m\n\n\n  242 |\n  243 |       test(\"displays 1915(b) waiver amendment number FAQ\", async () => {\n> 244 |         await expect(faqPage.waiverAmendmentIdFormat).toBeVisible();\n      |                                                       ^\n  245 |         await expect(faqPage.waiverAmendmentIdFormat).toHaveText(\n  246 |           \"What format is used to enter a 1915(b) Waiver Amendment number?\",\n  247 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:244:55"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:35:11.126Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 55,
                                "line": 244
                              }
                            },
                            {
                              "workerIndex": 79,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5874,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#waiver-amendment-id-format')\nExpected string: \u001b[32m\"What format is used to enter a 1915(b) Waiver Amendment number?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-amendment-id-format')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#waiver-amendment-id-format')\nExpected string: \u001b[32m\"What format is used to enter a 1915(b) Waiver Amendment number?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-amendment-id-format')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:245:55",
                                "matcherResult": {
                                  "name": "toHaveText",
                                  "expected": "What format is used to enter a 1915(b) Waiver Amendment number?",
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#waiver-amendment-id-format')\nExpected string: \u001b[32m\"What format is used to enter a 1915(b) Waiver Amendment number?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-amendment-id-format')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "log": [
                                    "  - expect.toHaveText with timeout 5000ms",
                                    "  - waiting for locator('#waiver-amendment-id-format')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 55,
                                  "line": 245
                                },
                                "snippet": "\u001b[0m \u001b[90m 243 |\u001b[39m       test(\u001b[32m\"displays 1915(b) waiver amendment number FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 244 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverAmendmentIdFormat)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 245 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverAmendmentIdFormat)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m     |\u001b[39m                                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 246 |\u001b[39m           \u001b[32m\"What format is used to enter a 1915(b) Waiver Amendment number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 247 |\u001b[39m         )\u001b[33m;\u001b[39m\n \u001b[90m 248 |\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 55,
                                    "line": 245
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#waiver-amendment-id-format')\nExpected string: \u001b[32m\"What format is used to enter a 1915(b) Waiver Amendment number?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-amendment-id-format')\u001b[22m\n\n\n  243 |       test(\"displays 1915(b) waiver amendment number FAQ\", async () => {\n  244 |         await expect(faqPage.waiverAmendmentIdFormat).toBeVisible();\n> 245 |         await expect(faqPage.waiverAmendmentIdFormat).toHaveText(\n      |                                                       ^\n  246 |           \"What format is used to enter a 1915(b) Waiver Amendment number?\",\n  247 |         );\n  248 |\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:245:55"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:35:17.558Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": "IyBJbnN0cnVjdGlvbnMKCi0gRm9sbG93aW5nIFBsYXl3cmlnaHQgdGVzdCBmYWlsZWQuCi0gRXhwbGFpbiB3aHksIGJlIGNvbmNpc2UsIHJlc3BlY3QgUGxheXdyaWdodCBiZXN0IHByYWN0aWNlcy4KLSBQcm92aWRlIGEgc25pcHBldCBvZiBjb2RlIHdpdGggdGhlIGZpeCwgaWYgcG9zc2libGUuCgojIFRlc3QgaW5mbwoKLSBOYW1lOiBGQVEgcGFnZSA+PiBVSSB2YWxpZGF0aW9uID4+IFdhaXZlcnMgU2VjdGlvbiA+PiBkaXNwbGF5cyAxOTE1KGIpIHdhaXZlciBhbWVuZG1lbnQgbnVtYmVyIEZBUQotIExvY2F0aW9uOiAvaG9tZS9ydW5uZXIvd29yay9tYWNwcm8tbWFrby9tYWNwcm8tbWFrby90ZXN0L2UyZS9mYXEvZmFxLnNwZWMudHM6MjQzOjcKCiMgRXJyb3IgZGV0YWlscwoKYGBgCkVycm9yOiBUaW1lZCBvdXQgNTAwMG1zIHdhaXRpbmcgZm9yIGV4cGVjdChsb2NhdG9yKS50b0hhdmVUZXh0KGV4cGVjdGVkKQoKTG9jYXRvcjogbG9jYXRvcignI3dhaXZlci1hbWVuZG1lbnQtaWQtZm9ybWF0JykKRXhwZWN0ZWQgc3RyaW5nOiAiV2hhdCBmb3JtYXQgaXMgdXNlZCB0byBlbnRlciBhIDE5MTUoYikgV2FpdmVyIEFtZW5kbWVudCBudW1iZXI/IgpSZWNlaXZlZDogPGVsZW1lbnQocykgbm90IGZvdW5kPgpDYWxsIGxvZzoKICAtIGV4cGVjdC50b0hhdmVUZXh0IHdpdGggdGltZW91dCA1MDAwbXMKICAtIHdhaXRpbmcgZm9yIGxvY2F0b3IoJyN3YWl2ZXItYW1lbmRtZW50LWlkLWZvcm1hdCcpCgogICAgYXQgL2hvbWUvcnVubmVyL3dvcmsvbWFjcHJvLW1ha28vbWFjcHJvLW1ha28vdGVzdC9lMmUvZmFxL2ZhcS5zcGVjLnRzOjI0NTo1NQpgYGAKCiMgUGFnZSBzbmFwc2hvdAoKYGBgeWFtbAotIGJhbm5lcjoKICAtIGltZyAiQSBVbml0ZWQgU3RhdGVzIEZsYWcgaWNvbiIKICAtIHBhcmFncmFwaDogQW4gb2ZmaWNpYWwgd2Vic2l0ZSBvZiB0aGUgVW5pdGVkIFN0YXRlcyBnb3Zlcm5tZW50CiAgLSBidXR0b24gIkhlcmUncyBob3cgeW91IGtub3ciOgogICAgLSB0ZXh0OiBIZXJlJ3MgaG93IHlvdSBrbm93CiAgICAtIGltZwotIG5hdmlnYXRpb246CiAgLSBpbWcgIm9uZW1hYyBzaXRlIGxvZ28iCi0gbWFpbjoKICAtIGhlYWRpbmcgIk9uZU1BQyBTdXBwb3J0IiBbbGV2ZWw9MV0KICAtIGhlYWRpbmcgIlRvcGljcyIgW2xldmVsPTJdCiAgLSBoZWFkaW5nICJHZW5lcmFsIiBbbGV2ZWw9M106CiAgICAtIGJ1dHRvbiAiR2VuZXJhbCI6CiAgICAgIC0gdGV4dDogR2VuZXJhbAogICAgICAtIGltZwogIC0gaGVhZGluZyAiUGFja2FnZSBhY3Rpb25zIiBbbGV2ZWw9M106CiAgICAtIGJ1dHRvbiAiUGFja2FnZSBhY3Rpb25zIjoKICAgICAgLSB0ZXh0OiBQYWNrYWdlIGFjdGlvbnMKICAgICAgLSBpbWcKICAtIGhlYWRpbmcgIkltcGxlbWVudGF0aW9uIGd1aWRlcyIgW2xldmVsPTNdOgogICAgLSBidXR0b24gIkltcGxlbWVudGF0aW9uIGd1aWRlcyI6CiAgICAgIC0gdGV4dDogSW1wbGVtZW50YXRpb24gZ3VpZGVzCiAgICAgIC0gaW1nCiAgLSBoZWFkaW5nICJBY2Nlc3MgJiByb2xlcyIgW2xldmVsPTNdOgogICAgLSBidXR0b24gIkFjY2VzcyAmIHJvbGVzIjoKICAgICAgLSB0ZXh0OiBBY2Nlc3MgJiByb2xlcwogICAgICAtIGltZwogIC0gaGVhZGluZyAiVXNlciBwcm9maWxlIiBbbGV2ZWw9M106CiAgICAtIGJ1dHRvbiAiVXNlciBwcm9maWxlIjoKICAgICAgLSB0ZXh0OiBVc2VyIHByb2ZpbGUKICAgICAgLSBpbWcKICAtIGhlYWRpbmcgIkdsb3NzYXJ5IiBbbGV2ZWw9M106CiAgICAtIGJ1dHRvbiAiR2xvc3NhcnkiOgogICAgICAtIHRleHQ6IEdsb3NzYXJ5CiAgICAgIC0gaW1nCiAgLSBoZWFkaW5nICJOb3QgZmluZGluZyB0aGUgaW5mb3JtYXRpb24geW91IG5lZWQ/IiBbbGV2ZWw9M10KICAtIHBhcmFncmFwaDogQ29udGFjdCB0aGUgSGVscCBEZXNrCiAgLSBwYXJhZ3JhcGg6CiAgICAtIHRleHQ6ICJFbWFpbDoiCiAgICAtIGxpbmsgIk9uZU1BQ19IZWxwZGVza0BDTVMuaGhzLmdvdiIKICAtIHBhcmFncmFwaDoKICAgIC0gdGV4dDogTGVhdmUgYSBtZXNzYWdlIGF0CiAgICAtIGxpbmsgIig4ODMpIDIyOC0yNTQwIgogIC0gYXJ0aWNsZToKICAgIC0gaGVhZGluZyAiRnJlcXVlbnRseSBhc2tlZCBxdWVzdGlvbnMgKEZBUXMpIiBbbGV2ZWw9Ml0KICAgIC0gYnV0dG9uICJFeHBhbmQgYWxsIjoKICAgICAgLSB0ZXh0OiBFeHBhbmQgYWxsCiAgICAgIC0gaW1nCiAgICAtIHNlcGFyYXRvcgogICAgLSBoZWFkaW5nICJTaG91bGQgSSB1c2UgT25lTUFDIGZvciBteSBzdGF0ZSdzIHN1Ym1pc3Npb24/IiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJTaG91bGQgSSB1c2UgT25lTUFDIGZvciBteSBzdGF0ZSdzIHN1Ym1pc3Npb24/IjoKICAgICAgICAtIHRleHQ6IFNob3VsZCBJIHVzZSBPbmVNQUMgZm9yIG15IHN0YXRlJ3Mgc3VibWlzc2lvbj8KICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJJcyB3aGF0IEkgc3VibWl0IGluIE9uZU1BQyBjb25zaWRlcmVkIHRoZSBvZmZpY2lhbCBzdGF0ZSBzdWJtaXNzaW9uPyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiSXMgd2hhdCBJIHN1Ym1pdCBpbiBPbmVNQUMgY29uc2lkZXJlZCB0aGUgb2ZmaWNpYWwgc3RhdGUgc3VibWlzc2lvbj8iOgogICAgICAgIC0gdGV4dDogSXMgd2hhdCBJIHN1Ym1pdCBpbiBPbmVNQUMgY29uc2lkZXJlZCB0aGUgb2ZmaWNpYWwgc3RhdGUgc3VibWlzc2lvbj8KICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJXaGF0IHNob3VsZCBJIGRvIGlmIEkgZG9u4oCZdCBnZXQgYSBjb25maXJtYXRpb24gZW1haWw/IiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJXaGF0IHNob3VsZCBJIGRvIGlmIEkgZG9u4oCZdCBnZXQgYSBjb25maXJtYXRpb24gZW1haWw/IjoKICAgICAgICAtIHRleHQ6IFdoYXQgc2hvdWxkIEkgZG8gaWYgSSBkb27igJl0IGdldCBhIGNvbmZpcm1hdGlvbiBlbWFpbD8KICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJXaHkgZG9lcyB0aGUgc3RhdHVzIG9mIG15IHRlbXBvcmFyeSBleHRlbnNpb24gcmVxdWVzdCBjb250aW51ZSB0byBzaG93IGFzIOKAnHN1Ym1pdHRlZOKAnT8iIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIldoeSBkb2VzIHRoZSBzdGF0dXMgb2YgbXkgdGVtcG9yYXJ5IGV4dGVuc2lvbiByZXF1ZXN0IGNvbnRpbnVlIHRvIHNob3cgYXMg4oCcc3VibWl0dGVk4oCdPyI6CiAgICAgICAgLSB0ZXh0OiBXaHkgZG9lcyB0aGUgc3RhdHVzIG9mIG15IHRlbXBvcmFyeSBleHRlbnNpb24gcmVxdWVzdCBjb250aW51ZSB0byBzaG93IGFzIOKAnHN1Ym1pdHRlZOKAnT8KICAgICAgICAtIGltZwogIC0gYXJ0aWNsZToKICAgIC0gaGVhZGluZyAiR2VuZXJhbCIgW2xldmVsPTJdCiAgICAtIHNlcGFyYXRvcgogICAgLSBoZWFkaW5nICJTZWFyY2ggZm9yIHBhY2thZ2UgSUQgb3Igc3VibWl0dGVyIG5hbWUiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlNlYXJjaCBmb3IgcGFja2FnZSBJRCBvciBzdWJtaXR0ZXIgbmFtZSI6CiAgICAgICAgLSB0ZXh0OiBTZWFyY2ggZm9yIHBhY2thZ2UgSUQgb3Igc3VibWl0dGVyIG5hbWUKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJDdXN0b21pemUgeW91ciBkYXNoYm9hcmQgdmlldyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiQ3VzdG9taXplIHlvdXIgZGFzaGJvYXJkIHZpZXciOgogICAgICAgIC0gdGV4dDogQ3VzdG9taXplIHlvdXIgZGFzaGJvYXJkIHZpZXcKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJWaWV3IHN1Ym1pc3Npb24gcGFja2FnZSIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiVmlldyBzdWJtaXNzaW9uIHBhY2thZ2UiOgogICAgICAgIC0gdGV4dDogVmlldyBzdWJtaXNzaW9uIHBhY2thZ2UKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJBY2NlcHRlZCBmaWxlIHR5cGVzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJBY2NlcHRlZCBmaWxlIHR5cGVzIjoKICAgICAgICAtIHRleHQ6IEFjY2VwdGVkIGZpbGUgdHlwZXMKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJQYWNrYWdlIHN0YXR1c2VzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJQYWNrYWdlIHN0YXR1c2VzIjoKICAgICAgICAtIHRleHQ6IFBhY2thZ2Ugc3RhdHVzZXMKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJTdXBwb3J0ZWQgYnJvd3NlcnMiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlN1cHBvcnRlZCBicm93c2VycyI6CiAgICAgICAgLSB0ZXh0OiBTdXBwb3J0ZWQgYnJvd3NlcnMKICAgICAgICAtIGltZwogIC0gYXJ0aWNsZToKICAgIC0gaGVhZGluZyAiUGFja2FnZSBhY3Rpb25zIiBbbGV2ZWw9Ml0KICAgIC0gc2VwYXJhdG9yCiAgICAtIGhlYWRpbmcgIlN1Ym1pdCBuZXcgU1BBIG9yIHdhaXZlciIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiU3VibWl0IG5ldyBTUEEgb3Igd2FpdmVyIjoKICAgICAgICAtIHRleHQ6IFN1Ym1pdCBuZXcgU1BBIG9yIHdhaXZlcgogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIlJlc3BvbmQgdG8gUkFJIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJSZXNwb25kIHRvIFJBSSI6CiAgICAgICAgLSB0ZXh0OiBSZXNwb25kIHRvIFJBSQogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIldpdGhkcmF3IFJBSSByZXNwb25zZSIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiV2l0aGRyYXcgUkFJIHJlc3BvbnNlIjoKICAgICAgICAtIHRleHQ6IFdpdGhkcmF3IFJBSSByZXNwb25zZQogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIldpdGhkcmF3IHBhY2thZ2UiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIldpdGhkcmF3IHBhY2thZ2UiOgogICAgICAgIC0gdGV4dDogV2l0aGRyYXcgcGFja2FnZQogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIlJlcXVlc3QgdGVtcG9yYXJ5IGV4dGVuc2lvbiBmb3IgYSB3YWl2ZXIiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlJlcXVlc3QgdGVtcG9yYXJ5IGV4dGVuc2lvbiBmb3IgYSB3YWl2ZXIiOgogICAgICAgIC0gdGV4dDogUmVxdWVzdCB0ZW1wb3JhcnkgZXh0ZW5zaW9uIGZvciBhIHdhaXZlcgogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIkFkZCBhbWVuZG1lbnQgZm9yIDE5MTUoYikgd2FpdmVyIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJBZGQgYW1lbmRtZW50IGZvciAxOTE1KGIpIHdhaXZlciI6CiAgICAgICAgLSB0ZXh0OiBBZGQgYW1lbmRtZW50IGZvciAxOTE1KGIpIHdhaXZlcgogICAgICAgIC0gaW1nCiAgLSBhcnRpY2xlOgogICAgLSBoZWFkaW5nICJUZW1wbGF0ZXMgJiBpbXBsZW1lbnRhdGlvbiBndWlkZXMiIFtsZXZlbD0yXQogICAgLSBzZXBhcmF0b3IKICAgIC0gaGVhZGluZyAiTWVkaWNhaWQgQWx0ZXJuYXRpdmUgQmVuZWZpdCBQbGFuIChBQlApIFNQQSB0ZW1wbGF0ZXMiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIk1lZGljYWlkIEFsdGVybmF0aXZlIEJlbmVmaXQgUGxhbiAoQUJQKSBTUEEgdGVtcGxhdGVzIjoKICAgICAgICAtIHRleHQ6IE1lZGljYWlkIEFsdGVybmF0aXZlIEJlbmVmaXQgUGxhbiAoQUJQKSBTUEEgdGVtcGxhdGVzCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiTWVkaWNhaWQgQWx0ZXJuYXRpdmUgQmVuZWZpdCBQbGFuIChBQlApIFNQQSBpbXBsZW1lbnRhdGlvbiBndWlkZXMiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIk1lZGljYWlkIEFsdGVybmF0aXZlIEJlbmVmaXQgUGxhbiAoQUJQKSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzIjoKICAgICAgICAtIHRleHQ6IE1lZGljYWlkIEFsdGVybmF0aXZlIEJlbmVmaXQgUGxhbiAoQUJQKSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiTWVkaWNhaWQgUHJlbWl1bXMgYW5kIENvc3QgU2hhcmluZyAoTVBDKSBTUEEgdGVtcGxhdGVzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJNZWRpY2FpZCBQcmVtaXVtcyBhbmQgQ29zdCBTaGFyaW5nIChNUEMpIFNQQSB0ZW1wbGF0ZXMiOgogICAgICAgIC0gdGV4dDogTWVkaWNhaWQgUHJlbWl1bXMgYW5kIENvc3QgU2hhcmluZyAoTVBDKSBTUEEgdGVtcGxhdGVzCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiTWVkaWNhaWQgUHJlbWl1bXMgYW5kIENvc3QgU2hhcmluZyAoTVBDKSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJNZWRpY2FpZCBQcmVtaXVtcyBhbmQgQ29zdCBTaGFyaW5nIChNUEMpIFNQQSBpbXBsZW1lbnRhdGlvbiBndWlkZXMiOgogICAgICAgIC0gdGV4dDogTWVkaWNhaWQgUHJlbWl1bXMgYW5kIENvc3QgU2hhcmluZyAoTVBDKSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiQ0hJUCBlbGlnaWJpbGl0eSBTUEEgdGVtcGxhdGVzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJDSElQIGVsaWdpYmlsaXR5IFNQQSB0ZW1wbGF0ZXMiOgogICAgICAgIC0gdGV4dDogQ0hJUCBlbGlnaWJpbGl0eSBTUEEgdGVtcGxhdGVzCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiQ0hJUCBlbGlnaWJpbGl0eSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJDSElQIGVsaWdpYmlsaXR5IFNQQSBpbXBsZW1lbnRhdGlvbiBndWlkZXMiOgogICAgICAgIC0gdGV4dDogQ0hJUCBlbGlnaWJpbGl0eSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzCiAgICAgICAgLSBpbWcKICAtIGFydGljbGU6CiAgICAtIGhlYWRpbmcgIkFjY2VzcyAmIFJvbGVzIiBbbGV2ZWw9Ml0KICAgIC0gc2VwYXJhdG9yCiAgICAtIGhlYWRpbmcgIk9uZU1BQyB1c2VyIHJvbGVzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJPbmVNQUMgdXNlciByb2xlcyI6CiAgICAgICAgLSB0ZXh0OiBPbmVNQUMgdXNlciByb2xlcwogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIlJlcXVlc3Qgcm9sZSBpbiBPbmVNQUMiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlJlcXVlc3Qgcm9sZSBpbiBPbmVNQUMiOgogICAgICAgIC0gdGV4dDogUmVxdWVzdCByb2xlIGluIE9uZU1BQwogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIlJlcXVlc3Qgcm9sZSBjaGFuZ2UgaW4gT25lTUFDIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJSZXF1ZXN0IHJvbGUgY2hhbmdlIGluIE9uZU1BQyI6CiAgICAgICAgLSB0ZXh0OiBSZXF1ZXN0IHJvbGUgY2hhbmdlIGluIE9uZU1BQwogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIkFwcHJvdmUgb3IgZGVueSByb2xlIHJlcXVlc3QgKHN0YXRlIHN5c3RlbSBBZG1pbmlzdHJhdG9yIHVzZXJzKSIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiQXBwcm92ZSBvciBkZW55IHJvbGUgcmVxdWVzdCAoc3RhdGUgc3lzdGVtIEFkbWluaXN0cmF0b3IgdXNlcnMpIjoKICAgICAgICAtIHRleHQ6IEFwcHJvdmUgb3IgZGVueSByb2xlIHJlcXVlc3QgKHN0YXRlIHN5c3RlbSBBZG1pbmlzdHJhdG9yIHVzZXJzKQogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIklETSBpbnN0cnVjdGlvbnMgZm9yIE9uZU1BQyB1c2VycyAoUERGKSIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiSURNIGluc3RydWN0aW9ucyBmb3IgT25lTUFDIHVzZXJzIChQREYpIjoKICAgICAgICAtIHRleHQ6IElETSBpbnN0cnVjdGlvbnMgZm9yIE9uZU1BQyB1c2VycyAoUERGKQogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIk9uZU1BQyBJRE0gZ3VpZGUgKFBERikiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIk9uZU1BQyBJRE0gZ3VpZGUgKFBERikiOgogICAgICAgIC0gdGV4dDogT25lTUFDIElETSBndWlkZSAoUERGKQogICAgICAgIC0gaW1nCiAgLSBhcnRpY2xlOgogICAgLSBoZWFkaW5nICJVc2VyIHByb2ZpbGUiIFtsZXZlbD0yXQogICAgLSBzZXBhcmF0b3IKICAgIC0gaGVhZGluZyAiVmlldyB5b3VyIHVzZXIgcHJvZmlsZSIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiVmlldyB5b3VyIHVzZXIgcHJvZmlsZSI6CiAgICAgICAgLSB0ZXh0OiBWaWV3IHlvdXIgdXNlciBwcm9maWxlCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiQWRkIHBob25lIG51bWJlciB0byB5b3VyIHByb2ZpbGUiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIkFkZCBwaG9uZSBudW1iZXIgdG8geW91ciBwcm9maWxlIjoKICAgICAgICAtIHRleHQ6IEFkZCBwaG9uZSBudW1iZXIgdG8geW91ciBwcm9maWxlCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiQWRkIGFjY2VzcyB0byBhIHN0YXRlIGFzIFN0YXRlIFN1Ym1pdHRlciIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiQWRkIGFjY2VzcyB0byBhIHN0YXRlIGFzIFN0YXRlIFN1Ym1pdHRlciI6CiAgICAgICAgLSB0ZXh0OiBBZGQgYWNjZXNzIHRvIGEgc3RhdGUgYXMgU3RhdGUgU3VibWl0dGVyCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiUmVtb3ZlIGFjY2VzcyB0byBhIHN0YXRlIGFzIGEgU3RhdGUgU3VibWl0dGVyIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJSZW1vdmUgYWNjZXNzIHRvIGEgc3RhdGUgYXMgYSBTdGF0ZSBTdWJtaXR0ZXIiOgogICAgICAgIC0gdGV4dDogUmVtb3ZlIGFjY2VzcyB0byBhIHN0YXRlIGFzIGEgU3RhdGUgU3VibWl0dGVyCiAgICAgICAgLSBpbWcKICAtIGFydGljbGU6CiAgICAtIGhlYWRpbmcgIkdsb3NzYXJ5IiBbbGV2ZWw9Ml0KICAgIC0gc2VwYXJhdG9yCiAgICAtIGhlYWRpbmcgIkFwcHJvdmVkIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJBcHByb3ZlZCI6CiAgICAgICAgLSB0ZXh0OiBBcHByb3ZlZAogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIkRpc2FwcHJvdmVkIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJEaXNhcHByb3ZlZCI6CiAgICAgICAgLSB0ZXh0OiBEaXNhcHByb3ZlZAogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIlJBSSBpc3N1ZWQiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlJBSSBpc3N1ZWQiOgogICAgICAgIC0gdGV4dDogUkFJIGlzc3VlZAogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIlVuZGVyIHJldmlldyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiVW5kZXIgcmV2aWV3IjoKICAgICAgICAtIHRleHQ6IFVuZGVyIHJldmlldwogICAgICAgIC0gaW1nCi0gY29udGVudGluZm86CiAgLSBpbWcgIkxvZ28gZm9yIE1lZGljYWlkIgogIC0gaW1nICJMb2dvIGZvciBEZXBhcnRtZW50IG9mIEhlYWx0aCBhbmQgSHVtYW4gU2VydmljZXMiCiAgLSBwYXJhZ3JhcGg6IEEgZmVkZXJhbCBnb3Zlcm5tZW50IHdlYnNpdGUgbWFuYWdlZCBhbmQgcGFpZCBmb3IgYnkgdGhlIFUuUy4gQ2VudGVycyBmb3IgTWVkaWNhcmUgYW5kIE1lZGljYWlkIFNlcnZpY2VzIGFuZCBwYXJ0IG9mIHRoZSBNQUNQcm8gc3VpdGUuCiAgLSB0ZXh0OiBFbWFpbAogIC0gbGluayAiT25lTUFDX0hlbHBkZXNrQGNtcy5oaHMuZ292IgogIC0gdGV4dDogZm9yIGhlbHAgb3IgZmVlZGJhY2sgNzUwMCBTZWN1cml0eSBCb3VsZXZhcmQgQmFsdGltb3JlLCBNRCAyMTI0NApgYGAKCiMgVGVzdCBzb3VyY2UKCmBgYHRzCiAgMTQ1IHwgICAgICAgICAgICJIb3cgZG8gSSBXaXRoZHJhdyBhIFBhY2thZ2UgZm9yIGEgTWVkaWNhaWQgU1BBPyIsCiAgMTQ2IHwgICAgICAgICApOwogIDE0NyB8CiAgMTQ4IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53aXRoZHJhd1BhY2thZ2VTcGEubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAxNDkgfCAgICAgICB9KTsKICAxNTAgfAogIDE1MSB8ICAgICAgIHRlc3QoImRpc3BsYXlzIHdpdGhkcmF3IGZvcm1hbCBSQUkgZm9yIENISVAgU1BBIEZBUSIsIGFzeW5jICgpID0+IHsKICAxNTIgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndpdGhkcmF3Q2hpcFNwYVJhaSkudG9CZVZpc2libGUoKTsKICAxNTMgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndpdGhkcmF3Q2hpcFNwYVJhaSkudG9IYXZlVGV4dCgKICAxNTQgfCAgICAgICAgICAgIkhvdyBkbyBJIFdpdGhkcmF3IGEgRm9ybWFsIFJBSSBSZXNwb25zZSBmb3IgYSBDSElQIFNQQT8iLAogIDE1NSB8ICAgICAgICAgKTsKICAxNTYgfAogIDE1NyB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2l0aGRyYXdDaGlwU3BhUmFpLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgMTU4IHwgICAgICAgfSk7CiAgMTU5IHwKICAxNjAgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyB3aXRoZHJhdyBwYWNrYWdlIGZvciBDSElQIFNQQSBGQVEiLCBhc3luYyAoKSA9PiB7CiAgMTYxIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53aXRoZHJhd1BhY2thZ2VDaGlwU3BhKS50b0JlVmlzaWJsZSgpOwogIDE2MiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2l0aGRyYXdQYWNrYWdlQ2hpcFNwYSkudG9IYXZlVGV4dCgKICAxNjMgfCAgICAgICAgICAgIkhvdyBkbyBJIFdpdGhkcmF3IGEgUGFja2FnZSBmb3IgYSBDSElQIFNQQT8iLAogIDE2NCB8ICAgICAgICAgKTsKICAxNjUgfAogIDE2NiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2l0aGRyYXdQYWNrYWdlQ2hpcFNwYS5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDE2NyB8ICAgICAgIH0pOwogIDE2OCB8CiAgMTY5IHwgICAgICAgdGVzdCgiZGlzcGxheXMgZG93bmxvYWQgQUJQIFNQQSB0ZW1wbGF0ZXMgRkFRIiwgYXN5bmMgKCkgPT4gewogIDE3MCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYWJwU3BhVGVtcGxhdGVzKS50b0JlVmlzaWJsZSgpOwogIDE3MSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYWJwU3BhVGVtcGxhdGVzKS50b0hhdmVUZXh0KAogIDE3MiB8ICAgICAgICAgICAiV2hlcmUgY2FuIEkgZG93bmxvYWQgTWVkaWNhaWQgQWx0ZXJuYXRpdmUgQmVuZWZpdCBQbGFuIChBQlApIFNQQSB0ZW1wbGF0ZXM/IiwKICAxNzMgfCAgICAgICAgICk7CiAgMTc0IHwKICAxNzUgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmFicFNwYVRlbXBsYXRlcy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDE3NiB8ICAgICAgIH0pOwogIDE3NyB8CiAgMTc4IHwgICAgICAgdGVzdCgiZGlzcGxheXMgZG93bmxvYWQgQUJQIFNQQSBpbXBsZW1lbnRhdGlvbiBndWlkZXMgRkFRIiwgYXN5bmMgKCkgPT4gewogIDE3OSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYWJwU3BhR3VpZGVzKS50b0JlVmlzaWJsZSgpOwogIDE4MCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYWJwU3BhR3VpZGVzKS50b0hhdmVUZXh0KAogIDE4MSB8ICAgICAgICAgICAiV2hlcmUgY2FuIEkgZG93bmxvYWQgTWVkaWNhaWQgQWx0ZXJuYXRpdmUgQmVuZWZpdCBQbGFuIChBQlApIFNQQSBpbXBsZW1lbnRhdGlvbiBndWlkZXM/IiwKICAxODIgfCAgICAgICAgICk7CiAgMTgzIHwKICAxODQgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmFicFNwYUd1aWRlcy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDE4NSB8ICAgICAgIH0pOwogIDE4NiB8CiAgMTg3IHwgICAgICAgdGVzdCgiZGlzcGxheXMgZG93bmxvYWQgTVBDIFNQQSB0ZW1wbGF0ZXMgRkFRIiwgYXN5bmMgKCkgPT4gewogIDE4OCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UubXBjU3BhVGVtcGxhdGVzKS50b0JlVmlzaWJsZSgpOwogIDE4OSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UubXBjU3BhVGVtcGxhdGVzKS50b0hhdmVUZXh0KAogIDE5MCB8ICAgICAgICAgICAiV2hlcmUgY2FuIEkgZG93bmxvYWQgTWVkaWNhaWQgUHJlbWl1bXMgYW5kIENvc3QgU2hhcmluZyAoTVBDKSBTUEEgdGVtcGxhdGVzPyIsCiAgMTkxIHwgICAgICAgICApOwogIDE5MiB8CiAgMTkzIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5tcGNTcGFUZW1wbGF0ZXMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAxOTQgfCAgICAgICB9KTsKICAxOTUgfAogIDE5NiB8ICAgICAgIHRlc3QoImRpc3BsYXlzIGRvd25sb2FkIE1QQyBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzIEZBUSIsIGFzeW5jICgpID0+IHsKICAxOTcgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLm1wY1NwYUd1aWRlcykudG9CZVZpc2libGUoKTsKICAxOTggfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLm1wY1NwYUd1aWRlcykudG9IYXZlVGV4dCgKICAxOTkgfCAgICAgICAgICAgIldoZXJlIGNhbiBJIGRvd25sb2FkIE1lZGljYWlkIFByZW1pdW1zIGFuZCBDb3N0IFNoYXJpbmcgKE1QQykgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcz8iLAogIDIwMCB8ICAgICAgICAgKTsKICAyMDEgfAogIDIwMiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UubXBjU3BhR3VpZGVzLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgMjAzIHwgICAgICAgfSk7CiAgMjA0IHwKICAyMDUgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyBkb3dubG9hZCBDSElQIGVsaWdpYmlsaXR5IFNQQSB0ZW1wbGF0ZXMgRkFRIiwgYXN5bmMgKCkgPT4gewogIDIwNiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuY2hpcFNwYVRlbXBsYXRlcykudG9CZVZpc2libGUoKTsKICAyMDcgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmNoaXBTcGFUZW1wbGF0ZXMpLnRvSGF2ZVRleHQoCiAgMjA4IHwgICAgICAgICAgICJXaGVyZSBjYW4gSSBkb3dubG9hZCBDSElQIGVsaWdpYmlsaXR5IFNQQSB0ZW1wbGF0ZXM/IiwKICAyMDkgfCAgICAgICAgICk7CiAgMjEwIHwKICAyMTEgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmNoaXBTcGFUZW1wbGF0ZXMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAyMTIgfCAgICAgICB9KTsKICAyMTMgfAogIDIxNCB8ICAgICAgIHRlc3QoImRpc3BsYXlzIGRvd25sb2FkIENISVAgZWxpZ2liaWxpdHkgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcyBGQVEiLCBhc3luYyAoKSA9PiB7CiAgMjE1IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5jaGlwU3BhR3VpZGVzKS50b0JlVmlzaWJsZSgpOwogIDIxNiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuY2hpcFNwYUd1aWRlcykudG9IYXZlVGV4dCgKICAyMTcgfCAgICAgICAgICAgIldoZXJlIGNhbiBJIGRvd25sb2FkIENISVAgZWxpZ2liaWxpdHkgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcz8iLAogIDIxOCB8ICAgICAgICAgKTsKICAyMTkgfAogIDIyMCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuY2hpcFNwYUd1aWRlcy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDIyMSB8ICAgICAgIH0pOwogIDIyMiB8ICAgICB9KTsKICAyMjMgfAogIDIyNCB8ICAgICB0ZXN0LmRlc2NyaWJlKCJXYWl2ZXJzIFNlY3Rpb24iLCAoKSA9PiB7CiAgMjI1IHwgICAgICAgdGVzdCgiZGlzcGxheXMgMTkxNShiKSBpbml0aWFsIHdhaXZlciBudW1iZXIgRkFRIiwgYXN5bmMgKCkgPT4gewogIDIyNiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVySWRGb3JtYXQpLnRvQmVWaXNpYmxlKCk7CiAgMjI3IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53YWl2ZXJJZEZvcm1hdCkudG9IYXZlVGV4dCgKICAyMjggfCAgICAgICAgICAgIldoYXQgZm9ybWF0IGlzIHVzZWQgdG8gZW50ZXIgYSAxOTE1KGIpIEluaXRpYWwgV2FpdmVyIG51bWJlcj8iLAogIDIyOSB8ICAgICAgICAgKTsKICAyMzAgfAogIDIzMSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVySWRGb3JtYXQubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAyMzIgfCAgICAgICB9KTsKICAyMzMgfAogIDIzNCB8ICAgICAgIHRlc3QoImRpc3BsYXlzIDE5MTUoYikgd2FpdmVyIHJlbmV3YWwgbnVtYmVyIEZBUSIsIGFzeW5jICgpID0+IHsKICAyMzUgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlclJlbmV3YWxJZEZvcm1hdCkudG9CZVZpc2libGUoKTsKICAyMzYgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlclJlbmV3YWxJZEZvcm1hdCkudG9IYXZlVGV4dCgKICAyMzcgfCAgICAgICAgICAgIldoYXQgZm9ybWF0IGlzIHVzZWQgdG8gZW50ZXIgYSAxOTE1KGIpIFdhaXZlciBSZW5ld2FsIG51bWJlcj8iLAogIDIzOCB8ICAgICAgICAgKTsKICAyMzkgfAogIDI0MCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyUmVuZXdhbElkRm9ybWF0LmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgMjQxIHwgICAgICAgfSk7CiAgMjQyIHwKICAyNDMgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyAxOTE1KGIpIHdhaXZlciBhbWVuZG1lbnQgbnVtYmVyIEZBUSIsIGFzeW5jICgpID0+IHsKICAyNDQgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlckFtZW5kbWVudElkRm9ybWF0KS50b0JlVmlzaWJsZSgpOwo+IDI0NSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyQW1lbmRtZW50SWRGb3JtYXQpLnRvSGF2ZVRleHQoCiAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXiBFcnJvcjogVGltZWQgb3V0IDUwMDBtcyB3YWl0aW5nIGZvciBleHBlY3QobG9jYXRvcikudG9IYXZlVGV4dChleHBlY3RlZCkKICAyNDYgfCAgICAgICAgICAgIldoYXQgZm9ybWF0IGlzIHVzZWQgdG8gZW50ZXIgYSAxOTE1KGIpIFdhaXZlciBBbWVuZG1lbnQgbnVtYmVyPyIsCiAgMjQ3IHwgICAgICAgICApOwogIDI0OCB8CiAgMjQ5IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53YWl2ZXJBbWVuZG1lbnRJZEZvcm1hdC5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDI1MCB8ICAgICAgIH0pOwogIDI1MSB8CiAgMjUyIHwgICAgICAgdGVzdCgiZGlzcGxheXMgY29udGFjdCBoZWxwIGZvciAxOTE1KGIpIHdhaXZlciBGQVEiLCBhc3luYyAoKSA9PiB7CiAgMjUzIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53YWl2ZXJJZEhlbHApLnRvQmVWaXNpYmxlKCk7CiAgMjU0IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53YWl2ZXJJZEhlbHApLnRvSGF2ZVRleHQoCiAgMjU1IHwgICAgICAgICAgICJXaG8gY2FuIEkgY29udGFjdCB0byBoZWxwIG1lIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgMTkxNShiKSBXYWl2ZXIgTnVtYmVyPyIsCiAgMjU2IHwgICAgICAgICApOwogIDI1NyB8CiAgMjU4IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53YWl2ZXJJZEhlbHAubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAyNTkgfCAgICAgICB9KTsKICAyNjAgfAogIDI2MSB8ICAgICAgIHRlc3QoImRpc3BsYXlzIGZvcm1hdCAxOTE1KGMpIHdhaXZlciBudW1iZXIgRkFRIiwgYXN5bmMgKCkgPT4gewogIDI2MiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyQ0lkKS50b0JlVmlzaWJsZSgpOwogIDI2MyB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyQ0lkKS50b0hhdmVUZXh0KAogIDI2NCB8ICAgICAgICAgICAiV2hhdCBmb3JtYXQgaXMgdXNlZCB0byBlbnRlciBhIDE5MTUoYykgd2FpdmVyIG51bWJlcj8iLAogIDI2NSB8ICAgICAgICAgKTsKICAyNjYgfAogIDI2NyB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyQ0lkLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgMjY4IHwgICAgICAgfSk7CiAgMjY5IHwKICAyNzAgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyBhdHRhY2htZW50cyBhcmUgbmVlZGVkIGZvciAxOTE1KGIpIHdhaXZlciBhY3Rpb24gRkFRIiwgYXN5bmMgKCkgPT4gewogIDI3MSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyQkF0dGFjaG1lbnRzKS50b0JlVmlzaWJsZSgpOwogIDI3MiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyQkF0dGFjaG1lbnRzKS50b0hhdmVUZXh0KAogIDI3MyB8ICAgICAgICAgICAiV2hhdCBhdHRhY2htZW50cyBhcmUgbmVlZGVkIHRvIHN1Ym1pdCBhIDE5MTUoYikgd2FpdmVyIGFjdGlvbj8iLAogIDI3NCB8ICAgICAgICAgKTsKICAyNzUgfAogIDI3NiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyQkF0dGFjaG1lbnRzLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgMjc3IHwgICAgICAgfSk7CiAgMjc4IHwKICAyNzkgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyBhdHRhY2htZW50cyAxOTE1YiBhbmQgYyBBcHAgSyBSQUkgcmVzcG9uc2UgRkFRIiwgYXN5bmMgKCkgPT4gewogIDI4MCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyQlJhaUF0dGFjaG1lbnRzKS50b0JlVmlzaWJsZSgpOwogIDI4MSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyQlJhaUF0dGFjaG1lbnRzKS50b0hhdmVUZXh0KAogIDI4MiB8ICAgICAgICAgICAiV2hhdCBhcmUgdGhlIGF0dGFjaG1lbnRzIGZvciBhIDE5MTUoYikgV2FpdmVyIGFuZCAxOTE1KGMpIEFwcGVuZGl4IEsgcmVzcG9uc2UgdG8gUmVxdWVzdCBmb3IgQWRkaXRpb25hbCBJbmZvcm1hdGlvbiAoUkFJKT8iLAogIDI4MyB8ICAgICAgICAgKTsKICAyODQgfAogIDI4NSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyQlJhaUF0dGFjaG1lbnRzLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgMjg2IHwgICAgICAgfSk7CiAgMjg3IHwKICAyODggfCAgICAgICB0ZXN0KCJkaXNwbGF5cyB0ZW1wb3JhcnkgZXh0ZW5zaW9uIGZvcm1hdCBGQVEiLCBhc3luYyAoKSA9PiB7CiAgMjg5IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53YWl2ZXJFeHRlbnNpb25JZEZvcm1hdCkudG9CZVZpc2libGUoKTsKICAyOTAgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlckV4dGVuc2lvbklkRm9ybWF0KS50b0hhdmVUZXh0KAogIDI5MSB8ICAgICAgICAgICAiV2hhdCBmb3JtYXQgaXMgdXNlZCB0byBlbnRlciBhIDE5MTUoYikgb3IgMTkxNShjKSBUZW1wb3JhcnkgRXh0ZW5zaW9uIG51bWJlcj8iLAogIDI5MiB8ICAgICAgICAgKTsKICAyOTMgfAogIDI5NCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyRXh0ZW5zaW9uSWRGb3JtYXQubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAyOTUgfCAgICAgICB9KTsKICAyOTYgfAogIDI5NyB8ICAgICAgIHRlc3QoImRpc3BsYXlzIHN0YXR1cyBvZiBteSB0ZW1wb3JhcnkgZXh0ZW5zaW9uIEZBUSIsIGFzeW5jICgpID0+IHsKICAyOTggfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlckV4dGVuc2lvblN0YXR1cykudG9CZVZpc2libGUoKTsKICAyOTkgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlckV4dGVuc2lvblN0YXR1cykudG9IYXZlVGV4dCgKICAzMDAgfCAgICAgICAgICAgIldoeSBkb2VzIHRoZSBzdGF0dXMgb2YgbXkgVGVtcG9yYXJ5IEV4dGVuc2lvbiBSZXF1ZXN0IGNvbnRpbnVlIHRvIHNob3cgYXMgJ1N1Ym1pdHRlZCc/IiwKICAzMDEgfCAgICAgICAgICk7CiAgMzAyIHwKICAzMDMgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlckV4dGVuc2lvblN0YXR1cy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDMwNCB8ICAgICAgIH0pOwogIDMwNSB8CiAgMzA2IHwgICAgICAgLy8gcmVtb3ZlIHNraXAgd2hlbiBzZWxlY3RvciBpcyB1cGRhdGVkIGluIGFwcGxpY2F0aW9uCiAgMzA3IHwgICAgICAgdGVzdC5za2lwKCJkaXNwbGF5cyBhdHRhY2htZW50cyBmb3IgMTkxNShiKSB3YWl2ZXIgRkFRIiwgYXN5bmMgKCkgPT4gewogIDMwOCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UudGVtcEV4dGVuc2lvbkJBdHRhY2htZW50cykudG9CZVZpc2libGUoKTsKICAzMDkgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLnRlbXBFeHRlbnNpb25CQXR0YWNobWVudHMpLnRvSGF2ZVRleHQoCiAgMzEwIHwgICAgICAgICAgICJXaGF0IGFyZSB0aGUgYXR0YWNobWVudHMgZm9yIGEgMTkxNShiKSBXYWl2ZXIgLSBSZXF1ZXN0IGZvciBUZW1wb3JhcnkgRXh0ZW5zaW9uPyIsCiAgMzExIHwgICAgICAgICApOwogIDMxMiB8CiAgMzEzIHwgICAgICAgICBhd2FpdCBleHBlY3QoCiAgMzE0IHwgICAgICAgICAgIGZhcVBhZ2UudGVtcEV4dGVuc2lvbkJBdHRhY2htZW50cy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIiksCiAgMzE1IHwgICAgICAgICApLm5vdC50b0JlVmlzaWJsZSgpOwogIDMxNiB8ICAgICAgIH0pOwogIDMxNyB8CiAgMzE4IHwgICAgICAgLy8gcmVtb3ZlIHNraXAgd2hlbiBzZWxlY3RvciBpcyB1cGRhdGVkIGluIGFwcGxpY2F0aW9uCiAgMzE5IHwgICAgICAgdGVzdC5za2lwKCJkaXNwbGF5cyBhdHRhY2htZW50cyBmb3IgMTkxNShjKSB3YWl2ZXIgRkFRIiwgYXN5bmMgKCkgPT4gewogIDMyMCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UudGVtcEV4dGVuc2lvbkNBdHRhY2htZW50cykudG9CZVZpc2libGUoKTsKICAzMjEgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLnRlbXBFeHRlbnNpb25DQXR0YWNobWVudHMpLnRvSGF2ZVRleHQoCiAgMzIyIHwgICAgICAgICAgICJXaGF0IGFyZSB0aGUgYXR0YWNobWVudHMgZm9yIGEgMTkxNShjKSBXYWl2ZXIgLSBSZXF1ZXN0IGZvciBUZW1wb3JhcnkgRXh0ZW5zaW9uPyIsCiAgMzIzIHwgICAgICAgICApOwogIDMyNCB8CiAgMzI1IHwgICAgICAgICBhd2FpdCBleHBlY3QoCiAgMzI2IHwgICAgICAgICAgIGZhcVBhZ2UudGVtcEV4dGVuc2lvbkNBdHRhY2htZW50cy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIiksCiAgMzI3IHwgICAgICAgICApLm5vdC50b0JlVmlzaWJsZSgpOwogIDMyOCB8ICAgICAgIH0pOwogIDMyOSB8CiAgMzMwIHwgICAgICAgdGVzdCgiZGlzcGxheXMgc3VibWl0IEFwcCBLIGF0dGFjaG1lbnRzIEZBUSIsIGFzeW5jICgpID0+IHsKICAzMzEgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmFwcEspLnRvQmVWaXNpYmxlKCk7CiAgMzMyIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5hcHBLKS50b0hhdmVUZXh0KCJDYW4gSSBzdWJtaXQgQXBwZW5kaXggSyBhbWVuZG1lbnRzIGluIE9uZU1BQz8iKTsKICAzMzMgfAogIDMzNCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYXBwSy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDMzNSB8ICAgICAgIH0pOwogIDMzNiB8CiAgMzM3IHwgICAgICAgdGVzdCgiZGlzcGxheXMgYXR0YWNobWVudHMgZm9yIDE5MTUoYykgQXBwZW5kaXggSyB3YWl2ZXIgRkFRIiwgYXN5bmMgKCkgPT4gewogIDMzOCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYXBwS0F0dGFjaG1lbnRzKS50b0JlVmlzaWJsZSgpOwogIDMzOSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYXBwS0F0dGFjaG1lbnRzKS50b0hhdmVUZXh0KAogIDM0MCB8ICAgICAgICAgICAiV2hhdCBhcmUgdGhlIGF0dGFjaG1lbnRzIGZvciBhIDE5MTUoYykgQXBwZW5kaXggSyBXYWl2ZXI/IiwKICAzNDEgfCAgICAgICAgICk7CiAgMzQyIHwKICAzNDMgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmFwcEtBdHRhY2htZW50cy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDM0NCB8ICAgICAgIH0pOwogIDM0NSB8CmBgYA=="
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-5216f-waiver-amendment-number-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 55,
                                "line": 245
                              }
                            },
                            {
                              "workerIndex": 80,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5478,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-amendment-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-amendment-id-format')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-amendment-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-amendment-id-format')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:244:55",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-amendment-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-amendment-id-format')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiver-amendment-id-format')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 55,
                                  "line": 244
                                },
                                "snippet": "\u001b[0m \u001b[90m 242 |\u001b[39m\n \u001b[90m 243 |\u001b[39m       test(\u001b[32m\"displays 1915(b) waiver amendment number FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 244 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverAmendmentIdFormat)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 245 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverAmendmentIdFormat)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 246 |\u001b[39m           \u001b[32m\"What format is used to enter a 1915(b) Waiver Amendment number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 247 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 55,
                                    "line": 244
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-amendment-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-amendment-id-format')\u001b[22m\n\n\n  242 |\n  243 |       test(\"displays 1915(b) waiver amendment number FAQ\", async () => {\n> 244 |         await expect(faqPage.waiverAmendmentIdFormat).toBeVisible();\n      |                                                       ^\n  245 |         await expect(faqPage.waiverAmendmentIdFormat).toHaveText(\n  246 |           \"What format is used to enter a 1915(b) Waiver Amendment number?\",\n  247 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:244:55"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:35:24.384Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 55,
                                "line": 244
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-2731559be7403b6be3b2",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 243,
                      "column": 7
                    },
                    {
                      "title": "displays contact help for 1915(b) waiver FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 81,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5479,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-id-help')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-id-help')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-id-help')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-id-help')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:253:44",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-id-help')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-id-help')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiver-id-help')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 44,
                                  "line": 253
                                },
                                "snippet": "\u001b[0m \u001b[90m 251 |\u001b[39m\n \u001b[90m 252 |\u001b[39m       test(\u001b[32m\"displays contact help for 1915(b) waiver FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 253 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverIdHelp)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 254 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverIdHelp)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 255 |\u001b[39m           \u001b[32m\"Who can I contact to help me figure out the correct 1915(b) Waiver Number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 256 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 44,
                                    "line": 253
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-id-help')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-id-help')\u001b[22m\n\n\n  251 |\n  252 |       test(\"displays contact help for 1915(b) waiver FAQ\", async () => {\n> 253 |         await expect(faqPage.waiverIdHelp).toBeVisible();\n      |                                            ^\n  254 |         await expect(faqPage.waiverIdHelp).toHaveText(\n  255 |           \"Who can I contact to help me figure out the correct 1915(b) Waiver Number?\",\n  256 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:253:44"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:35:30.778Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 44,
                                "line": 253
                              }
                            },
                            {
                              "workerIndex": 82,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5651,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-id-help')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-id-help')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-id-help')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-id-help')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:253:44",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-id-help')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-id-help')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiver-id-help')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 44,
                                  "line": 253
                                },
                                "snippet": "\u001b[0m \u001b[90m 251 |\u001b[39m\n \u001b[90m 252 |\u001b[39m       test(\u001b[32m\"displays contact help for 1915(b) waiver FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 253 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverIdHelp)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 254 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverIdHelp)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 255 |\u001b[39m           \u001b[32m\"Who can I contact to help me figure out the correct 1915(b) Waiver Number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 256 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 44,
                                    "line": 253
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-id-help')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-id-help')\u001b[22m\n\n\n  251 |\n  252 |       test(\"displays contact help for 1915(b) waiver FAQ\", async () => {\n> 253 |         await expect(faqPage.waiverIdHelp).toBeVisible();\n      |                                            ^\n  254 |         await expect(faqPage.waiverIdHelp).toHaveText(\n  255 |           \"Who can I contact to help me figure out the correct 1915(b) Waiver Number?\",\n  256 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:253:44"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:35:37.175Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-ecb40--help-for-1915-b-waiver-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 44,
                                "line": 253
                              }
                            },
                            {
                              "workerIndex": 83,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5474,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-id-help')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-id-help')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-id-help')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-id-help')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:253:44",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-id-help')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-id-help')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiver-id-help')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 44,
                                  "line": 253
                                },
                                "snippet": "\u001b[0m \u001b[90m 251 |\u001b[39m\n \u001b[90m 252 |\u001b[39m       test(\u001b[32m\"displays contact help for 1915(b) waiver FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 253 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverIdHelp)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 254 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverIdHelp)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 255 |\u001b[39m           \u001b[32m\"Who can I contact to help me figure out the correct 1915(b) Waiver Number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 256 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 44,
                                    "line": 253
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-id-help')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-id-help')\u001b[22m\n\n\n  251 |\n  252 |       test(\"displays contact help for 1915(b) waiver FAQ\", async () => {\n> 253 |         await expect(faqPage.waiverIdHelp).toBeVisible();\n      |                                            ^\n  254 |         await expect(faqPage.waiverIdHelp).toHaveText(\n  255 |           \"Who can I contact to help me figure out the correct 1915(b) Waiver Number?\",\n  256 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:253:44"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:35:43.786Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 44,
                                "line": 253
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-3813a297da89cb94f0c1",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 252,
                      "column": 7
                    },
                    {
                      "title": "displays format 1915(c) waiver number FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 84,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5506,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-c-id')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-c-id')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-c-id')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-c-id')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:262:41",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-c-id')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-c-id')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiver-c-id')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 41,
                                  "line": 262
                                },
                                "snippet": "\u001b[0m \u001b[90m 260 |\u001b[39m\n \u001b[90m 261 |\u001b[39m       test(\u001b[32m\"displays format 1915(c) waiver number FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 262 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverCId)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 263 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverCId)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 264 |\u001b[39m           \u001b[32m\"What format is used to enter a 1915(c) waiver number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 265 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 41,
                                    "line": 262
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-c-id')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-c-id')\u001b[22m\n\n\n  260 |\n  261 |       test(\"displays format 1915(c) waiver number FAQ\", async () => {\n> 262 |         await expect(faqPage.waiverCId).toBeVisible();\n      |                                         ^\n  263 |         await expect(faqPage.waiverCId).toHaveText(\n  264 |           \"What format is used to enter a 1915(c) waiver number?\",\n  265 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:262:41"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:35:50.181Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 41,
                                "line": 262
                              }
                            },
                            {
                              "workerIndex": 85,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5645,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-c-id')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-c-id')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-c-id')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-c-id')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:262:41",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-c-id')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-c-id')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiver-c-id')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 41,
                                  "line": 262
                                },
                                "snippet": "\u001b[0m \u001b[90m 260 |\u001b[39m\n \u001b[90m 261 |\u001b[39m       test(\u001b[32m\"displays format 1915(c) waiver number FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 262 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverCId)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 263 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverCId)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 264 |\u001b[39m           \u001b[32m\"What format is used to enter a 1915(c) waiver number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 265 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 41,
                                    "line": 262
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-c-id')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-c-id')\u001b[22m\n\n\n  260 |\n  261 |       test(\"displays format 1915(c) waiver number FAQ\", async () => {\n> 262 |         await expect(faqPage.waiverCId).toBeVisible();\n      |                                         ^\n  263 |         await expect(faqPage.waiverCId).toHaveText(\n  264 |           \"What format is used to enter a 1915(c) waiver number?\",\n  265 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:262:41"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:35:56.598Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-56a1e-at-1915-c-waiver-number-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 41,
                                "line": 262
                              }
                            },
                            {
                              "workerIndex": 86,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5477,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-c-id')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-c-id')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-c-id')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-c-id')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:262:41",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-c-id')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-c-id')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiver-c-id')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 41,
                                  "line": 262
                                },
                                "snippet": "\u001b[0m \u001b[90m 260 |\u001b[39m\n \u001b[90m 261 |\u001b[39m       test(\u001b[32m\"displays format 1915(c) waiver number FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 262 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverCId)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 263 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverCId)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 264 |\u001b[39m           \u001b[32m\"What format is used to enter a 1915(c) waiver number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 265 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 41,
                                    "line": 262
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-c-id')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-c-id')\u001b[22m\n\n\n  260 |\n  261 |       test(\"displays format 1915(c) waiver number FAQ\", async () => {\n> 262 |         await expect(faqPage.waiverCId).toBeVisible();\n      |                                         ^\n  263 |         await expect(faqPage.waiverCId).toHaveText(\n  264 |           \"What format is used to enter a 1915(c) waiver number?\",\n  265 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:262:41"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:36:03.202Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 41,
                                "line": 262
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-c73f20857b1a12b240d4",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 261,
                      "column": 7
                    },
                    {
                      "title": "displays attachments are needed for 1915(b) waiver action FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 87,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5480,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:271:50",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiverb-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 50,
                                  "line": 271
                                },
                                "snippet": "\u001b[0m \u001b[90m 269 |\u001b[39m\n \u001b[90m 270 |\u001b[39m       test(\u001b[32m\"displays attachments are needed for 1915(b) waiver action FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 271 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverBAttachments)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 272 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverBAttachments)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 273 |\u001b[39m           \u001b[32m\"What attachments are needed to submit a 1915(b) waiver action?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 274 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 50,
                                    "line": 271
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-attachments')\u001b[22m\n\n\n  269 |\n  270 |       test(\"displays attachments are needed for 1915(b) waiver action FAQ\", async () => {\n> 271 |         await expect(faqPage.waiverBAttachments).toBeVisible();\n      |                                                  ^\n  272 |         await expect(faqPage.waiverBAttachments).toHaveText(\n  273 |           \"What attachments are needed to submit a 1915(b) waiver action?\",\n  274 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:271:50"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:36:09.590Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 50,
                                "line": 271
                              }
                            },
                            {
                              "workerIndex": 88,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5879,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#waiverb-attachments')\nExpected string: \u001b[32m\"What attachments are needed to submit a 1915(b) waiver action?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#waiverb-attachments')\nExpected string: \u001b[32m\"What attachments are needed to submit a 1915(b) waiver action?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:272:50",
                                "matcherResult": {
                                  "name": "toHaveText",
                                  "expected": "What attachments are needed to submit a 1915(b) waiver action?",
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#waiverb-attachments')\nExpected string: \u001b[32m\"What attachments are needed to submit a 1915(b) waiver action?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "log": [
                                    "  - expect.toHaveText with timeout 5000ms",
                                    "  - waiting for locator('#waiverb-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 50,
                                  "line": 272
                                },
                                "snippet": "\u001b[0m \u001b[90m 270 |\u001b[39m       test(\u001b[32m\"displays attachments are needed for 1915(b) waiver action FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 271 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverBAttachments)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 272 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverBAttachments)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m     |\u001b[39m                                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 273 |\u001b[39m           \u001b[32m\"What attachments are needed to submit a 1915(b) waiver action?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 274 |\u001b[39m         )\u001b[33m;\u001b[39m\n \u001b[90m 275 |\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 50,
                                    "line": 272
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#waiverb-attachments')\nExpected string: \u001b[32m\"What attachments are needed to submit a 1915(b) waiver action?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-attachments')\u001b[22m\n\n\n  270 |       test(\"displays attachments are needed for 1915(b) waiver action FAQ\", async () => {\n  271 |         await expect(faqPage.waiverBAttachments).toBeVisible();\n> 272 |         await expect(faqPage.waiverBAttachments).toHaveText(\n      |                                                  ^\n  273 |           \"What attachments are needed to submit a 1915(b) waiver action?\",\n  274 |         );\n  275 |\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:272:50"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:36:15.986Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-d610c-or-1915-b-waiver-action-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 50,
                                "line": 272
                              }
                            },
                            {
                              "workerIndex": 89,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5489,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:271:50",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiverb-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 50,
                                  "line": 271
                                },
                                "snippet": "\u001b[0m \u001b[90m 269 |\u001b[39m\n \u001b[90m 270 |\u001b[39m       test(\u001b[32m\"displays attachments are needed for 1915(b) waiver action FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 271 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverBAttachments)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 272 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverBAttachments)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 273 |\u001b[39m           \u001b[32m\"What attachments are needed to submit a 1915(b) waiver action?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 274 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 50,
                                    "line": 271
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-attachments')\u001b[22m\n\n\n  269 |\n  270 |       test(\"displays attachments are needed for 1915(b) waiver action FAQ\", async () => {\n> 271 |         await expect(faqPage.waiverBAttachments).toBeVisible();\n      |                                                  ^\n  272 |         await expect(faqPage.waiverBAttachments).toHaveText(\n  273 |           \"What attachments are needed to submit a 1915(b) waiver action?\",\n  274 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:271:50"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:36:22.813Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 50,
                                "line": 271
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-ce2108fe05af78d4ed8d",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 270,
                      "column": 7
                    },
                    {
                      "title": "displays attachments 1915b and c App K RAI response FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 90,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5486,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-rai-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-rai-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:280:53",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-rai-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiverb-rai-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 53,
                                  "line": 280
                                },
                                "snippet": "\u001b[0m \u001b[90m 278 |\u001b[39m\n \u001b[90m 279 |\u001b[39m       test(\u001b[32m\"displays attachments 1915b and c App K RAI response FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 280 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverBRaiAttachments)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 281 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverBRaiAttachments)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 282 |\u001b[39m           \u001b[32m\"What are the attachments for a 1915(b) Waiver and 1915(c) Appendix K response to Request for Additional Information (RAI)?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 283 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 53,
                                    "line": 280
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-rai-attachments')\u001b[22m\n\n\n  278 |\n  279 |       test(\"displays attachments 1915b and c App K RAI response FAQ\", async () => {\n> 280 |         await expect(faqPage.waiverBRaiAttachments).toBeVisible();\n      |                                                     ^\n  281 |         await expect(faqPage.waiverBRaiAttachments).toHaveText(\n  282 |           \"What are the attachments for a 1915(b) Waiver and 1915(c) Appendix K response to Request for Additional Information (RAI)?\",\n  283 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:280:53"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:36:29.246Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 53,
                                "line": 280
                              }
                            },
                            {
                              "workerIndex": 91,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5654,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-rai-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-rai-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:280:53",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-rai-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiverb-rai-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 53,
                                  "line": 280
                                },
                                "snippet": "\u001b[0m \u001b[90m 278 |\u001b[39m\n \u001b[90m 279 |\u001b[39m       test(\u001b[32m\"displays attachments 1915b and c App K RAI response FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 280 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverBRaiAttachments)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 281 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverBRaiAttachments)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 282 |\u001b[39m           \u001b[32m\"What are the attachments for a 1915(b) Waiver and 1915(c) Appendix K response to Request for Additional Information (RAI)?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 283 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 53,
                                    "line": 280
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-rai-attachments')\u001b[22m\n\n\n  278 |\n  279 |       test(\"displays attachments 1915b and c App K RAI response FAQ\", async () => {\n> 280 |         await expect(faqPage.waiverBRaiAttachments).toBeVisible();\n      |                                                     ^\n  281 |         await expect(faqPage.waiverBRaiAttachments).toHaveText(\n  282 |           \"What are the attachments for a 1915(b) Waiver and 1915(c) Appendix K response to Request for Additional Information (RAI)?\",\n  283 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:280:53"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:36:35.643Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-004d4-nd-c-App-K-RAI-response-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 53,
                                "line": 280
                              }
                            },
                            {
                              "workerIndex": 92,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5486,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-rai-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-rai-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:280:53",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-rai-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiverb-rai-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 53,
                                  "line": 280
                                },
                                "snippet": "\u001b[0m \u001b[90m 278 |\u001b[39m\n \u001b[90m 279 |\u001b[39m       test(\u001b[32m\"displays attachments 1915b and c App K RAI response FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 280 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverBRaiAttachments)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 281 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverBRaiAttachments)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 282 |\u001b[39m           \u001b[32m\"What are the attachments for a 1915(b) Waiver and 1915(c) Appendix K response to Request for Additional Information (RAI)?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 283 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 53,
                                    "line": 280
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiverb-rai-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiverb-rai-attachments')\u001b[22m\n\n\n  278 |\n  279 |       test(\"displays attachments 1915b and c App K RAI response FAQ\", async () => {\n> 280 |         await expect(faqPage.waiverBRaiAttachments).toBeVisible();\n      |                                                     ^\n  281 |         await expect(faqPage.waiverBRaiAttachments).toHaveText(\n  282 |           \"What are the attachments for a 1915(b) Waiver and 1915(c) Appendix K response to Request for Additional Information (RAI)?\",\n  283 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:280:53"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:36:42.254Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 53,
                                "line": 280
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-16e47132d7d5ffb53775",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 279,
                      "column": 7
                    },
                    {
                      "title": "displays temporary extension format FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 93,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5476,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-id-format')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-id-format')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:289:55",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-id-format')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiver-extension-id-format')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 55,
                                  "line": 289
                                },
                                "snippet": "\u001b[0m \u001b[90m 287 |\u001b[39m\n \u001b[90m 288 |\u001b[39m       test(\u001b[32m\"displays temporary extension format FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 289 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverExtensionIdFormat)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 290 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverExtensionIdFormat)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 291 |\u001b[39m           \u001b[32m\"What format is used to enter a 1915(b) or 1915(c) Temporary Extension number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 292 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 55,
                                    "line": 289
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-id-format')\u001b[22m\n\n\n  287 |\n  288 |       test(\"displays temporary extension format FAQ\", async () => {\n> 289 |         await expect(faqPage.waiverExtensionIdFormat).toBeVisible();\n      |                                                       ^\n  290 |         await expect(faqPage.waiverExtensionIdFormat).toHaveText(\n  291 |           \"What format is used to enter a 1915(b) or 1915(c) Temporary Extension number?\",\n  292 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:289:55"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:36:48.651Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 55,
                                "line": 289
                              }
                            },
                            {
                              "workerIndex": 94,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5648,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-id-format')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-id-format')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:289:55",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-id-format')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiver-extension-id-format')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 55,
                                  "line": 289
                                },
                                "snippet": "\u001b[0m \u001b[90m 287 |\u001b[39m\n \u001b[90m 288 |\u001b[39m       test(\u001b[32m\"displays temporary extension format FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 289 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverExtensionIdFormat)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 290 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverExtensionIdFormat)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 291 |\u001b[39m           \u001b[32m\"What format is used to enter a 1915(b) or 1915(c) Temporary Extension number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 292 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 55,
                                    "line": 289
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-id-format')\u001b[22m\n\n\n  287 |\n  288 |       test(\"displays temporary extension format FAQ\", async () => {\n> 289 |         await expect(faqPage.waiverExtensionIdFormat).toBeVisible();\n      |                                                       ^\n  290 |         await expect(faqPage.waiverExtensionIdFormat).toHaveText(\n  291 |           \"What format is used to enter a 1915(b) or 1915(c) Temporary Extension number?\",\n  292 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:289:55"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:36:55.032Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-49000-porary-extension-format-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 55,
                                "line": 289
                              }
                            },
                            {
                              "workerIndex": 95,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5485,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-id-format')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-id-format')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:289:55",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-id-format')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiver-extension-id-format')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 55,
                                  "line": 289
                                },
                                "snippet": "\u001b[0m \u001b[90m 287 |\u001b[39m\n \u001b[90m 288 |\u001b[39m       test(\u001b[32m\"displays temporary extension format FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 289 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverExtensionIdFormat)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 290 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverExtensionIdFormat)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 291 |\u001b[39m           \u001b[32m\"What format is used to enter a 1915(b) or 1915(c) Temporary Extension number?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 292 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 55,
                                    "line": 289
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-id-format')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-id-format')\u001b[22m\n\n\n  287 |\n  288 |       test(\"displays temporary extension format FAQ\", async () => {\n> 289 |         await expect(faqPage.waiverExtensionIdFormat).toBeVisible();\n      |                                                       ^\n  290 |         await expect(faqPage.waiverExtensionIdFormat).toHaveText(\n  291 |           \"What format is used to enter a 1915(b) or 1915(c) Temporary Extension number?\",\n  292 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:289:55"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:37:01.625Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 55,
                                "line": 289
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-86432e056230250b9b18",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 288,
                      "column": 7
                    },
                    {
                      "title": "displays status of my temporary extension FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 96,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5474,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-status')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-status')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-status')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-status')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:298:53",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-status')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-status')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiver-extension-status')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 53,
                                  "line": 298
                                },
                                "snippet": "\u001b[0m \u001b[90m 296 |\u001b[39m\n \u001b[90m 297 |\u001b[39m       test(\u001b[32m\"displays status of my temporary extension FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 298 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverExtensionStatus)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 299 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverExtensionStatus)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 300 |\u001b[39m           \u001b[32m\"Why does the status of my Temporary Extension Request continue to show as 'Submitted'?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 301 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 53,
                                    "line": 298
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-status')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-status')\u001b[22m\n\n\n  296 |\n  297 |       test(\"displays status of my temporary extension FAQ\", async () => {\n> 298 |         await expect(faqPage.waiverExtensionStatus).toBeVisible();\n      |                                                     ^\n  299 |         await expect(faqPage.waiverExtensionStatus).toHaveText(\n  300 |           \"Why does the status of my Temporary Extension Request continue to show as 'Submitted'?\",\n  301 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:298:53"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:37:08.022Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 53,
                                "line": 298
                              }
                            },
                            {
                              "workerIndex": 97,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5869,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#waiver-extension-status')\nExpected string: \u001b[32m\"Why does the status of my Temporary Extension Request continue to show as 'Submitted'?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-status')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#waiver-extension-status')\nExpected string: \u001b[32m\"Why does the status of my Temporary Extension Request continue to show as 'Submitted'?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-status')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:299:53",
                                "matcherResult": {
                                  "name": "toHaveText",
                                  "expected": "Why does the status of my Temporary Extension Request continue to show as 'Submitted'?",
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#waiver-extension-status')\nExpected string: \u001b[32m\"Why does the status of my Temporary Extension Request continue to show as 'Submitted'?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-status')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "log": [
                                    "  - expect.toHaveText with timeout 5000ms",
                                    "  - waiting for locator('#waiver-extension-status')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 53,
                                  "line": 299
                                },
                                "snippet": "\u001b[0m \u001b[90m 297 |\u001b[39m       test(\u001b[32m\"displays status of my temporary extension FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 298 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverExtensionStatus)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 299 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverExtensionStatus)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 300 |\u001b[39m           \u001b[32m\"Why does the status of my Temporary Extension Request continue to show as 'Submitted'?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 301 |\u001b[39m         )\u001b[33m;\u001b[39m\n \u001b[90m 302 |\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 53,
                                    "line": 299
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#waiver-extension-status')\nExpected string: \u001b[32m\"Why does the status of my Temporary Extension Request continue to show as 'Submitted'?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-status')\u001b[22m\n\n\n  297 |       test(\"displays status of my temporary extension FAQ\", async () => {\n  298 |         await expect(faqPage.waiverExtensionStatus).toBeVisible();\n> 299 |         await expect(faqPage.waiverExtensionStatus).toHaveText(\n      |                                                     ^\n  300 |           \"Why does the status of my Temporary Extension Request continue to show as 'Submitted'?\",\n  301 |         );\n  302 |\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:299:53"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:37:14.419Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-40fbc--my-temporary-extension-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 53,
                                "line": 299
                              }
                            },
                            {
                              "workerIndex": 98,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5540,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-status')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-status')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-status')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-status')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:298:53",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-status')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-status')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#waiver-extension-status')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 53,
                                  "line": 298
                                },
                                "snippet": "\u001b[0m \u001b[90m 296 |\u001b[39m\n \u001b[90m 297 |\u001b[39m       test(\u001b[32m\"displays status of my temporary extension FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 298 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverExtensionStatus)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 299 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwaiverExtensionStatus)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 300 |\u001b[39m           \u001b[32m\"Why does the status of my Temporary Extension Request continue to show as 'Submitted'?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 301 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 53,
                                    "line": 298
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#waiver-extension-status')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#waiver-extension-status')\u001b[22m\n\n\n  296 |\n  297 |       test(\"displays status of my temporary extension FAQ\", async () => {\n> 298 |         await expect(faqPage.waiverExtensionStatus).toBeVisible();\n      |                                                     ^\n  299 |         await expect(faqPage.waiverExtensionStatus).toHaveText(\n  300 |           \"Why does the status of my Temporary Extension Request continue to show as 'Submitted'?\",\n  301 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:298:53"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:37:21.252Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 53,
                                "line": 298
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-e76c7f68f5073a7d63e9",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 297,
                      "column": 7
                    },
                    {
                      "title": "displays attachments for 1915(b) waiver FAQ",
                      "ok": true,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [
                            {
                              "type": "skip"
                            }
                          ],
                          "expectedStatus": "skipped",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": -1,
                              "parallelIndex": -1,
                              "status": "skipped",
                              "duration": 0,
                              "errors": [],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:37:26.929Z",
                              "attachments": []
                            }
                          ],
                          "status": "skipped"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-40786322a44a1d100569",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 307,
                      "column": 12
                    },
                    {
                      "title": "displays attachments for 1915(c) waiver FAQ",
                      "ok": true,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [
                            {
                              "type": "skip"
                            }
                          ],
                          "expectedStatus": "skipped",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": -1,
                              "parallelIndex": -1,
                              "status": "skipped",
                              "duration": 0,
                              "errors": [],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:37:26.929Z",
                              "attachments": []
                            }
                          ],
                          "status": "skipped"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-ff814f26dbf831579e60",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 319,
                      "column": 12
                    },
                    {
                      "title": "displays submit App K attachments FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 99,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5479,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:331:36",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#appk')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 36,
                                  "line": 331
                                },
                                "snippet": "\u001b[0m \u001b[90m 329 |\u001b[39m\n \u001b[90m 330 |\u001b[39m       test(\u001b[32m\"displays submit App K attachments FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 331 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mappK)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 332 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mappK)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"Can I submit Appendix K amendments in OneMAC?\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 333 |\u001b[39m\n \u001b[90m 334 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mappK\u001b[33m.\u001b[39mlocator(\u001b[32m\"div:nth-child(1)\"\u001b[39m))\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 36,
                                    "line": 331
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk')\u001b[22m\n\n\n  329 |\n  330 |       test(\"displays submit App K attachments FAQ\", async () => {\n> 331 |         await expect(faqPage.appK).toBeVisible();\n      |                                    ^\n  332 |         await expect(faqPage.appK).toHaveText(\"Can I submit Appendix K amendments in OneMAC?\");\n  333 |\n  334 |         await expect(faqPage.appK.locator(\"div:nth-child(1)\")).not.toBeVisible();\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:331:36"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:37:27.703Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 36,
                                "line": 331
                              }
                            },
                            {
                              "workerIndex": 100,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5647,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:331:36",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#appk')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 36,
                                  "line": 331
                                },
                                "snippet": "\u001b[0m \u001b[90m 329 |\u001b[39m\n \u001b[90m 330 |\u001b[39m       test(\u001b[32m\"displays submit App K attachments FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 331 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mappK)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 332 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mappK)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"Can I submit Appendix K amendments in OneMAC?\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 333 |\u001b[39m\n \u001b[90m 334 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mappK\u001b[33m.\u001b[39mlocator(\u001b[32m\"div:nth-child(1)\"\u001b[39m))\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 36,
                                    "line": 331
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk')\u001b[22m\n\n\n  329 |\n  330 |       test(\"displays submit App K attachments FAQ\", async () => {\n> 331 |         await expect(faqPage.appK).toBeVisible();\n      |                                    ^\n  332 |         await expect(faqPage.appK).toHaveText(\"Can I submit Appendix K amendments in OneMAC?\");\n  333 |\n  334 |         await expect(faqPage.appK.locator(\"div:nth-child(1)\")).not.toBeVisible();\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:331:36"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:37:34.101Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-f5711-ubmit-App-K-attachments-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 36,
                                "line": 331
                              }
                            },
                            {
                              "workerIndex": 101,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5479,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:331:36",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#appk')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 36,
                                  "line": 331
                                },
                                "snippet": "\u001b[0m \u001b[90m 329 |\u001b[39m\n \u001b[90m 330 |\u001b[39m       test(\u001b[32m\"displays submit App K attachments FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 331 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mappK)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 332 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mappK)\u001b[33m.\u001b[39mtoHaveText(\u001b[32m\"Can I submit Appendix K amendments in OneMAC?\"\u001b[39m)\u001b[33m;\u001b[39m\n \u001b[90m 333 |\u001b[39m\n \u001b[90m 334 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mappK\u001b[33m.\u001b[39mlocator(\u001b[32m\"div:nth-child(1)\"\u001b[39m))\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 36,
                                    "line": 331
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk')\u001b[22m\n\n\n  329 |\n  330 |       test(\"displays submit App K attachments FAQ\", async () => {\n> 331 |         await expect(faqPage.appK).toBeVisible();\n      |                                    ^\n  332 |         await expect(faqPage.appK).toHaveText(\"Can I submit Appendix K amendments in OneMAC?\");\n  333 |\n  334 |         await expect(faqPage.appK.locator(\"div:nth-child(1)\")).not.toBeVisible();\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:331:36"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:37:40.707Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": "IyBJbnN0cnVjdGlvbnMKCi0gRm9sbG93aW5nIFBsYXl3cmlnaHQgdGVzdCBmYWlsZWQuCi0gRXhwbGFpbiB3aHksIGJlIGNvbmNpc2UsIHJlc3BlY3QgUGxheXdyaWdodCBiZXN0IHByYWN0aWNlcy4KLSBQcm92aWRlIGEgc25pcHBldCBvZiBjb2RlIHdpdGggdGhlIGZpeCwgaWYgcG9zc2libGUuCgojIFRlc3QgaW5mbwoKLSBOYW1lOiBGQVEgcGFnZSA+PiBVSSB2YWxpZGF0aW9uID4+IFdhaXZlcnMgU2VjdGlvbiA+PiBkaXNwbGF5cyBzdWJtaXQgQXBwIEsgYXR0YWNobWVudHMgRkFRCi0gTG9jYXRpb246IC9ob21lL3J1bm5lci93b3JrL21hY3Byby1tYWtvL21hY3Byby1tYWtvL3Rlc3QvZTJlL2ZhcS9mYXEuc3BlYy50czozMzA6NwoKIyBFcnJvciBkZXRhaWxzCgpgYGAKRXJyb3I6IFRpbWVkIG91dCA1MDAwbXMgd2FpdGluZyBmb3IgZXhwZWN0KGxvY2F0b3IpLnRvQmVWaXNpYmxlKCkKCkxvY2F0b3I6IGxvY2F0b3IoJyNhcHBrJykKRXhwZWN0ZWQ6IHZpc2libGUKUmVjZWl2ZWQ6IDxlbGVtZW50KHMpIG5vdCBmb3VuZD4KQ2FsbCBsb2c6CiAgLSBleHBlY3QudG9CZVZpc2libGUgd2l0aCB0aW1lb3V0IDUwMDBtcwogIC0gd2FpdGluZyBmb3IgbG9jYXRvcignI2FwcGsnKQoKICAgIGF0IC9ob21lL3J1bm5lci93b3JrL21hY3Byby1tYWtvL21hY3Byby1tYWtvL3Rlc3QvZTJlL2ZhcS9mYXEuc3BlYy50czozMzE6MzYKYGBgCgojIFBhZ2Ugc25hcHNob3QKCmBgYHlhbWwKLSBiYW5uZXI6CiAgLSBpbWcgIkEgVW5pdGVkIFN0YXRlcyBGbGFnIGljb24iCiAgLSBwYXJhZ3JhcGg6IEFuIG9mZmljaWFsIHdlYnNpdGUgb2YgdGhlIFVuaXRlZCBTdGF0ZXMgZ292ZXJubWVudAogIC0gYnV0dG9uICJIZXJlJ3MgaG93IHlvdSBrbm93IjoKICAgIC0gdGV4dDogSGVyZSdzIGhvdyB5b3Uga25vdwogICAgLSBpbWcKLSBuYXZpZ2F0aW9uOgogIC0gaW1nICJvbmVtYWMgc2l0ZSBsb2dvIgotIG1haW46CiAgLSBoZWFkaW5nICJPbmVNQUMgU3VwcG9ydCIgW2xldmVsPTFdCiAgLSBoZWFkaW5nICJUb3BpY3MiIFtsZXZlbD0yXQogIC0gaGVhZGluZyAiR2VuZXJhbCIgW2xldmVsPTNdOgogICAgLSBidXR0b24gIkdlbmVyYWwiOgogICAgICAtIHRleHQ6IEdlbmVyYWwKICAgICAgLSBpbWcKICAtIGhlYWRpbmcgIlBhY2thZ2UgYWN0aW9ucyIgW2xldmVsPTNdOgogICAgLSBidXR0b24gIlBhY2thZ2UgYWN0aW9ucyI6CiAgICAgIC0gdGV4dDogUGFja2FnZSBhY3Rpb25zCiAgICAgIC0gaW1nCiAgLSBoZWFkaW5nICJJbXBsZW1lbnRhdGlvbiBndWlkZXMiIFtsZXZlbD0zXToKICAgIC0gYnV0dG9uICJJbXBsZW1lbnRhdGlvbiBndWlkZXMiOgogICAgICAtIHRleHQ6IEltcGxlbWVudGF0aW9uIGd1aWRlcwogICAgICAtIGltZwogIC0gaGVhZGluZyAiQWNjZXNzICYgcm9sZXMiIFtsZXZlbD0zXToKICAgIC0gYnV0dG9uICJBY2Nlc3MgJiByb2xlcyI6CiAgICAgIC0gdGV4dDogQWNjZXNzICYgcm9sZXMKICAgICAgLSBpbWcKICAtIGhlYWRpbmcgIlVzZXIgcHJvZmlsZSIgW2xldmVsPTNdOgogICAgLSBidXR0b24gIlVzZXIgcHJvZmlsZSI6CiAgICAgIC0gdGV4dDogVXNlciBwcm9maWxlCiAgICAgIC0gaW1nCiAgLSBoZWFkaW5nICJHbG9zc2FyeSIgW2xldmVsPTNdOgogICAgLSBidXR0b24gIkdsb3NzYXJ5IjoKICAgICAgLSB0ZXh0OiBHbG9zc2FyeQogICAgICAtIGltZwogIC0gaGVhZGluZyAiTm90IGZpbmRpbmcgdGhlIGluZm9ybWF0aW9uIHlvdSBuZWVkPyIgW2xldmVsPTNdCiAgLSBwYXJhZ3JhcGg6IENvbnRhY3QgdGhlIEhlbHAgRGVzawogIC0gcGFyYWdyYXBoOgogICAgLSB0ZXh0OiAiRW1haWw6IgogICAgLSBsaW5rICJPbmVNQUNfSGVscGRlc2tAQ01TLmhocy5nb3YiCiAgLSBwYXJhZ3JhcGg6CiAgICAtIHRleHQ6IExlYXZlIGEgbWVzc2FnZSBhdAogICAgLSBsaW5rICIoODgzKSAyMjgtMjU0MCIKICAtIGFydGljbGU6CiAgICAtIGhlYWRpbmcgIkZyZXF1ZW50bHkgYXNrZWQgcXVlc3Rpb25zIChGQVFzKSIgW2xldmVsPTJdCiAgICAtIGJ1dHRvbiAiRXhwYW5kIGFsbCI6CiAgICAgIC0gdGV4dDogRXhwYW5kIGFsbAogICAgICAtIGltZwogICAgLSBzZXBhcmF0b3IKICAgIC0gaGVhZGluZyAiU2hvdWxkIEkgdXNlIE9uZU1BQyBmb3IgbXkgc3RhdGUncyBzdWJtaXNzaW9uPyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiU2hvdWxkIEkgdXNlIE9uZU1BQyBmb3IgbXkgc3RhdGUncyBzdWJtaXNzaW9uPyI6CiAgICAgICAgLSB0ZXh0OiBTaG91bGQgSSB1c2UgT25lTUFDIGZvciBteSBzdGF0ZSdzIHN1Ym1pc3Npb24/CiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiSXMgd2hhdCBJIHN1Ym1pdCBpbiBPbmVNQUMgY29uc2lkZXJlZCB0aGUgb2ZmaWNpYWwgc3RhdGUgc3VibWlzc2lvbj8iIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIklzIHdoYXQgSSBzdWJtaXQgaW4gT25lTUFDIGNvbnNpZGVyZWQgdGhlIG9mZmljaWFsIHN0YXRlIHN1Ym1pc3Npb24/IjoKICAgICAgICAtIHRleHQ6IElzIHdoYXQgSSBzdWJtaXQgaW4gT25lTUFDIGNvbnNpZGVyZWQgdGhlIG9mZmljaWFsIHN0YXRlIHN1Ym1pc3Npb24/CiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiV2hhdCBzaG91bGQgSSBkbyBpZiBJIGRvbuKAmXQgZ2V0IGEgY29uZmlybWF0aW9uIGVtYWlsPyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiV2hhdCBzaG91bGQgSSBkbyBpZiBJIGRvbuKAmXQgZ2V0IGEgY29uZmlybWF0aW9uIGVtYWlsPyI6CiAgICAgICAgLSB0ZXh0OiBXaGF0IHNob3VsZCBJIGRvIGlmIEkgZG9u4oCZdCBnZXQgYSBjb25maXJtYXRpb24gZW1haWw/CiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiV2h5IGRvZXMgdGhlIHN0YXR1cyBvZiBteSB0ZW1wb3JhcnkgZXh0ZW5zaW9uIHJlcXVlc3QgY29udGludWUgdG8gc2hvdyBhcyDigJxzdWJtaXR0ZWTigJ0/IiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJXaHkgZG9lcyB0aGUgc3RhdHVzIG9mIG15IHRlbXBvcmFyeSBleHRlbnNpb24gcmVxdWVzdCBjb250aW51ZSB0byBzaG93IGFzIOKAnHN1Ym1pdHRlZOKAnT8iOgogICAgICAgIC0gdGV4dDogV2h5IGRvZXMgdGhlIHN0YXR1cyBvZiBteSB0ZW1wb3JhcnkgZXh0ZW5zaW9uIHJlcXVlc3QgY29udGludWUgdG8gc2hvdyBhcyDigJxzdWJtaXR0ZWTigJ0/CiAgICAgICAgLSBpbWcKICAtIGFydGljbGU6CiAgICAtIGhlYWRpbmcgIkdlbmVyYWwiIFtsZXZlbD0yXQogICAgLSBzZXBhcmF0b3IKICAgIC0gaGVhZGluZyAiU2VhcmNoIGZvciBwYWNrYWdlIElEIG9yIHN1Ym1pdHRlciBuYW1lIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJTZWFyY2ggZm9yIHBhY2thZ2UgSUQgb3Igc3VibWl0dGVyIG5hbWUiOgogICAgICAgIC0gdGV4dDogU2VhcmNoIGZvciBwYWNrYWdlIElEIG9yIHN1Ym1pdHRlciBuYW1lCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiQ3VzdG9taXplIHlvdXIgZGFzaGJvYXJkIHZpZXciIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIkN1c3RvbWl6ZSB5b3VyIGRhc2hib2FyZCB2aWV3IjoKICAgICAgICAtIHRleHQ6IEN1c3RvbWl6ZSB5b3VyIGRhc2hib2FyZCB2aWV3CiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiVmlldyBzdWJtaXNzaW9uIHBhY2thZ2UiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlZpZXcgc3VibWlzc2lvbiBwYWNrYWdlIjoKICAgICAgICAtIHRleHQ6IFZpZXcgc3VibWlzc2lvbiBwYWNrYWdlCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiQWNjZXB0ZWQgZmlsZSB0eXBlcyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiQWNjZXB0ZWQgZmlsZSB0eXBlcyI6CiAgICAgICAgLSB0ZXh0OiBBY2NlcHRlZCBmaWxlIHR5cGVzCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiUGFja2FnZSBzdGF0dXNlcyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiUGFja2FnZSBzdGF0dXNlcyI6CiAgICAgICAgLSB0ZXh0OiBQYWNrYWdlIHN0YXR1c2VzCiAgICAgICAgLSBpbWcKICAgIC0gaGVhZGluZyAiU3VwcG9ydGVkIGJyb3dzZXJzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJTdXBwb3J0ZWQgYnJvd3NlcnMiOgogICAgICAgIC0gdGV4dDogU3VwcG9ydGVkIGJyb3dzZXJzCiAgICAgICAgLSBpbWcKICAtIGFydGljbGU6CiAgICAtIGhlYWRpbmcgIlBhY2thZ2UgYWN0aW9ucyIgW2xldmVsPTJdCiAgICAtIHNlcGFyYXRvcgogICAgLSBoZWFkaW5nICJTdWJtaXQgbmV3IFNQQSBvciB3YWl2ZXIiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlN1Ym1pdCBuZXcgU1BBIG9yIHdhaXZlciI6CiAgICAgICAgLSB0ZXh0OiBTdWJtaXQgbmV3IFNQQSBvciB3YWl2ZXIKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJSZXNwb25kIHRvIFJBSSIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiUmVzcG9uZCB0byBSQUkiOgogICAgICAgIC0gdGV4dDogUmVzcG9uZCB0byBSQUkKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJXaXRoZHJhdyBSQUkgcmVzcG9uc2UiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIldpdGhkcmF3IFJBSSByZXNwb25zZSI6CiAgICAgICAgLSB0ZXh0OiBXaXRoZHJhdyBSQUkgcmVzcG9uc2UKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJXaXRoZHJhdyBwYWNrYWdlIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJXaXRoZHJhdyBwYWNrYWdlIjoKICAgICAgICAtIHRleHQ6IFdpdGhkcmF3IHBhY2thZ2UKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJSZXF1ZXN0IHRlbXBvcmFyeSBleHRlbnNpb24gZm9yIGEgd2FpdmVyIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJSZXF1ZXN0IHRlbXBvcmFyeSBleHRlbnNpb24gZm9yIGEgd2FpdmVyIjoKICAgICAgICAtIHRleHQ6IFJlcXVlc3QgdGVtcG9yYXJ5IGV4dGVuc2lvbiBmb3IgYSB3YWl2ZXIKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJBZGQgYW1lbmRtZW50IGZvciAxOTE1KGIpIHdhaXZlciIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiQWRkIGFtZW5kbWVudCBmb3IgMTkxNShiKSB3YWl2ZXIiOgogICAgICAgIC0gdGV4dDogQWRkIGFtZW5kbWVudCBmb3IgMTkxNShiKSB3YWl2ZXIKICAgICAgICAtIGltZwogIC0gYXJ0aWNsZToKICAgIC0gaGVhZGluZyAiVGVtcGxhdGVzICYgaW1wbGVtZW50YXRpb24gZ3VpZGVzIiBbbGV2ZWw9Ml0KICAgIC0gc2VwYXJhdG9yCiAgICAtIGhlYWRpbmcgIk1lZGljYWlkIEFsdGVybmF0aXZlIEJlbmVmaXQgUGxhbiAoQUJQKSBTUEEgdGVtcGxhdGVzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJNZWRpY2FpZCBBbHRlcm5hdGl2ZSBCZW5lZml0IFBsYW4gKEFCUCkgU1BBIHRlbXBsYXRlcyI6CiAgICAgICAgLSB0ZXh0OiBNZWRpY2FpZCBBbHRlcm5hdGl2ZSBCZW5lZml0IFBsYW4gKEFCUCkgU1BBIHRlbXBsYXRlcwogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIk1lZGljYWlkIEFsdGVybmF0aXZlIEJlbmVmaXQgUGxhbiAoQUJQKSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJNZWRpY2FpZCBBbHRlcm5hdGl2ZSBCZW5lZml0IFBsYW4gKEFCUCkgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcyI6CiAgICAgICAgLSB0ZXh0OiBNZWRpY2FpZCBBbHRlcm5hdGl2ZSBCZW5lZml0IFBsYW4gKEFCUCkgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcwogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIk1lZGljYWlkIFByZW1pdW1zIGFuZCBDb3N0IFNoYXJpbmcgKE1QQykgU1BBIHRlbXBsYXRlcyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiTWVkaWNhaWQgUHJlbWl1bXMgYW5kIENvc3QgU2hhcmluZyAoTVBDKSBTUEEgdGVtcGxhdGVzIjoKICAgICAgICAtIHRleHQ6IE1lZGljYWlkIFByZW1pdW1zIGFuZCBDb3N0IFNoYXJpbmcgKE1QQykgU1BBIHRlbXBsYXRlcwogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIk1lZGljYWlkIFByZW1pdW1zIGFuZCBDb3N0IFNoYXJpbmcgKE1QQykgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiTWVkaWNhaWQgUHJlbWl1bXMgYW5kIENvc3QgU2hhcmluZyAoTVBDKSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzIjoKICAgICAgICAtIHRleHQ6IE1lZGljYWlkIFByZW1pdW1zIGFuZCBDb3N0IFNoYXJpbmcgKE1QQykgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcwogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIkNISVAgZWxpZ2liaWxpdHkgU1BBIHRlbXBsYXRlcyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiQ0hJUCBlbGlnaWJpbGl0eSBTUEEgdGVtcGxhdGVzIjoKICAgICAgICAtIHRleHQ6IENISVAgZWxpZ2liaWxpdHkgU1BBIHRlbXBsYXRlcwogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIkNISVAgZWxpZ2liaWxpdHkgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiQ0hJUCBlbGlnaWJpbGl0eSBTUEEgaW1wbGVtZW50YXRpb24gZ3VpZGVzIjoKICAgICAgICAtIHRleHQ6IENISVAgZWxpZ2liaWxpdHkgU1BBIGltcGxlbWVudGF0aW9uIGd1aWRlcwogICAgICAgIC0gaW1nCiAgLSBhcnRpY2xlOgogICAgLSBoZWFkaW5nICJBY2Nlc3MgJiBSb2xlcyIgW2xldmVsPTJdCiAgICAtIHNlcGFyYXRvcgogICAgLSBoZWFkaW5nICJPbmVNQUMgdXNlciByb2xlcyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiT25lTUFDIHVzZXIgcm9sZXMiOgogICAgICAgIC0gdGV4dDogT25lTUFDIHVzZXIgcm9sZXMKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJSZXF1ZXN0IHJvbGUgaW4gT25lTUFDIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJSZXF1ZXN0IHJvbGUgaW4gT25lTUFDIjoKICAgICAgICAtIHRleHQ6IFJlcXVlc3Qgcm9sZSBpbiBPbmVNQUMKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJSZXF1ZXN0IHJvbGUgY2hhbmdlIGluIE9uZU1BQyIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiUmVxdWVzdCByb2xlIGNoYW5nZSBpbiBPbmVNQUMiOgogICAgICAgIC0gdGV4dDogUmVxdWVzdCByb2xlIGNoYW5nZSBpbiBPbmVNQUMKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJBcHByb3ZlIG9yIGRlbnkgcm9sZSByZXF1ZXN0IChzdGF0ZSBzeXN0ZW0gQWRtaW5pc3RyYXRvciB1c2VycykiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIkFwcHJvdmUgb3IgZGVueSByb2xlIHJlcXVlc3QgKHN0YXRlIHN5c3RlbSBBZG1pbmlzdHJhdG9yIHVzZXJzKSI6CiAgICAgICAgLSB0ZXh0OiBBcHByb3ZlIG9yIGRlbnkgcm9sZSByZXF1ZXN0IChzdGF0ZSBzeXN0ZW0gQWRtaW5pc3RyYXRvciB1c2VycykKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJJRE0gaW5zdHJ1Y3Rpb25zIGZvciBPbmVNQUMgdXNlcnMgKFBERikiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIklETSBpbnN0cnVjdGlvbnMgZm9yIE9uZU1BQyB1c2VycyAoUERGKSI6CiAgICAgICAgLSB0ZXh0OiBJRE0gaW5zdHJ1Y3Rpb25zIGZvciBPbmVNQUMgdXNlcnMgKFBERikKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJPbmVNQUMgSURNIGd1aWRlIChQREYpIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJPbmVNQUMgSURNIGd1aWRlIChQREYpIjoKICAgICAgICAtIHRleHQ6IE9uZU1BQyBJRE0gZ3VpZGUgKFBERikKICAgICAgICAtIGltZwogIC0gYXJ0aWNsZToKICAgIC0gaGVhZGluZyAiVXNlciBwcm9maWxlIiBbbGV2ZWw9Ml0KICAgIC0gc2VwYXJhdG9yCiAgICAtIGhlYWRpbmcgIlZpZXcgeW91ciB1c2VyIHByb2ZpbGUiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlZpZXcgeW91ciB1c2VyIHByb2ZpbGUiOgogICAgICAgIC0gdGV4dDogVmlldyB5b3VyIHVzZXIgcHJvZmlsZQogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIkFkZCBwaG9uZSBudW1iZXIgdG8geW91ciBwcm9maWxlIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJBZGQgcGhvbmUgbnVtYmVyIHRvIHlvdXIgcHJvZmlsZSI6CiAgICAgICAgLSB0ZXh0OiBBZGQgcGhvbmUgbnVtYmVyIHRvIHlvdXIgcHJvZmlsZQogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIkFkZCBhY2Nlc3MgdG8gYSBzdGF0ZSBhcyBTdGF0ZSBTdWJtaXR0ZXIiIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIkFkZCBhY2Nlc3MgdG8gYSBzdGF0ZSBhcyBTdGF0ZSBTdWJtaXR0ZXIiOgogICAgICAgIC0gdGV4dDogQWRkIGFjY2VzcyB0byBhIHN0YXRlIGFzIFN0YXRlIFN1Ym1pdHRlcgogICAgICAgIC0gaW1nCiAgICAtIGhlYWRpbmcgIlJlbW92ZSBhY2Nlc3MgdG8gYSBzdGF0ZSBhcyBhIFN0YXRlIFN1Ym1pdHRlciIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiUmVtb3ZlIGFjY2VzcyB0byBhIHN0YXRlIGFzIGEgU3RhdGUgU3VibWl0dGVyIjoKICAgICAgICAtIHRleHQ6IFJlbW92ZSBhY2Nlc3MgdG8gYSBzdGF0ZSBhcyBhIFN0YXRlIFN1Ym1pdHRlcgogICAgICAgIC0gaW1nCiAgLSBhcnRpY2xlOgogICAgLSBoZWFkaW5nICJHbG9zc2FyeSIgW2xldmVsPTJdCiAgICAtIHNlcGFyYXRvcgogICAgLSBoZWFkaW5nICJBcHByb3ZlZCIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiQXBwcm92ZWQiOgogICAgICAgIC0gdGV4dDogQXBwcm92ZWQKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJEaXNhcHByb3ZlZCIgW2xldmVsPTNdOgogICAgICAtIGJ1dHRvbiAiRGlzYXBwcm92ZWQiOgogICAgICAgIC0gdGV4dDogRGlzYXBwcm92ZWQKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJSQUkgaXNzdWVkIiBbbGV2ZWw9M106CiAgICAgIC0gYnV0dG9uICJSQUkgaXNzdWVkIjoKICAgICAgICAtIHRleHQ6IFJBSSBpc3N1ZWQKICAgICAgICAtIGltZwogICAgLSBoZWFkaW5nICJVbmRlciByZXZpZXciIFtsZXZlbD0zXToKICAgICAgLSBidXR0b24gIlVuZGVyIHJldmlldyI6CiAgICAgICAgLSB0ZXh0OiBVbmRlciByZXZpZXcKICAgICAgICAtIGltZwotIGNvbnRlbnRpbmZvOgogIC0gaW1nICJMb2dvIGZvciBNZWRpY2FpZCIKICAtIGltZyAiTG9nbyBmb3IgRGVwYXJ0bWVudCBvZiBIZWFsdGggYW5kIEh1bWFuIFNlcnZpY2VzIgogIC0gcGFyYWdyYXBoOiBBIGZlZGVyYWwgZ292ZXJubWVudCB3ZWJzaXRlIG1hbmFnZWQgYW5kIHBhaWQgZm9yIGJ5IHRoZSBVLlMuIENlbnRlcnMgZm9yIE1lZGljYXJlIGFuZCBNZWRpY2FpZCBTZXJ2aWNlcyBhbmQgcGFydCBvZiB0aGUgTUFDUHJvIHN1aXRlLgogIC0gdGV4dDogRW1haWwKICAtIGxpbmsgIk9uZU1BQ19IZWxwZGVza0BjbXMuaGhzLmdvdiIKICAtIHRleHQ6IGZvciBoZWxwIG9yIGZlZWRiYWNrIDc1MDAgU2VjdXJpdHkgQm91bGV2YXJkIEJhbHRpbW9yZSwgTUQgMjEyNDQKYGBgCgojIFRlc3Qgc291cmNlCgpgYGB0cwogIDIzMSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVySWRGb3JtYXQubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAyMzIgfCAgICAgICB9KTsKICAyMzMgfAogIDIzNCB8ICAgICAgIHRlc3QoImRpc3BsYXlzIDE5MTUoYikgd2FpdmVyIHJlbmV3YWwgbnVtYmVyIEZBUSIsIGFzeW5jICgpID0+IHsKICAyMzUgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlclJlbmV3YWxJZEZvcm1hdCkudG9CZVZpc2libGUoKTsKICAyMzYgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlclJlbmV3YWxJZEZvcm1hdCkudG9IYXZlVGV4dCgKICAyMzcgfCAgICAgICAgICAgIldoYXQgZm9ybWF0IGlzIHVzZWQgdG8gZW50ZXIgYSAxOTE1KGIpIFdhaXZlciBSZW5ld2FsIG51bWJlcj8iLAogIDIzOCB8ICAgICAgICAgKTsKICAyMzkgfAogIDI0MCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyUmVuZXdhbElkRm9ybWF0LmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgMjQxIHwgICAgICAgfSk7CiAgMjQyIHwKICAyNDMgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyAxOTE1KGIpIHdhaXZlciBhbWVuZG1lbnQgbnVtYmVyIEZBUSIsIGFzeW5jICgpID0+IHsKICAyNDQgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlckFtZW5kbWVudElkRm9ybWF0KS50b0JlVmlzaWJsZSgpOwogIDI0NSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyQW1lbmRtZW50SWRGb3JtYXQpLnRvSGF2ZVRleHQoCiAgMjQ2IHwgICAgICAgICAgICJXaGF0IGZvcm1hdCBpcyB1c2VkIHRvIGVudGVyIGEgMTkxNShiKSBXYWl2ZXIgQW1lbmRtZW50IG51bWJlcj8iLAogIDI0NyB8ICAgICAgICAgKTsKICAyNDggfAogIDI0OSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyQW1lbmRtZW50SWRGb3JtYXQubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAyNTAgfCAgICAgICB9KTsKICAyNTEgfAogIDI1MiB8ICAgICAgIHRlc3QoImRpc3BsYXlzIGNvbnRhY3QgaGVscCBmb3IgMTkxNShiKSB3YWl2ZXIgRkFRIiwgYXN5bmMgKCkgPT4gewogIDI1MyB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVySWRIZWxwKS50b0JlVmlzaWJsZSgpOwogIDI1NCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVySWRIZWxwKS50b0hhdmVUZXh0KAogIDI1NSB8ICAgICAgICAgICAiV2hvIGNhbiBJIGNvbnRhY3QgdG8gaGVscCBtZSBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IDE5MTUoYikgV2FpdmVyIE51bWJlcj8iLAogIDI1NiB8ICAgICAgICAgKTsKICAyNTcgfAogIDI1OCB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVySWRIZWxwLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgMjU5IHwgICAgICAgfSk7CiAgMjYwIHwKICAyNjEgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyBmb3JtYXQgMTkxNShjKSB3YWl2ZXIgbnVtYmVyIEZBUSIsIGFzeW5jICgpID0+IHsKICAyNjIgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlckNJZCkudG9CZVZpc2libGUoKTsKICAyNjMgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlckNJZCkudG9IYXZlVGV4dCgKICAyNjQgfCAgICAgICAgICAgIldoYXQgZm9ybWF0IGlzIHVzZWQgdG8gZW50ZXIgYSAxOTE1KGMpIHdhaXZlciBudW1iZXI/IiwKICAyNjUgfCAgICAgICAgICk7CiAgMjY2IHwKICAyNjcgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlckNJZC5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDI2OCB8ICAgICAgIH0pOwogIDI2OSB8CiAgMjcwIHwgICAgICAgdGVzdCgiZGlzcGxheXMgYXR0YWNobWVudHMgYXJlIG5lZWRlZCBmb3IgMTkxNShiKSB3YWl2ZXIgYWN0aW9uIEZBUSIsIGFzeW5jICgpID0+IHsKICAyNzEgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlckJBdHRhY2htZW50cykudG9CZVZpc2libGUoKTsKICAyNzIgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlckJBdHRhY2htZW50cykudG9IYXZlVGV4dCgKICAyNzMgfCAgICAgICAgICAgIldoYXQgYXR0YWNobWVudHMgYXJlIG5lZWRlZCB0byBzdWJtaXQgYSAxOTE1KGIpIHdhaXZlciBhY3Rpb24/IiwKICAyNzQgfCAgICAgICAgICk7CiAgMjc1IHwKICAyNzYgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlckJBdHRhY2htZW50cy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDI3NyB8ICAgICAgIH0pOwogIDI3OCB8CiAgMjc5IHwgICAgICAgdGVzdCgiZGlzcGxheXMgYXR0YWNobWVudHMgMTkxNWIgYW5kIGMgQXBwIEsgUkFJIHJlc3BvbnNlIEZBUSIsIGFzeW5jICgpID0+IHsKICAyODAgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlckJSYWlBdHRhY2htZW50cykudG9CZVZpc2libGUoKTsKICAyODEgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlckJSYWlBdHRhY2htZW50cykudG9IYXZlVGV4dCgKICAyODIgfCAgICAgICAgICAgIldoYXQgYXJlIHRoZSBhdHRhY2htZW50cyBmb3IgYSAxOTE1KGIpIFdhaXZlciBhbmQgMTkxNShjKSBBcHBlbmRpeCBLIHJlc3BvbnNlIHRvIFJlcXVlc3QgZm9yIEFkZGl0aW9uYWwgSW5mb3JtYXRpb24gKFJBSSk/IiwKICAyODMgfCAgICAgICAgICk7CiAgMjg0IHwKICAyODUgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlckJSYWlBdHRhY2htZW50cy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLm5vdC50b0JlVmlzaWJsZSgpOwogIDI4NiB8ICAgICAgIH0pOwogIDI4NyB8CiAgMjg4IHwgICAgICAgdGVzdCgiZGlzcGxheXMgdGVtcG9yYXJ5IGV4dGVuc2lvbiBmb3JtYXQgRkFRIiwgYXN5bmMgKCkgPT4gewogIDI4OSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2FpdmVyRXh0ZW5zaW9uSWRGb3JtYXQpLnRvQmVWaXNpYmxlKCk7CiAgMjkwIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53YWl2ZXJFeHRlbnNpb25JZEZvcm1hdCkudG9IYXZlVGV4dCgKICAyOTEgfCAgICAgICAgICAgIldoYXQgZm9ybWF0IGlzIHVzZWQgdG8gZW50ZXIgYSAxOTE1KGIpIG9yIDE5MTUoYykgVGVtcG9yYXJ5IEV4dGVuc2lvbiBudW1iZXI/IiwKICAyOTIgfCAgICAgICAgICk7CiAgMjkzIHwKICAyOTQgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndhaXZlckV4dGVuc2lvbklkRm9ybWF0LmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkubm90LnRvQmVWaXNpYmxlKCk7CiAgMjk1IHwgICAgICAgfSk7CiAgMjk2IHwKICAyOTcgfCAgICAgICB0ZXN0KCJkaXNwbGF5cyBzdGF0dXMgb2YgbXkgdGVtcG9yYXJ5IGV4dGVuc2lvbiBGQVEiLCBhc3luYyAoKSA9PiB7CiAgMjk4IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53YWl2ZXJFeHRlbnNpb25TdGF0dXMpLnRvQmVWaXNpYmxlKCk7CiAgMjk5IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53YWl2ZXJFeHRlbnNpb25TdGF0dXMpLnRvSGF2ZVRleHQoCiAgMzAwIHwgICAgICAgICAgICJXaHkgZG9lcyB0aGUgc3RhdHVzIG9mIG15IFRlbXBvcmFyeSBFeHRlbnNpb24gUmVxdWVzdCBjb250aW51ZSB0byBzaG93IGFzICdTdWJtaXR0ZWQnPyIsCiAgMzAxIHwgICAgICAgICApOwogIDMwMiB8CiAgMzAzIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53YWl2ZXJFeHRlbnNpb25TdGF0dXMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAzMDQgfCAgICAgICB9KTsKICAzMDUgfAogIDMwNiB8ICAgICAgIC8vIHJlbW92ZSBza2lwIHdoZW4gc2VsZWN0b3IgaXMgdXBkYXRlZCBpbiBhcHBsaWNhdGlvbgogIDMwNyB8ICAgICAgIHRlc3Quc2tpcCgiZGlzcGxheXMgYXR0YWNobWVudHMgZm9yIDE5MTUoYikgd2FpdmVyIEZBUSIsIGFzeW5jICgpID0+IHsKICAzMDggfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLnRlbXBFeHRlbnNpb25CQXR0YWNobWVudHMpLnRvQmVWaXNpYmxlKCk7CiAgMzA5IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS50ZW1wRXh0ZW5zaW9uQkF0dGFjaG1lbnRzKS50b0hhdmVUZXh0KAogIDMxMCB8ICAgICAgICAgICAiV2hhdCBhcmUgdGhlIGF0dGFjaG1lbnRzIGZvciBhIDE5MTUoYikgV2FpdmVyIC0gUmVxdWVzdCBmb3IgVGVtcG9yYXJ5IEV4dGVuc2lvbj8iLAogIDMxMSB8ICAgICAgICAgKTsKICAzMTIgfAogIDMxMyB8ICAgICAgICAgYXdhaXQgZXhwZWN0KAogIDMxNCB8ICAgICAgICAgICBmYXFQYWdlLnRlbXBFeHRlbnNpb25CQXR0YWNobWVudHMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpLAogIDMxNSB8ICAgICAgICAgKS5ub3QudG9CZVZpc2libGUoKTsKICAzMTYgfCAgICAgICB9KTsKICAzMTcgfAogIDMxOCB8ICAgICAgIC8vIHJlbW92ZSBza2lwIHdoZW4gc2VsZWN0b3IgaXMgdXBkYXRlZCBpbiBhcHBsaWNhdGlvbgogIDMxOSB8ICAgICAgIHRlc3Quc2tpcCgiZGlzcGxheXMgYXR0YWNobWVudHMgZm9yIDE5MTUoYykgd2FpdmVyIEZBUSIsIGFzeW5jICgpID0+IHsKICAzMjAgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLnRlbXBFeHRlbnNpb25DQXR0YWNobWVudHMpLnRvQmVWaXNpYmxlKCk7CiAgMzIxIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS50ZW1wRXh0ZW5zaW9uQ0F0dGFjaG1lbnRzKS50b0hhdmVUZXh0KAogIDMyMiB8ICAgICAgICAgICAiV2hhdCBhcmUgdGhlIGF0dGFjaG1lbnRzIGZvciBhIDE5MTUoYykgV2FpdmVyIC0gUmVxdWVzdCBmb3IgVGVtcG9yYXJ5IEV4dGVuc2lvbj8iLAogIDMyMyB8ICAgICAgICAgKTsKICAzMjQgfAogIDMyNSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KAogIDMyNiB8ICAgICAgICAgICBmYXFQYWdlLnRlbXBFeHRlbnNpb25DQXR0YWNobWVudHMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpLAogIDMyNyB8ICAgICAgICAgKS5ub3QudG9CZVZpc2libGUoKTsKICAzMjggfCAgICAgICB9KTsKICAzMjkgfAogIDMzMCB8ICAgICAgIHRlc3QoImRpc3BsYXlzIHN1Ym1pdCBBcHAgSyBhdHRhY2htZW50cyBGQVEiLCBhc3luYyAoKSA9PiB7Cj4gMzMxIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5hcHBLKS50b0JlVmlzaWJsZSgpOwogICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXiBFcnJvcjogVGltZWQgb3V0IDUwMDBtcyB3YWl0aW5nIGZvciBleHBlY3QobG9jYXRvcikudG9CZVZpc2libGUoKQogIDMzMiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYXBwSykudG9IYXZlVGV4dCgiQ2FuIEkgc3VibWl0IEFwcGVuZGl4IEsgYW1lbmRtZW50cyBpbiBPbmVNQUM/Iik7CiAgMzMzIHwKICAzMzQgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmFwcEsubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAzMzUgfCAgICAgICB9KTsKICAzMzYgfAogIDMzNyB8ICAgICAgIHRlc3QoImRpc3BsYXlzIGF0dGFjaG1lbnRzIGZvciAxOTE1KGMpIEFwcGVuZGl4IEsgd2FpdmVyIEZBUSIsIGFzeW5jICgpID0+IHsKICAzMzggfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmFwcEtBdHRhY2htZW50cykudG9CZVZpc2libGUoKTsKICAzMzkgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmFwcEtBdHRhY2htZW50cykudG9IYXZlVGV4dCgKICAzNDAgfCAgICAgICAgICAgIldoYXQgYXJlIHRoZSBhdHRhY2htZW50cyBmb3IgYSAxOTE1KGMpIEFwcGVuZGl4IEsgV2FpdmVyPyIsCiAgMzQxIHwgICAgICAgICApOwogIDM0MiB8CiAgMzQzIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5hcHBLQXR0YWNobWVudHMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAzNDQgfCAgICAgICB9KTsKICAzNDUgfAogIDM0NiB8ICAgICAgIHRlc3QoImRpc3BsYXlzIHdpdGhkcmF3IEZvcm1hbCBSQUkgUmVzcG9uc2UgZm9yIE1lZGljYWlkIFdhaXZlciBGQVEiLCBhc3luYyAoKSA9PiB7CiAgMzQ3IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53aXRoZHJhd1dhaXZlclJhaSkudG9CZVZpc2libGUoKTsKICAzNDggfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLndpdGhkcmF3V2FpdmVyUmFpKS50b0hhdmVUZXh0KAogIDM0OSB8ICAgICAgICAgICAiSG93IGRvIEkgV2l0aGRyYXcgYSBGb3JtYWwgUkFJIFJlc3BvbnNlIGZvciBhIE1lZGljYWlkIFdhaXZlcj8iLAogIDM1MCB8ICAgICAgICAgKTsKICAzNTEgfAogIDM1MiB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uud2l0aGRyYXdXYWl2ZXJSYWkubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAzNTMgfCAgICAgICB9KTsKICAzNTQgfAogIDM1NSB8ICAgICAgIHRlc3QoImRpc3BsYXlzIHdpdGhkcmF3IFBhY2thZ2UgZm9yIFdhaXZlciBGQVEiLCBhc3luYyAoKSA9PiB7CiAgMzU2IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53aXRoZHJhd1BhY2thZ2VXYWl2ZXIpLnRvQmVWaXNpYmxlKCk7CiAgMzU3IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53aXRoZHJhd1BhY2thZ2VXYWl2ZXIpLnRvSGF2ZVRleHQoCiAgMzU4IHwgICAgICAgICAgICJIb3cgZG8gSSBXaXRoZHJhdyBhIFBhY2thZ2UgZm9yIGEgV2FpdmVyPyIsCiAgMzU5IHwgICAgICAgICApOwogIDM2MCB8CiAgMzYxIHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS53aXRoZHJhd1BhY2thZ2VXYWl2ZXIubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS5ub3QudG9CZVZpc2libGUoKTsKICAzNjIgfCAgICAgICB9KTsKICAzNjMgfCAgICAgfSk7CiAgMzY0IHwgICB9KTsKICAzNjUgfAogIDM2NiB8ICAgdGVzdC5kZXNjcmliZSgiSW50ZXJhY3Rpb24gdmFsaWRhdGlvbiIsICgpID0+IHsKICAzNjcgfCAgICAgdGVzdC5kZXNjcmliZSgiR2VuZXJhbCBTZWN0aW9uIiwgKCkgPT4gewogIDM2OCB8ICAgICAgIHRlc3QoInNob3VsZCBkaXNwbGF5IGNyb3Nzd2FsayBzeXN0ZW0gRkFRIHJlc3BvbnNlIiwgYXN5bmMgKCkgPT4gewogIDM2OSB8ICAgICAgICAgYXdhaXQgZmFxUGFnZS5jcm9zc1dhbGsuY2xpY2soKTsKICAzNzAgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLnBkZnMuc3RhdGVQbGFucykudG9CZVZpc2libGUoKTsKICAzNzEgfCAgICAgICB9KTsKICAzNzIgfAogIDM3MyB8ICAgICAgIHRlc3QoInNob3VsZCBkaXNwbGF5IGJyb3dzZXIgRkFRIHJlc3BvbnNlIiwgYXN5bmMgKCkgPT4gewogIDM3NCB8ICAgICAgICAgYXdhaXQgZmFxUGFnZS5icm93c2Vycy5jbGljaygpOwogIDM3NSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYnJvd3NlcnMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS50b0JlVmlzaWJsZSgpOwogIDM3NiB8ICAgICAgICAgLy8gYXdhaXQgZXhwZWN0KGZhcVBhZ2UuYnJvd3NlcnMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS50b0hhdmVUZXh0KCIiKTsgU29tZXRoaW5nIFRPRE8KICAzNzcgfCAgICAgICB9KTsKICAzNzggfAogIDM3OSB8ICAgICAgIHRlc3QoInNob3VsZCBkaXNwbGF5IGNvbmZpcm1hdGlvbiBlbWFpbCBGQVEgcmVzcG9uc2UiLCBhc3luYyAoKSA9PiB7CiAgMzgwIHwgICAgICAgICBhd2FpdCBmYXFQYWdlLmNvbmZpcm1FbWFpbC5jbGljaygpOwogIDM4MSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2UuY29uZmlybUVtYWlsLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkudG9CZVZpc2libGUoKTsKICAzODIgfCAgICAgICAgIC8vIGF3YWl0IGV4cGVjdChmYXFQYWdlLmNvbmZpcm1FbWFpbC5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLnRvSGF2ZVRleHQoIiIpOyAvLyBTb21ldGhpbmcgVE9ETwogIDM4MyB8ICAgICAgIH0pOwogIDM4NCB8CiAgMzg1IHwgICAgICAgdGVzdCgic2hvdWxkIGRpc3BsYXkgb2ZmaWNpYWwgc3VibWlzc2lvbiBGQVEgcmVzcG9uc2UiLCBhc3luYyAoKSA9PiB7CiAgMzg2IHwgICAgICAgICBhd2FpdCBmYXFQYWdlLm9mZmljaWFsLmNsaWNrKCk7CiAgMzg3IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5vZmZpY2lhbC5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLnRvQmVWaXNpYmxlKCk7CiAgMzg4IHwgICAgICAgICAvLyBhd2FpdCBleHBlY3QoZmFxUGFnZS5vZmZpY2lhbC5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLnRvSGF2ZVRleHQoIiIpOyBUT0RPCiAgMzg5IHwgICAgICAgfSk7CiAgMzkwIHwKICAzOTEgfCAgICAgICB0ZXN0KCJzaG91bGQgZGlwbGF5IE9uZU1hYyBVc2VyIHJvbGUgRkFRIHJlc3BvbnNlIiwgYXN5bmMgKCkgPT4gewogIDM5MiB8ICAgICAgICAgYXdhaXQgZmFxUGFnZS5vbmVtYWNSb2xlcy5jbGljaygpOwogIDM5MyB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uub25lbWFjUm9sZXMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS50b0JlVmlzaWJsZSgpOwogIDM5NCB8ICAgICAgICAgLy8gYXdhaXQgZXhwZWN0KGZhcVBhZ2Uub25lbWFjUm9sZXMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS50b0hhdmVUZXh0KCIiKTsgVE9ETwogIDM5NSB8ICAgICAgIH0pOwogIDM5NiB8CiAgMzk3IHwgICAgICAgdGVzdCgic2hvdWxkIGRpc3BsYXkgZmlsZSBmb3JtYXRzIEZBUSByZXNwb25zZSIsIGFzeW5jICgpID0+IHsKICAzOTggfCAgICAgICAgIGF3YWl0IGZhcVBhZ2UuZmlsZUZvcm1hdHMuY2xpY2soKTsKICAzOTkgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLmZpbGVGb3JtYXRzLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkudG9CZVZpc2libGUoKTsKICA0MDAgfCAgICAgICAgIC8vIGF3YWl0IGV4cGVjdChmYXFQYWdlLmZpbGVGb3JtYXRzLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkudG9IYXZlVGV4dCgiIik7IFRPRE8KICA0MDEgfCAgICAgICB9KTsKICA0MDIgfAogIDQwMyB8ICAgICAgIHRlc3QoInNob3VsZCBkaXNwbGF5IHRoZSBsaXN0IG9uIG9uYm9hcmRpbmcgbWF0ZXJpYWxzIEZBUSByZXNwb25zZSIsIGFzeW5jICgpID0+IHsKICA0MDQgfCAgICAgICAgIGF3YWl0IGZhcVBhZ2Uub25ib2FyZGluZ01hdGVyaWFscy5jbGljaygpOwogIDQwNSB8ICAgICAgICAgYXdhaXQgZXhwZWN0KGZhcVBhZ2Uub25ib2FyZGluZ01hdGVyaWFscy5sb2NhdG9yKCJkaXY6bnRoLWNoaWxkKDEpIikpLnRvQmVWaXNpYmxlKCk7CiAgNDA2IHwgICAgICAgICAvLyBhd2FpdCBleHBlY3QoZmFxUGFnZS5vbmJvYXJkaW5nTWF0ZXJpYWxzLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkudG9IYXZlVGV4dCgiIik7IFRPRE8KICA0MDcgfCAgICAgICAgIC8vIFRPRE86IGFzc2VydCBvbiBQREYgSFJFRnMKICA0MDggfCAgICAgICB9KTsKICA0MDkgfCAgICAgfSk7CiAgNDEwIHwKICA0MTEgfCAgICAgdGVzdC5kZXNjcmliZSgiU3RhdGUgUGxhbiBBbWVuZG1lbnRzIChTUEFzKSBTZWN0aW9uIiwgKCkgPT4gewogIDQxMiB8ICAgICAgIHRlc3QoInNob3VsZCBkaXNwbGF5IGZvcm1hdCB1c2VkIHRvIGVudGVyIGEgU1BBIElEIEZBUSByZXNwb25zZSIsIGFzeW5jICgpID0+IHsKICA0MTMgfCAgICAgICAgIGF3YWl0IGZhcVBhZ2Uuc3BhSWRGb3JtYXQuY2xpY2soKTsKICA0MTQgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLnNwYUlkRm9ybWF0LmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkudG9CZVZpc2libGUoKTsKICA0MTUgfCAgICAgICB9KTsKICA0MTYgfAogIDQxNyB8ICAgICAgIHRlc3QoInNob3VsZCBkaXNwbGF5IE1lZGljYWlkIFNQQSBhdHRhY2htZW50cyBGQVEgcmVzcG9uc2UiLCBhc3luYyAoKSA9PiB7CiAgNDE4IHwgICAgICAgICBhd2FpdCBmYXFQYWdlLm1lZGljYWlkU3BhQXR0YWNobWVudHMuY2xpY2soKTsKICA0MTkgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLm1lZGljYWlkU3BhQXR0YWNobWVudHMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS50b0JlVmlzaWJsZSgpOwogIDQyMCB8ICAgICAgIH0pOwogIDQyMSB8CiAgNDIyIHwgICAgICAgdGVzdCgic2hvdWxkIGRpc3BsYXkgYXR0YWNobWVudHMgcmVzcG9uc2UgdG8gTWVkaWNhaWQgUkFJIEZBUSByZXNwb25zZSIsIGFzeW5jICgpID0+IHsKICA0MjMgfCAgICAgICAgIGF3YWl0IGZhcVBhZ2UubWVkaWNhaWRTcGFSYWkuY2xpY2soKTsKICA0MjQgfCAgICAgICAgIGF3YWl0IGV4cGVjdChmYXFQYWdlLm1lZGljYWlkU3BhUmFpLmxvY2F0b3IoImRpdjpudGgtY2hpbGQoMSkiKSkudG9CZVZpc2libGUoKTsKICA0MjUgfCAgICAgICB9KTsKICA0MjYgfAogIDQyNyB8ICAgICAgIHRlc3QoInNob3VsZCBkaXNwbGF5IENISVAgU1BBIGF0dGFjaG1lbnRzIEZBUSByZXNwb25zZSIsIGFzeW5jICgpID0+IHsKICA0MjggfCAgICAgICAgIGF3YWl0IGZhcVBhZ2UuY2hpcFNwYUF0dGFjaG1lbnRzLmNsaWNrKCk7CiAgNDI5IHwgICAgICAgICBhd2FpdCBleHBlY3QoZmFxUGFnZS5jaGlwU3BhQXR0YWNobWVudHMubG9jYXRvcigiZGl2Om50aC1jaGlsZCgxKSIpKS50b0JlVmlzaWJsZSgpOwogIDQzMCB8ICAgICAgIH0pOwogIDQzMSB8CmBgYA=="
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 36,
                                "line": 331
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-a47c1b2de6a0952b5e35",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 330,
                      "column": 7
                    },
                    {
                      "title": "displays attachments for 1915(c) Appendix K waiver FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 102,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5478,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:338:47",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#appk-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 47,
                                  "line": 338
                                },
                                "snippet": "\u001b[0m \u001b[90m 336 |\u001b[39m\n \u001b[90m 337 |\u001b[39m       test(\u001b[32m\"displays attachments for 1915(c) Appendix K waiver FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 338 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mappKAttachments)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 339 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mappKAttachments)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 340 |\u001b[39m           \u001b[32m\"What are the attachments for a 1915(c) Appendix K Waiver?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 341 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 47,
                                    "line": 338
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk-attachments')\u001b[22m\n\n\n  336 |\n  337 |       test(\"displays attachments for 1915(c) Appendix K waiver FAQ\", async () => {\n> 338 |         await expect(faqPage.appKAttachments).toBeVisible();\n      |                                               ^\n  339 |         await expect(faqPage.appKAttachments).toHaveText(\n  340 |           \"What are the attachments for a 1915(c) Appendix K Waiver?\",\n  341 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:338:47"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:37:47.090Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 47,
                                "line": 338
                              }
                            },
                            {
                              "workerIndex": 103,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5838,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#appk-attachments')\nExpected string: \u001b[32m\"What are the attachments for a 1915(c) Appendix K Waiver?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#appk-attachments')\nExpected string: \u001b[32m\"What are the attachments for a 1915(c) Appendix K Waiver?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:339:47",
                                "matcherResult": {
                                  "name": "toHaveText",
                                  "expected": "What are the attachments for a 1915(c) Appendix K Waiver?",
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#appk-attachments')\nExpected string: \u001b[32m\"What are the attachments for a 1915(c) Appendix K Waiver?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "log": [
                                    "  - expect.toHaveText with timeout 5000ms",
                                    "  - waiting for locator('#appk-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 47,
                                  "line": 339
                                },
                                "snippet": "\u001b[0m \u001b[90m 337 |\u001b[39m       test(\u001b[32m\"displays attachments for 1915(c) Appendix K waiver FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 338 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mappKAttachments)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 339 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mappKAttachments)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m     |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 340 |\u001b[39m           \u001b[32m\"What are the attachments for a 1915(c) Appendix K Waiver?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 341 |\u001b[39m         )\u001b[33m;\u001b[39m\n \u001b[90m 342 |\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 47,
                                    "line": 339
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#appk-attachments')\nExpected string: \u001b[32m\"What are the attachments for a 1915(c) Appendix K Waiver?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk-attachments')\u001b[22m\n\n\n  337 |       test(\"displays attachments for 1915(c) Appendix K waiver FAQ\", async () => {\n  338 |         await expect(faqPage.appKAttachments).toBeVisible();\n> 339 |         await expect(faqPage.appKAttachments).toHaveText(\n      |                                               ^\n  340 |           \"What are the attachments for a 1915(c) Appendix K Waiver?\",\n  341 |         );\n  342 |\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:339:47"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:37:53.491Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-0a4a9-915-c-Appendix-K-waiver-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 47,
                                "line": 339
                              }
                            },
                            {
                              "workerIndex": 104,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5480,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk-attachments')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk-attachments')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:338:47",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk-attachments')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#appk-attachments')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 47,
                                  "line": 338
                                },
                                "snippet": "\u001b[0m \u001b[90m 336 |\u001b[39m\n \u001b[90m 337 |\u001b[39m       test(\u001b[32m\"displays attachments for 1915(c) Appendix K waiver FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 338 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mappKAttachments)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 339 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mappKAttachments)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 340 |\u001b[39m           \u001b[32m\"What are the attachments for a 1915(c) Appendix K Waiver?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 341 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 47,
                                    "line": 338
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#appk-attachments')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#appk-attachments')\u001b[22m\n\n\n  336 |\n  337 |       test(\"displays attachments for 1915(c) Appendix K waiver FAQ\", async () => {\n> 338 |         await expect(faqPage.appKAttachments).toBeVisible();\n      |                                               ^\n  339 |         await expect(faqPage.appKAttachments).toHaveText(\n  340 |           \"What are the attachments for a 1915(c) Appendix K Waiver?\",\n  341 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:338:47"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:38:00.280Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 47,
                                "line": 338
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-295960946a876110c5de",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 337,
                      "column": 7
                    },
                    {
                      "title": "displays withdraw Formal RAI Response for Medicaid Waiver FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 105,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5487,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-waiver-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-waiver-rai-response')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-waiver-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-waiver-rai-response')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:347:49",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-waiver-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-waiver-rai-response')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-waiver-rai-response')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 49,
                                  "line": 347
                                },
                                "snippet": "\u001b[0m \u001b[90m 345 |\u001b[39m\n \u001b[90m 346 |\u001b[39m       test(\u001b[32m\"displays withdraw Formal RAI Response for Medicaid Waiver FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 347 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawWaiverRai)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 348 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawWaiverRai)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 349 |\u001b[39m           \u001b[32m\"How do I Withdraw a Formal RAI Response for a Medicaid Waiver?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 350 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 49,
                                    "line": 347
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-waiver-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-waiver-rai-response')\u001b[22m\n\n\n  345 |\n  346 |       test(\"displays withdraw Formal RAI Response for Medicaid Waiver FAQ\", async () => {\n> 347 |         await expect(faqPage.withdrawWaiverRai).toBeVisible();\n      |                                                 ^\n  348 |         await expect(faqPage.withdrawWaiverRai).toHaveText(\n  349 |           \"How do I Withdraw a Formal RAI Response for a Medicaid Waiver?\",\n  350 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:347:49"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:38:06.667Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 49,
                                "line": 347
                              }
                            },
                            {
                              "workerIndex": 106,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5860,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#withdraw-waiver-rai-response')\nExpected string: \u001b[32m\"How do I Withdraw a Formal RAI Response for a Medicaid Waiver?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-waiver-rai-response')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#withdraw-waiver-rai-response')\nExpected string: \u001b[32m\"How do I Withdraw a Formal RAI Response for a Medicaid Waiver?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-waiver-rai-response')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:348:49",
                                "matcherResult": {
                                  "name": "toHaveText",
                                  "expected": "How do I Withdraw a Formal RAI Response for a Medicaid Waiver?",
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#withdraw-waiver-rai-response')\nExpected string: \u001b[32m\"How do I Withdraw a Formal RAI Response for a Medicaid Waiver?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-waiver-rai-response')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "log": [
                                    "  - expect.toHaveText with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-waiver-rai-response')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 49,
                                  "line": 348
                                },
                                "snippet": "\u001b[0m \u001b[90m 346 |\u001b[39m       test(\u001b[32m\"displays withdraw Formal RAI Response for Medicaid Waiver FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n \u001b[90m 347 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawWaiverRai)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 348 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawWaiverRai)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m     |\u001b[39m                                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 349 |\u001b[39m           \u001b[32m\"How do I Withdraw a Formal RAI Response for a Medicaid Waiver?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 350 |\u001b[39m         )\u001b[33m;\u001b[39m\n \u001b[90m 351 |\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 49,
                                    "line": 348
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoHaveText\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nLocator: locator('#withdraw-waiver-rai-response')\nExpected string: \u001b[32m\"How do I Withdraw a Formal RAI Response for a Medicaid Waiver?\"\u001b[39m\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toHaveText with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-waiver-rai-response')\u001b[22m\n\n\n  346 |       test(\"displays withdraw Formal RAI Response for Medicaid Waiver FAQ\", async () => {\n  347 |         await expect(faqPage.withdrawWaiverRai).toBeVisible();\n> 348 |         await expect(faqPage.withdrawWaiverRai).toHaveText(\n      |                                                 ^\n  349 |           \"How do I Withdraw a Formal RAI Response for a Medicaid Waiver?\",\n  350 |         );\n  351 |\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:348:49"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:38:13.078Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-44daf-nse-for-Medicaid-Waiver-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 49,
                                "line": 348
                              }
                            },
                            {
                              "workerIndex": 107,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5476,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-waiver-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-waiver-rai-response')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-waiver-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-waiver-rai-response')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:347:49",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-waiver-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-waiver-rai-response')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-waiver-rai-response')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 49,
                                  "line": 347
                                },
                                "snippet": "\u001b[0m \u001b[90m 345 |\u001b[39m\n \u001b[90m 346 |\u001b[39m       test(\u001b[32m\"displays withdraw Formal RAI Response for Medicaid Waiver FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 347 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawWaiverRai)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 348 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawWaiverRai)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 349 |\u001b[39m           \u001b[32m\"How do I Withdraw a Formal RAI Response for a Medicaid Waiver?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 350 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 49,
                                    "line": 347
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-waiver-rai-response')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-waiver-rai-response')\u001b[22m\n\n\n  345 |\n  346 |       test(\"displays withdraw Formal RAI Response for Medicaid Waiver FAQ\", async () => {\n> 347 |         await expect(faqPage.withdrawWaiverRai).toBeVisible();\n      |                                                 ^\n  348 |         await expect(faqPage.withdrawWaiverRai).toHaveText(\n  349 |           \"How do I Withdraw a Formal RAI Response for a Medicaid Waiver?\",\n  350 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:347:49"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:38:19.891Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 49,
                                "line": 347
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-1719216f53d2b85c4d35",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 346,
                      "column": 7
                    },
                    {
                      "title": "displays withdraw Package for Waiver FAQ",
                      "ok": false,
                      "tags": [
                        "e2e",
                        "smoke",
                        "faq",
                        "CI"
                      ],
                      "tests": [
                        {
                          "timeout": 30000,
                          "annotations": [],
                          "expectedStatus": "passed",
                          "projectId": "state-user-chrome",
                          "projectName": "state-user-chrome",
                          "results": [
                            {
                              "workerIndex": 108,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5500,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-waiver')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-waiver')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-waiver')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-waiver')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:356:53",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-waiver')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-waiver')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-package-waiver')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 53,
                                  "line": 356
                                },
                                "snippet": "\u001b[0m \u001b[90m 354 |\u001b[39m\n \u001b[90m 355 |\u001b[39m       test(\u001b[32m\"displays withdraw Package for Waiver FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 356 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageWaiver)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 357 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageWaiver)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 358 |\u001b[39m           \u001b[32m\"How do I Withdraw a Package for a Waiver?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 359 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 53,
                                    "line": 356
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-waiver')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-waiver')\u001b[22m\n\n\n  354 |\n  355 |       test(\"displays withdraw Package for Waiver FAQ\", async () => {\n> 356 |         await expect(faqPage.withdrawPackageWaiver).toBeVisible();\n      |                                                     ^\n  357 |         await expect(faqPage.withdrawPackageWaiver).toHaveText(\n  358 |           \"How do I Withdraw a Package for a Waiver?\",\n  359 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:356:53"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 0,
                              "startTime": "2025-03-13T19:38:26.298Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 53,
                                "line": 356
                              }
                            },
                            {
                              "workerIndex": 109,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5648,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-waiver')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-waiver')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-waiver')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-waiver')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:356:53",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-waiver')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-waiver')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-package-waiver')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 53,
                                  "line": 356
                                },
                                "snippet": "\u001b[0m \u001b[90m 354 |\u001b[39m\n \u001b[90m 355 |\u001b[39m       test(\u001b[32m\"displays withdraw Package for Waiver FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 356 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageWaiver)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 357 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageWaiver)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 358 |\u001b[39m           \u001b[32m\"How do I Withdraw a Package for a Waiver?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 359 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 53,
                                    "line": 356
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-waiver')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-waiver')\u001b[22m\n\n\n  354 |\n  355 |       test(\"displays withdraw Package for Waiver FAQ\", async () => {\n> 356 |         await expect(faqPage.withdrawPackageWaiver).toBeVisible();\n      |                                                     ^\n  357 |         await expect(faqPage.withdrawPackageWaiver).toHaveText(\n  358 |           \"How do I Withdraw a Package for a Waiver?\",\n  359 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:356:53"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 1,
                              "startTime": "2025-03-13T19:38:32.712Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                },
                                {
                                  "name": "trace",
                                  "contentType": "application/zip",
                                  "path": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/test-results/e2e-faq-faq-FAQ-page-UI-va-f6498-draw-Package-for-Waiver-FAQ-state-user-chrome-retry1/trace.zip"
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 53,
                                "line": 356
                              }
                            },
                            {
                              "workerIndex": 110,
                              "parallelIndex": 0,
                              "status": "failed",
                              "duration": 5500,
                              "error": {
                                "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-waiver')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-waiver')\u001b[22m\n",
                                "stack": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-waiver')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-waiver')\u001b[22m\n\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:356:53",
                                "matcherResult": {
                                  "message": "\u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-waiver')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-waiver')\u001b[22m\n",
                                  "pass": false,
                                  "actual": "<element(s) not found>",
                                  "name": "toBeVisible",
                                  "expected": "visible",
                                  "log": [
                                    "  - expect.toBeVisible with timeout 5000ms",
                                    "  - waiting for locator('#withdraw-package-waiver')"
                                  ],
                                  "timeout": 5000
                                },
                                "location": {
                                  "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                  "column": 53,
                                  "line": 356
                                },
                                "snippet": "\u001b[0m \u001b[90m 354 |\u001b[39m\n \u001b[90m 355 |\u001b[39m       test(\u001b[32m\"displays withdraw Package for Waiver FAQ\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 356 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageWaiver)\u001b[33m.\u001b[39mtoBeVisible()\u001b[33m;\u001b[39m\n \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 357 |\u001b[39m         \u001b[36mawait\u001b[39m expect(faqPage\u001b[33m.\u001b[39mwithdrawPackageWaiver)\u001b[33m.\u001b[39mtoHaveText(\n \u001b[90m 358 |\u001b[39m           \u001b[32m\"How do I Withdraw a Package for a Waiver?\"\u001b[39m\u001b[33m,\u001b[39m\n \u001b[90m 359 |\u001b[39m         )\u001b[33m;\u001b[39m\u001b[0m"
                              },
                              "errors": [
                                {
                                  "location": {
                                    "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                    "column": 53,
                                    "line": 356
                                  },
                                  "message": "Error: \u001b[31mTimed out 5000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: locator('#withdraw-package-waiver')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - expect.toBeVisible with timeout 5000ms\u001b[22m\n\u001b[2m  - waiting for locator('#withdraw-package-waiver')\u001b[22m\n\n\n  354 |\n  355 |       test(\"displays withdraw Package for Waiver FAQ\", async () => {\n> 356 |         await expect(faqPage.withdrawPackageWaiver).toBeVisible();\n      |                                                     ^\n  357 |         await expect(faqPage.withdrawPackageWaiver).toHaveText(\n  358 |           \"How do I Withdraw a Package for a Waiver?\",\n  359 |         );\n    at /home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts:356:53"
                                }
                              ],
                              "stdout": [],
                              "stderr": [],
                              "retry": 2,
                              "startTime": "2025-03-13T19:38:39.306Z",
                              "attachments": [
                                {
                                  "name": "_prompt-0",
                                  "contentType": "text/markdown",
                                  "body": ""
                                }
                              ],
                              "errorLocation": {
                                "file": "/home/runner/work/macpro-mako/macpro-mako/test/e2e/faq/faq.spec.ts",
                                "column": 53,
                                "line": 356
                              }
                            }
                          ],
                          "status": "unexpected"
                        }
                      ],
                      "id": "ea688ac7e25471e4a698-5983eb64aeb6029d1afe",
                      "file": "e2e/faq/faq.spec.ts",
                      "line": 355,
                      "column": 7
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "title": "non-func/a11y/index.spec.ts",
      "file": "non-func/a11y/index.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "test a11y on static routes",
          "file": "non-func/a11y/index.spec.ts",
          "line": 8,
          "column": 6,
          "specs": [
            {
              "title": "/ should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1607,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/ violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:38:45.724Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-4b4f5479f4265871afe0",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/dashboard should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1587,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/dashboard violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:38:47.428Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-62b024a4cee055b288c9",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/faq should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1924,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/faq violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:38:49.021Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-9a6c4f0b6958db7af0b3",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/profile should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1457,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/profile violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:38:50.949Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-0c4b99db1142258de123",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1449,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:38:52.410Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-857fa62bf7e5d36a7dbe",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/spa should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1476,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/spa violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:38:53.863Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-2c512ad1551f4caa94b0",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/spa/medicaid should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1479,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/spa/medicaid violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:38:55.343Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-36d33e301fde12f210ee",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/spa/chip should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1476,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/spa/chip violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:38:56.826Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-ccc48d7d7eaeaf675f29",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/waiver should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1464,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/waiver violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:38:58.306Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-032350aef2535a2f2431",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/waiver/b should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1467,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/waiver/b violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:38:59.774Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-ffde4f38b22ca315f360",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/waiver/b/b4 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1502,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/waiver/b/b4 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:01.247Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-523cf218f6c0865f907d",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/waiver/b/capitated should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1496,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/waiver/b/capitated violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:02.754Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-e64a62c49585d0dfd607",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/spa/medicaid/landing/medicaid-abp should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1471,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/spa/medicaid/landing/medicaid-abp violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:04.254Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-e1e0c880ac9a9e69d4bf",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/spa/medicaid/landing/medicaid-eligibility should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1503,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/spa/medicaid/landing/medicaid-eligibility violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:05.729Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-eeea894394768353c3f0",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/spa/chip/landing/chip-eligibility should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1456,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/spa/chip/landing/chip-eligibility violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:07.236Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-917525c8e0aabf618360",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/waiver/b/capitated/amendment/create should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1713,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/waiver/b/capitated/amendment/create violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:08.696Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-4f48ac046548fc1e6a58",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/waiver/b/capitated/renewal/create should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1658,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/waiver/b/capitated/renewal/create violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:10.412Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-46613a2c918f0843aba9",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/waiver/b/capitated/initial/create should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1634,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/waiver/b/capitated/initial/create violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:12.075Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-058debe26c633c63f722",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/waiver/b/b4/initial/create should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1640,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/waiver/b/b4/initial/create violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:13.713Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-eb48c56f0b62cbe031ac",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/waiver/b/b4/amendment/create should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1606,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/waiver/b/b4/amendment/create violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:15.359Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-7c83e4f5d1544a84eec1",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/waiver/b/b4/renewal/create should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1655,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/waiver/b/b4/renewal/create violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:16.970Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-49bdf2c909413aaa02b5",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/spa/medicaid/create should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1710,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/spa/medicaid/create violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:18.629Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-d34070cfe84d48ebd0a2",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/spa/chip/create should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1687,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/spa/chip/create violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:20.342Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-24176b01d225b993061a",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/waiver/app-k should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1610,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/waiver/app-k violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:22.034Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-b18e956b40b1d5219c68",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            },
            {
              "title": "/new-submission/waiver/temporary-extensions should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 1605,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/new-submission/waiver/temporary-extensions violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:23.648Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-2fa9333d89cc29bcee66",
              "file": "non-func/a11y/index.spec.ts",
              "line": 10,
              "column": 9
            }
          ]
        },
        {
          "title": "test a11y on webform routes",
          "file": "non-func/a11y/index.spec.ts",
          "line": 25,
          "column": 6,
          "specs": [
            {
              "title": "/guides/abp should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 3090,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/guides/abp violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:25.256Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-15c3522369cd86774996",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/g3/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 3612,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/g3/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:28.351Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-ea26df9b68f81c423bd2",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/g2b/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 3204,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/g2b/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:31.966Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-0ca61bcb8fb1ca55f8dd",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/g2a/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 3202,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/g2a/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:35.175Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-2cc33f8876c7fae89e26",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/g1/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 3226,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/g1/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:38.380Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-f399896491225c244e3b",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/cs8/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 3157,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/cs8/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:41.611Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-1f6ed40b5244efb92c98",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/cs3/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 3031,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/cs3/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:44.772Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-0675f0351af0a349546e",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/cs7/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 3155,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/cs7/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:47.809Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-c601598091a255d818c2",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/abp11/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 2957,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/abp11/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:50.968Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-5784f0762388914f3e4d",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/abp10/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 3004,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/abp10/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:53.928Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-8ee8eaca87eea56d0b41",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/abp9/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 2969,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/abp9/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:56.937Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-66b6b821abd37cfaac0b",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/abp7/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 3173,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/abp7/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:39:59.910Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-39a5acd017325ba7998c",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/abp6/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 3089,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/abp6/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:40:03.087Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-cfa3f09f7372643178cc",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/abp5/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 2937,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/abp5/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:40:06.179Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-08247e889595323aa15b",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/abp4/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 2981,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/abp4/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:40:09.120Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-82ad6c97f6175cdf2216",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/abp3_1/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 3078,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/abp3_1/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:40:12.104Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-3956f981468898ec5afd",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/abp3/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 3140,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/abp3/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:40:15.186Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-8e0b50228a2e17982af6",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/abp2c/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 3364,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/abp2c/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:40:18.331Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-b22645bac837bb67c481",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/abp2b/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 3277,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/abp2b/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:40:21.698Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-7953486ea3a4dd67ec8b",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/abp2a/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 2949,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/abp2a/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:40:24.979Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-48114b61f32f7ce98d5a",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/abp1/202401 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 3034,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/abp1/202401 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:40:27.932Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-50f23652b039e14a33cc",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            },
            {
              "title": "/webform/abp1/202402 should not have any automatically detectable accessibility issues",
              "ok": true,
              "tags": [
                "CI",
                "a11y"
              ],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "state-user-chrome",
                  "projectName": "state-user-chrome",
                  "results": [
                    {
                      "workerIndex": 111,
                      "parallelIndex": 0,
                      "status": "passed",
                      "duration": 3087,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "/webform/abp1/202402 violations:  \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-03-13T19:40:30.969Z",
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "37280e3c1e02c3251f32-94f97e5e39b28f6acda8",
              "file": "non-func/a11y/index.spec.ts",
              "line": 27,
              "column": 9
            }
          ]
        }
      ]
    }
  ],
  "errors": [],
  "stats": {
    "startTime": "2025-03-13T19:26:34.506Z",
    "duration": 839601.3439999999,
    "expected": 47,
    "skipped": 2,
    "unexpected": 37,
    "flaky": 0
  }
}